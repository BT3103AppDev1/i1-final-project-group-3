import {
  EMPTY_OBJ,
  NO,
  NOOP,
  PatchFlagNames,
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  camelize,
  capitalize,
  extend,
  generateCodeFrame,
  hyphenate,
  init_runtime_dom_esm_bundler,
  init_shared_esm_bundler,
  isArray,
  isBuiltInDirective,
  isHTMLTag,
  isObject,
  isOn,
  isReservedProp,
  isSVGTag,
  isString,
  isSymbol,
  isVoidTag,
  makeMap,
  parseStringStyle,
  runtime_dom_esm_bundler_exports,
  shared_esm_bundler_exports,
  slotFlagsText,
  toHandlerKey
} from "./chunk-PAJGACHV.js";

// node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js
function defaultOnError(error) {
  throw error;
}
function defaultOnWarn(msg) {
  console.warn(`[Vue warn] ${msg.message}`);
}
function createCompilerError(code, loc, messages, additionalMessage) {
  const msg = true ? (messages || errorMessages)[code] + (additionalMessage || ``) : code;
  const error = new SyntaxError(String(msg));
  error.code = code;
  error.loc = loc;
  return error;
}
function registerRuntimeHelpers(helpers) {
  Object.getOwnPropertySymbols(helpers).forEach((s) => {
    helperNameMap[s] = helpers[s];
  });
}
function createRoot(children, loc = locStub) {
  return {
    type: 0,
    children,
    helpers: /* @__PURE__ */ new Set(),
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: 0,
    temps: 0,
    codegenNode: void 0,
    loc
  };
}
function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
  if (context) {
    if (isBlock) {
      context.helper(OPEN_BLOCK);
      context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
    } else {
      context.helper(getVNodeHelper(context.inSSR, isComponent2));
    }
    if (directives) {
      context.helper(WITH_DIRECTIVES);
    }
  }
  return {
    type: 13,
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2,
    loc
  };
}
function createArrayExpression(elements, loc = locStub) {
  return {
    type: 17,
    loc,
    elements
  };
}
function createObjectExpression(properties, loc = locStub) {
  return {
    type: 15,
    loc,
    properties
  };
}
function createObjectProperty(key, value) {
  return {
    type: 16,
    loc: locStub,
    key: isString(key) ? createSimpleExpression(key, true) : key,
    value
  };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
  return {
    type: 4,
    loc,
    content,
    isStatic,
    constType: isStatic ? 3 : constType
  };
}
function createInterpolation(content, loc) {
  return {
    type: 5,
    loc,
    content: isString(content) ? createSimpleExpression(content, false, loc) : content
  };
}
function createCompoundExpression(children, loc = locStub) {
  return {
    type: 8,
    loc,
    children
  };
}
function createCallExpression(callee, args = [], loc = locStub) {
  return {
    type: 14,
    loc,
    callee,
    arguments: args
  };
}
function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
  return {
    type: 18,
    params,
    returns,
    newline,
    isSlot,
    loc
  };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
  return {
    type: 19,
    test,
    consequent,
    alternate,
    newline,
    loc: locStub
  };
}
function createCacheExpression(index, value, isVNode = false) {
  return {
    type: 20,
    index,
    value,
    isVNode,
    loc: locStub
  };
}
function createBlockStatement(body) {
  return {
    type: 21,
    body,
    loc: locStub
  };
}
function createTemplateLiteral(elements) {
  return {
    type: 22,
    elements,
    loc: locStub
  };
}
function createIfStatement(test, consequent, alternate) {
  return {
    type: 23,
    test,
    consequent,
    alternate,
    loc: locStub
  };
}
function createAssignmentExpression(left, right) {
  return {
    type: 24,
    left,
    right,
    loc: locStub
  };
}
function createSequenceExpression(expressions) {
  return {
    type: 25,
    expressions,
    loc: locStub
  };
}
function createReturnStatement(returns) {
  return {
    type: 26,
    returns,
    loc: locStub
  };
}
function getVNodeHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
function convertToBlock(node, { helper, removeHelper, inSSR }) {
  if (!node.isBlock) {
    node.isBlock = true;
    removeHelper(getVNodeHelper(inSSR, node.isComponent));
    helper(OPEN_BLOCK);
    helper(getVNodeBlockHelper(inSSR, node.isComponent));
  }
}
function isCoreComponent(tag) {
  if (isBuiltInType(tag, "Teleport")) {
    return TELEPORT;
  } else if (isBuiltInType(tag, "Suspense")) {
    return SUSPENSE;
  } else if (isBuiltInType(tag, "KeepAlive")) {
    return KEEP_ALIVE;
  } else if (isBuiltInType(tag, "BaseTransition")) {
    return BASE_TRANSITION;
  }
}
function getInnerRange(loc, offset, length) {
  const source = loc.source.slice(offset, offset + length);
  const newLoc = {
    source,
    start: advancePositionWithClone(loc.start, loc.source, offset),
    end: loc.end
  };
  if (length != null) {
    newLoc.end = advancePositionWithClone(
      loc.start,
      loc.source,
      offset + length
    );
  }
  return newLoc;
}
function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
  return advancePositionWithMutation(
    extend({}, pos),
    source,
    numberOfCharacters
  );
}
function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
  let linesCount = 0;
  let lastNewLinePos = -1;
  for (let i = 0; i < numberOfCharacters; i++) {
    if (source.charCodeAt(i) === 10) {
      linesCount++;
      lastNewLinePos = i;
    }
  }
  pos.offset += numberOfCharacters;
  pos.line += linesCount;
  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
  return pos;
}
function assert(condition, msg) {
  if (!condition) {
    throw new Error(msg || `unexpected compiler condition`);
  }
}
function findDir(node, name, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 7 && (allowEmpty || p.exp) && (isString(name) ? p.name === name : name.test(p.name))) {
      return p;
    }
  }
}
function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 6) {
      if (dynamicOnly)
        continue;
      if (p.name === name && (p.value || allowEmpty)) {
        return p;
      }
    } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {
      return p;
    }
  }
}
function isStaticArgOf(arg, name) {
  return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node) {
  return node.props.some(
    (p) => p.type === 7 && p.name === "bind" && (!p.arg || // v-bind="obj"
    p.arg.type !== 4 || // v-bind:[_ctx.foo]
    !p.arg.isStatic)
    // v-bind:[foo]
  );
}
function isText$1(node) {
  return node.type === 5 || node.type === 2;
}
function isVSlot(p) {
  return p.type === 7 && p.name === "slot";
}
function isTemplateNode(node) {
  return node.type === 1 && node.tagType === 3;
}
function isSlotOutlet(node) {
  return node.type === 1 && node.tagType === 2;
}
function getUnnormalizedProps(props, callPath = []) {
  if (props && !isString(props) && props.type === 14) {
    const callee = props.callee;
    if (!isString(callee) && propsHelperSet.has(callee)) {
      return getUnnormalizedProps(
        props.arguments[0],
        callPath.concat(props)
      );
    }
  }
  return [props, callPath];
}
function injectProp(node, prop, context) {
  let propsWithInjection;
  let props = node.type === 13 ? node.props : node.arguments[2];
  let callPath = [];
  let parentCall;
  if (props && !isString(props) && props.type === 14) {
    const ret = getUnnormalizedProps(props);
    props = ret[0];
    callPath = ret[1];
    parentCall = callPath[callPath.length - 1];
  }
  if (props == null || isString(props)) {
    propsWithInjection = createObjectExpression([prop]);
  } else if (props.type === 14) {
    const first = props.arguments[0];
    if (!isString(first) && first.type === 15) {
      if (!hasProp(prop, first)) {
        first.properties.unshift(prop);
      }
    } else {
      if (props.callee === TO_HANDLERS) {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
      } else {
        props.arguments.unshift(createObjectExpression([prop]));
      }
    }
    !propsWithInjection && (propsWithInjection = props);
  } else if (props.type === 15) {
    if (!hasProp(prop, props)) {
      props.properties.unshift(prop);
    }
    propsWithInjection = props;
  } else {
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
      createObjectExpression([prop]),
      props
    ]);
    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
      parentCall = callPath[callPath.length - 2];
    }
  }
  if (node.type === 13) {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.props = propsWithInjection;
    }
  } else {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.arguments[2] = propsWithInjection;
    }
  }
}
function hasProp(prop, props) {
  let result = false;
  if (prop.key.type === 4) {
    const propKeyName = prop.key.content;
    result = props.properties.some(
      (p) => p.key.type === 4 && p.key.content === propKeyName
    );
  }
  return result;
}
function toValidAssetId(name, type) {
  return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
  })}`;
}
function hasScopeRef(node, ids) {
  if (!node || Object.keys(ids).length === 0) {
    return false;
  }
  switch (node.type) {
    case 1:
      for (let i = 0; i < node.props.length; i++) {
        const p = node.props[i];
        if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {
          return true;
        }
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 11:
      if (hasScopeRef(node.source, ids)) {
        return true;
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 9:
      return node.branches.some((b) => hasScopeRef(b, ids));
    case 10:
      if (hasScopeRef(node.condition, ids)) {
        return true;
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 4:
      return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
    case 8:
      return node.children.some((c) => isObject(c) && hasScopeRef(c, ids));
    case 5:
    case 12:
      return hasScopeRef(node.content, ids);
    case 2:
    case 3:
      return false;
    default:
      if (true)
        ;
      return false;
  }
}
function getMemoedVNodeCall(node) {
  if (node.type === 14 && node.callee === WITH_MEMO) {
    return node.arguments[1].returns;
  } else {
    return node;
  }
}
function getCompatValue(key, context) {
  const config = context.options ? context.options.compatConfig : context.compatConfig;
  const value = config && config[key];
  if (key === "MODE") {
    return value || 3;
  } else {
    return value;
  }
}
function isCompatEnabled(key, context) {
  const mode = getCompatValue("MODE", context);
  const value = getCompatValue(key, context);
  return mode === 3 ? value === true : value !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
  const enabled = isCompatEnabled(key, context);
  if (enabled) {
    warnDeprecation(key, context, loc, ...args);
  }
  return enabled;
}
function warnDeprecation(key, context, loc, ...args) {
  const val = getCompatValue(key, context);
  if (val === "suppress-warning") {
    return;
  }
  const { message, link } = deprecationData[key];
  const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
  const err = new SyntaxError(msg);
  err.code = key;
  if (loc)
    err.loc = loc;
  context.onWarn(err);
}
function baseParse(content, options = {}) {
  const context = createParserContext(content, options);
  const start = getCursor(context);
  return createRoot(
    parseChildren(context, 0, []),
    getSelection(context, start)
  );
}
function createParserContext(content, rawOptions) {
  const options = extend({}, defaultParserOptions);
  let key;
  for (key in rawOptions) {
    options[key] = rawOptions[key] === void 0 ? defaultParserOptions[key] : rawOptions[key];
  }
  return {
    options,
    column: 1,
    line: 1,
    offset: 0,
    originalSource: content,
    source: content,
    inPre: false,
    inVPre: false,
    onWarn: options.onWarn
  };
}
function parseChildren(context, mode, ancestors) {
  const parent = last(ancestors);
  const ns = parent ? parent.ns : 0;
  const nodes = [];
  while (!isEnd(context, mode, ancestors)) {
    const s = context.source;
    let node = void 0;
    if (mode === 0 || mode === 1) {
      if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
        node = parseInterpolation(context, mode);
      } else if (mode === 0 && s[0] === "<") {
        if (s.length === 1) {
          emitError(context, 5, 1);
        } else if (s[1] === "!") {
          if (startsWith(s, "<!--")) {
            node = parseComment(context);
          } else if (startsWith(s, "<!DOCTYPE")) {
            node = parseBogusComment(context);
          } else if (startsWith(s, "<![CDATA[")) {
            if (ns !== 0) {
              node = parseCDATA(context, ancestors);
            } else {
              emitError(context, 1);
              node = parseBogusComment(context);
            }
          } else {
            emitError(context, 11);
            node = parseBogusComment(context);
          }
        } else if (s[1] === "/") {
          if (s.length === 2) {
            emitError(context, 5, 2);
          } else if (s[2] === ">") {
            emitError(context, 14, 2);
            advanceBy(context, 3);
            continue;
          } else if (/[a-z]/i.test(s[2])) {
            emitError(context, 23);
            parseTag(context, TagType.End, parent);
            continue;
          } else {
            emitError(
              context,
              12,
              2
            );
            node = parseBogusComment(context);
          }
        } else if (/[a-z]/i.test(s[1])) {
          node = parseElement(context, ancestors);
          if (isCompatEnabled(
            "COMPILER_NATIVE_TEMPLATE",
            context
          ) && node && node.tag === "template" && !node.props.some(
            (p) => p.type === 7 && isSpecialTemplateDirective(p.name)
          )) {
            warnDeprecation(
              "COMPILER_NATIVE_TEMPLATE",
              context,
              node.loc
            );
            node = node.children;
          }
        } else if (s[1] === "?") {
          emitError(
            context,
            21,
            1
          );
          node = parseBogusComment(context);
        } else {
          emitError(context, 12, 1);
        }
      }
    }
    if (!node) {
      node = parseText(context, mode);
    }
    if (isArray(node)) {
      for (let i = 0; i < node.length; i++) {
        pushNode(nodes, node[i]);
      }
    } else {
      pushNode(nodes, node);
    }
  }
  let removedWhitespace = false;
  if (mode !== 2 && mode !== 1) {
    const shouldCondense = context.options.whitespace !== "preserve";
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      if (node.type === 2) {
        if (!context.inPre) {
          if (!/[^\t\r\n\f ]/.test(node.content)) {
            const prev = nodes[i - 1];
            const next = nodes[i + 1];
            if (!prev || !next || shouldCondense && (prev.type === 3 && next.type === 3 || prev.type === 3 && next.type === 1 || prev.type === 1 && next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node.content))) {
              removedWhitespace = true;
              nodes[i] = null;
            } else {
              node.content = " ";
            }
          } else if (shouldCondense) {
            node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
          }
        } else {
          node.content = node.content.replace(/\r\n/g, "\n");
        }
      } else if (node.type === 3 && !context.options.comments) {
        removedWhitespace = true;
        nodes[i] = null;
      }
    }
    if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
      const first = nodes[0];
      if (first && first.type === 2) {
        first.content = first.content.replace(/^\r?\n/, "");
      }
    }
  }
  return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function pushNode(nodes, node) {
  if (node.type === 2) {
    const prev = last(nodes);
    if (prev && prev.type === 2 && prev.loc.end.offset === node.loc.start.offset) {
      prev.content += node.content;
      prev.loc.end = node.loc.end;
      prev.loc.source += node.loc.source;
      return;
    }
  }
  nodes.push(node);
}
function parseCDATA(context, ancestors) {
  advanceBy(context, 9);
  const nodes = parseChildren(context, 3, ancestors);
  if (context.source.length === 0) {
    emitError(context, 6);
  } else {
    advanceBy(context, 3);
  }
  return nodes;
}
function parseComment(context) {
  const start = getCursor(context);
  let content;
  const match = /--(\!)?>/.exec(context.source);
  if (!match) {
    content = context.source.slice(4);
    advanceBy(context, context.source.length);
    emitError(context, 7);
  } else {
    if (match.index <= 3) {
      emitError(context, 0);
    }
    if (match[1]) {
      emitError(context, 10);
    }
    content = context.source.slice(4, match.index);
    const s = context.source.slice(0, match.index);
    let prevIndex = 1, nestedIndex = 0;
    while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
      advanceBy(context, nestedIndex - prevIndex + 1);
      if (nestedIndex + 4 < s.length) {
        emitError(context, 16);
      }
      prevIndex = nestedIndex + 1;
    }
    advanceBy(context, match.index + match[0].length - prevIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseBogusComment(context) {
  const start = getCursor(context);
  const contentStart = context.source[1] === "?" ? 1 : 2;
  let content;
  const closeIndex = context.source.indexOf(">");
  if (closeIndex === -1) {
    content = context.source.slice(contentStart);
    advanceBy(context, context.source.length);
  } else {
    content = context.source.slice(contentStart, closeIndex);
    advanceBy(context, closeIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseElement(context, ancestors) {
  const wasInPre = context.inPre;
  const wasInVPre = context.inVPre;
  const parent = last(ancestors);
  const element = parseTag(context, TagType.Start, parent);
  const isPreBoundary = context.inPre && !wasInPre;
  const isVPreBoundary = context.inVPre && !wasInVPre;
  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
    if (isPreBoundary) {
      context.inPre = false;
    }
    if (isVPreBoundary) {
      context.inVPre = false;
    }
    return element;
  }
  ancestors.push(element);
  const mode = context.options.getTextMode(element, parent);
  const children = parseChildren(context, mode, ancestors);
  ancestors.pop();
  {
    const inlineTemplateProp = element.props.find(
      (p) => p.type === 6 && p.name === "inline-template"
    );
    if (inlineTemplateProp && checkCompatEnabled(
      "COMPILER_INLINE_TEMPLATE",
      context,
      inlineTemplateProp.loc
    )) {
      const loc = getSelection(context, element.loc.end);
      inlineTemplateProp.value = {
        type: 2,
        content: loc.source,
        loc
      };
    }
  }
  element.children = children;
  if (startsWithEndTagOpen(context.source, element.tag)) {
    parseTag(context, TagType.End, parent);
  } else {
    emitError(context, 24, 0, element.loc.start);
    if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
      const first = children[0];
      if (first && startsWith(first.loc.source, "<!--")) {
        emitError(context, 8);
      }
    }
  }
  element.loc = getSelection(context, element.loc.start);
  if (isPreBoundary) {
    context.inPre = false;
  }
  if (isVPreBoundary) {
    context.inVPre = false;
  }
  return element;
}
function parseTag(context, type, parent) {
  const start = getCursor(context);
  const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
  const tag = match[1];
  const ns = context.options.getNamespace(tag, parent);
  advanceBy(context, match[0].length);
  advanceSpaces(context);
  const cursor = getCursor(context);
  const currentSource = context.source;
  if (context.options.isPreTag(tag)) {
    context.inPre = true;
  }
  let props = parseAttributes(context, type);
  if (type === 0 && !context.inVPre && props.some((p) => p.type === 7 && p.name === "pre")) {
    context.inVPre = true;
    extend(context, cursor);
    context.source = currentSource;
    props = parseAttributes(context, type).filter((p) => p.name !== "v-pre");
  }
  let isSelfClosing = false;
  if (context.source.length === 0) {
    emitError(context, 9);
  } else {
    isSelfClosing = startsWith(context.source, "/>");
    if (type === 1 && isSelfClosing) {
      emitError(context, 4);
    }
    advanceBy(context, isSelfClosing ? 2 : 1);
  }
  if (type === 1) {
    return;
  }
  if (isCompatEnabled(
    "COMPILER_V_IF_V_FOR_PRECEDENCE",
    context
  )) {
    let hasIf = false;
    let hasFor = false;
    for (let i = 0; i < props.length; i++) {
      const p = props[i];
      if (p.type === 7) {
        if (p.name === "if") {
          hasIf = true;
        } else if (p.name === "for") {
          hasFor = true;
        }
      }
      if (hasIf && hasFor) {
        warnDeprecation(
          "COMPILER_V_IF_V_FOR_PRECEDENCE",
          context,
          getSelection(context, start)
        );
        break;
      }
    }
  }
  let tagType = 0;
  if (!context.inVPre) {
    if (tag === "slot") {
      tagType = 2;
    } else if (tag === "template") {
      if (props.some(
        (p) => p.type === 7 && isSpecialTemplateDirective(p.name)
      )) {
        tagType = 3;
      }
    } else if (isComponent(tag, props, context)) {
      tagType = 1;
    }
  }
  return {
    type: 1,
    ns,
    tag,
    tagType,
    props,
    isSelfClosing,
    children: [],
    loc: getSelection(context, start),
    codegenNode: void 0
    // to be created during transform phase
  };
}
function isComponent(tag, props, context) {
  const options = context.options;
  if (options.isCustomElement(tag)) {
    return false;
  }
  if (tag === "component" || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) {
    return true;
  }
  for (let i = 0; i < props.length; i++) {
    const p = props[i];
    if (p.type === 6) {
      if (p.name === "is" && p.value) {
        if (p.value.content.startsWith("vue:")) {
          return true;
        } else if (checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          context,
          p.loc
        )) {
          return true;
        }
      }
    } else {
      if (p.name === "is") {
        return true;
      } else if (
        // :is on plain element - only treat as component in compat mode
        p.name === "bind" && isStaticArgOf(p.arg, "is") && true && checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          context,
          p.loc
        )
      ) {
        return true;
      }
    }
  }
}
function parseAttributes(context, type) {
  const props = [];
  const attributeNames = /* @__PURE__ */ new Set();
  while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
    if (startsWith(context.source, "/")) {
      emitError(context, 22);
      advanceBy(context, 1);
      advanceSpaces(context);
      continue;
    }
    if (type === 1) {
      emitError(context, 3);
    }
    const attr = parseAttribute(context, attributeNames);
    if (attr.type === 6 && attr.value && attr.name === "class") {
      attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
    }
    if (type === 0) {
      props.push(attr);
    }
    if (/^[^\t\r\n\f />]/.test(context.source)) {
      emitError(context, 15);
    }
    advanceSpaces(context);
  }
  return props;
}
function parseAttribute(context, nameSet) {
  var _a;
  const start = getCursor(context);
  const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
  const name = match[0];
  if (nameSet.has(name)) {
    emitError(context, 2);
  }
  nameSet.add(name);
  if (name[0] === "=") {
    emitError(context, 19);
  }
  {
    const pattern = /["'<]/g;
    let m;
    while (m = pattern.exec(name)) {
      emitError(
        context,
        17,
        m.index
      );
    }
  }
  advanceBy(context, name.length);
  let value = void 0;
  if (/^[\t\r\n\f ]*=/.test(context.source)) {
    advanceSpaces(context);
    advanceBy(context, 1);
    advanceSpaces(context);
    value = parseAttributeValue(context);
    if (!value) {
      emitError(context, 13);
    }
  }
  const loc = getSelection(context, start);
  if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
    const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(
      name
    );
    let isPropShorthand = startsWith(name, ".");
    let dirName = match2[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
    let arg;
    if (match2[2]) {
      const isSlot = dirName === "slot";
      const startOffset = name.lastIndexOf(
        match2[2],
        name.length - (((_a = match2[3]) == null ? void 0 : _a.length) || 0)
      );
      const loc2 = getSelection(
        context,
        getNewPosition(context, start, startOffset),
        getNewPosition(
          context,
          start,
          startOffset + match2[2].length + (isSlot && match2[3] || "").length
        )
      );
      let content = match2[2];
      let isStatic = true;
      if (content.startsWith("[")) {
        isStatic = false;
        if (!content.endsWith("]")) {
          emitError(
            context,
            27
          );
          content = content.slice(1);
        } else {
          content = content.slice(1, content.length - 1);
        }
      } else if (isSlot) {
        content += match2[3] || "";
      }
      arg = {
        type: 4,
        content,
        isStatic,
        constType: isStatic ? 3 : 0,
        loc: loc2
      };
    }
    if (value && value.isQuoted) {
      const valueLoc = value.loc;
      valueLoc.start.offset++;
      valueLoc.start.column++;
      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
      valueLoc.source = valueLoc.source.slice(1, -1);
    }
    const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
    if (isPropShorthand)
      modifiers.push("prop");
    if (dirName === "bind" && arg) {
      if (modifiers.includes("sync") && checkCompatEnabled(
        "COMPILER_V_BIND_SYNC",
        context,
        loc,
        arg.loc.source
      )) {
        dirName = "model";
        modifiers.splice(modifiers.indexOf("sync"), 1);
      }
      if (modifiers.includes("prop")) {
        checkCompatEnabled(
          "COMPILER_V_BIND_PROP",
          context,
          loc
        );
      }
    }
    return {
      type: 7,
      name: dirName,
      exp: value && {
        type: 4,
        content: value.content,
        isStatic: false,
        // Treat as non-constant by default. This can be potentially set to
        // other values by `transformExpression` to make it eligible for hoisting.
        constType: 0,
        loc: value.loc
      },
      arg,
      modifiers,
      loc
    };
  }
  if (!context.inVPre && startsWith(name, "v-")) {
    emitError(context, 26);
  }
  return {
    type: 6,
    name,
    value: value && {
      type: 2,
      content: value.content,
      loc: value.loc
    },
    loc
  };
}
function parseAttributeValue(context) {
  const start = getCursor(context);
  let content;
  const quote = context.source[0];
  const isQuoted = quote === `"` || quote === `'`;
  if (isQuoted) {
    advanceBy(context, 1);
    const endIndex = context.source.indexOf(quote);
    if (endIndex === -1) {
      content = parseTextData(
        context,
        context.source.length,
        4
      );
    } else {
      content = parseTextData(context, endIndex, 4);
      advanceBy(context, 1);
    }
  } else {
    const match = /^[^\t\r\n\f >]+/.exec(context.source);
    if (!match) {
      return void 0;
    }
    const unexpectedChars = /["'<=`]/g;
    let m;
    while (m = unexpectedChars.exec(match[0])) {
      emitError(
        context,
        18,
        m.index
      );
    }
    content = parseTextData(context, match[0].length, 4);
  }
  return { content, isQuoted, loc: getSelection(context, start) };
}
function parseInterpolation(context, mode) {
  const [open, close] = context.options.delimiters;
  const closeIndex = context.source.indexOf(close, open.length);
  if (closeIndex === -1) {
    emitError(context, 25);
    return void 0;
  }
  const start = getCursor(context);
  advanceBy(context, open.length);
  const innerStart = getCursor(context);
  const innerEnd = getCursor(context);
  const rawContentLength = closeIndex - open.length;
  const rawContent = context.source.slice(0, rawContentLength);
  const preTrimContent = parseTextData(context, rawContentLength, mode);
  const content = preTrimContent.trim();
  const startOffset = preTrimContent.indexOf(content);
  if (startOffset > 0) {
    advancePositionWithMutation(innerStart, rawContent, startOffset);
  }
  const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
  advancePositionWithMutation(innerEnd, rawContent, endOffset);
  advanceBy(context, close.length);
  return {
    type: 5,
    content: {
      type: 4,
      isStatic: false,
      // Set `isConstant` to false by default and will decide in transformExpression
      constType: 0,
      content,
      loc: getSelection(context, innerStart, innerEnd)
    },
    loc: getSelection(context, start)
  };
}
function parseText(context, mode) {
  const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
  let endIndex = context.source.length;
  for (let i = 0; i < endTokens.length; i++) {
    const index = context.source.indexOf(endTokens[i], 1);
    if (index !== -1 && endIndex > index) {
      endIndex = index;
    }
  }
  const start = getCursor(context);
  const content = parseTextData(context, endIndex, mode);
  return {
    type: 2,
    content,
    loc: getSelection(context, start)
  };
}
function parseTextData(context, length, mode) {
  const rawText = context.source.slice(0, length);
  advanceBy(context, length);
  if (mode === 2 || mode === 3 || !rawText.includes("&")) {
    return rawText;
  } else {
    return context.options.decodeEntities(
      rawText,
      mode === 4
    );
  }
}
function getCursor(context) {
  const { column, line, offset } = context;
  return { column, line, offset };
}
function getSelection(context, start, end) {
  end = end || getCursor(context);
  return {
    start,
    end,
    source: context.originalSource.slice(start.offset, end.offset)
  };
}
function last(xs) {
  return xs[xs.length - 1];
}
function startsWith(source, searchString) {
  return source.startsWith(searchString);
}
function advanceBy(context, numberOfCharacters) {
  const { source } = context;
  advancePositionWithMutation(context, source, numberOfCharacters);
  context.source = source.slice(numberOfCharacters);
}
function advanceSpaces(context) {
  const match = /^[\t\r\n\f ]+/.exec(context.source);
  if (match) {
    advanceBy(context, match[0].length);
  }
}
function getNewPosition(context, start, numberOfCharacters) {
  return advancePositionWithClone(
    start,
    context.originalSource.slice(start.offset, numberOfCharacters),
    numberOfCharacters
  );
}
function emitError(context, code, offset, loc = getCursor(context)) {
  if (offset) {
    loc.offset += offset;
    loc.column += offset;
  }
  context.options.onError(
    createCompilerError(code, {
      start: loc,
      end: loc,
      source: ""
    })
  );
}
function isEnd(context, mode, ancestors) {
  const s = context.source;
  switch (mode) {
    case 0:
      if (startsWith(s, "</")) {
        for (let i = ancestors.length - 1; i >= 0; --i) {
          if (startsWithEndTagOpen(s, ancestors[i].tag)) {
            return true;
          }
        }
      }
      break;
    case 1:
    case 2: {
      const parent = last(ancestors);
      if (parent && startsWithEndTagOpen(s, parent.tag)) {
        return true;
      }
      break;
    }
    case 3:
      if (startsWith(s, "]]>")) {
        return true;
      }
      break;
  }
  return !s;
}
function startsWithEndTagOpen(source, tag) {
  return startsWith(source, "</") && source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || ">");
}
function hoistStatic(root, context) {
  walk(
    root,
    context,
    // Root node is unfortunately non-hoistable due to potential parent
    // fallthrough attributes.
    isSingleElementRoot(root, root.children[0])
  );
}
function isSingleElementRoot(root, child) {
  const { children } = root;
  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
}
function walk(node, context, doNotHoistNode = false) {
  const { children } = node;
  const originalCount = children.length;
  let hoistedCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === 1 && child.tagType === 0) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
      if (constantType > 0) {
        if (constantType >= 2) {
          child.codegenNode.patchFlag = -1 + (true ? ` /* HOISTED */` : ``);
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
          continue;
        }
      } else {
        const codegenNode = child.codegenNode;
        if (codegenNode.type === 13) {
          const flag = getPatchFlag(codegenNode);
          if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
            const props = getNodeProps(child);
            if (props) {
              codegenNode.props = context.hoist(props);
            }
          }
          if (codegenNode.dynamicProps) {
            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
          }
        }
      }
    }
    if (child.type === 1) {
      const isComponent2 = child.tagType === 1;
      if (isComponent2) {
        context.scopes.vSlot++;
      }
      walk(child, context);
      if (isComponent2) {
        context.scopes.vSlot--;
      }
    } else if (child.type === 11) {
      walk(child, context, child.children.length === 1);
    } else if (child.type === 9) {
      for (let i2 = 0; i2 < child.branches.length; i2++) {
        walk(
          child.branches[i2],
          context,
          child.branches[i2].children.length === 1
        );
      }
    }
  }
  if (hoistedCount && context.transformHoist) {
    context.transformHoist(children, context, node);
  }
  if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && isArray(node.codegenNode.children)) {
    node.codegenNode.children = context.hoist(
      createArrayExpression(node.codegenNode.children)
    );
  }
}
function getConstantType(node, context) {
  const { constantCache } = context;
  switch (node.type) {
    case 1:
      if (node.tagType !== 0) {
        return 0;
      }
      const cached = constantCache.get(node);
      if (cached !== void 0) {
        return cached;
      }
      const codegenNode = node.codegenNode;
      if (codegenNode.type !== 13) {
        return 0;
      }
      if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject") {
        return 0;
      }
      const flag = getPatchFlag(codegenNode);
      if (!flag) {
        let returnType2 = 3;
        const generatedPropsType = getGeneratedPropsConstantType(node, context);
        if (generatedPropsType === 0) {
          constantCache.set(node, 0);
          return 0;
        }
        if (generatedPropsType < returnType2) {
          returnType2 = generatedPropsType;
        }
        for (let i = 0; i < node.children.length; i++) {
          const childType = getConstantType(node.children[i], context);
          if (childType === 0) {
            constantCache.set(node, 0);
            return 0;
          }
          if (childType < returnType2) {
            returnType2 = childType;
          }
        }
        if (returnType2 > 1) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 7 && p.name === "bind" && p.exp) {
              const expType = getConstantType(p.exp, context);
              if (expType === 0) {
                constantCache.set(node, 0);
                return 0;
              }
              if (expType < returnType2) {
                returnType2 = expType;
              }
            }
          }
        }
        if (codegenNode.isBlock) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 7) {
              constantCache.set(node, 0);
              return 0;
            }
          }
          context.removeHelper(OPEN_BLOCK);
          context.removeHelper(
            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
          );
          codegenNode.isBlock = false;
          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
        }
        constantCache.set(node, returnType2);
        return returnType2;
      } else {
        constantCache.set(node, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return getConstantType(node.content, context);
    case 4:
      return node.constType;
    case 8:
      let returnType = 3;
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        if (isString(child) || isSymbol(child)) {
          continue;
        }
        const childType = getConstantType(child, context);
        if (childType === 0) {
          return 0;
        } else if (childType < returnType) {
          returnType = childType;
        }
      }
      return returnType;
    default:
      if (true)
        ;
      return 0;
  }
}
function getConstantTypeOfHelperCall(value, context) {
  if (value.type === 14 && !isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
    const arg = value.arguments[0];
    if (arg.type === 4) {
      return getConstantType(arg, context);
    } else if (arg.type === 14) {
      return getConstantTypeOfHelperCall(arg, context);
    }
  }
  return 0;
}
function getGeneratedPropsConstantType(node, context) {
  let returnType = 3;
  const props = getNodeProps(node);
  if (props && props.type === 15) {
    const { properties } = props;
    for (let i = 0; i < properties.length; i++) {
      const { key, value } = properties[i];
      const keyType = getConstantType(key, context);
      if (keyType === 0) {
        return keyType;
      }
      if (keyType < returnType) {
        returnType = keyType;
      }
      let valueType;
      if (value.type === 4) {
        valueType = getConstantType(value, context);
      } else if (value.type === 14) {
        valueType = getConstantTypeOfHelperCall(value, context);
      } else {
        valueType = 0;
      }
      if (valueType === 0) {
        return valueType;
      }
      if (valueType < returnType) {
        returnType = valueType;
      }
    }
  }
  return returnType;
}
function getNodeProps(node) {
  const codegenNode = node.codegenNode;
  if (codegenNode.type === 13) {
    return codegenNode.props;
  }
}
function getPatchFlag(node) {
  const flag = node.patchFlag;
  return flag ? parseInt(flag, 10) : void 0;
}
function createTransformContext(root, {
  filename = "",
  prefixIdentifiers = false,
  hoistStatic: hoistStatic2 = false,
  cacheHandlers = false,
  nodeTransforms = [],
  directiveTransforms = {},
  transformHoist = null,
  isBuiltInComponent = NOOP,
  isCustomElement = NOOP,
  expressionPlugins = [],
  scopeId = null,
  slotted = true,
  ssr = false,
  inSSR = false,
  ssrCssVars = ``,
  bindingMetadata = EMPTY_OBJ,
  inline = false,
  isTS = false,
  onError = defaultOnError,
  onWarn = defaultOnWarn,
  compatConfig
}) {
  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
  const context = {
    // options
    selfName: nameMatch && capitalize(camelize(nameMatch[1])),
    prefixIdentifiers,
    hoistStatic: hoistStatic2,
    cacheHandlers,
    nodeTransforms,
    directiveTransforms,
    transformHoist,
    isBuiltInComponent,
    isCustomElement,
    expressionPlugins,
    scopeId,
    slotted,
    ssr,
    inSSR,
    ssrCssVars,
    bindingMetadata,
    inline,
    isTS,
    onError,
    onWarn,
    compatConfig,
    // state
    root,
    helpers: /* @__PURE__ */ new Map(),
    components: /* @__PURE__ */ new Set(),
    directives: /* @__PURE__ */ new Set(),
    hoists: [],
    imports: [],
    constantCache: /* @__PURE__ */ new Map(),
    temps: 0,
    cached: 0,
    identifiers: /* @__PURE__ */ Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0
    },
    parent: null,
    currentNode: root,
    childIndex: 0,
    inVOnce: false,
    // methods
    helper(name) {
      const count = context.helpers.get(name) || 0;
      context.helpers.set(name, count + 1);
      return name;
    },
    removeHelper(name) {
      const count = context.helpers.get(name);
      if (count) {
        const currentCount = count - 1;
        if (!currentCount) {
          context.helpers.delete(name);
        } else {
          context.helpers.set(name, currentCount);
        }
      }
    },
    helperString(name) {
      return `_${helperNameMap[context.helper(name)]}`;
    },
    replaceNode(node) {
      if (true) {
        if (!context.currentNode) {
          throw new Error(`Node being replaced is already removed.`);
        }
        if (!context.parent) {
          throw new Error(`Cannot replace root node.`);
        }
      }
      context.parent.children[context.childIndex] = context.currentNode = node;
    },
    removeNode(node) {
      if (!context.parent) {
        throw new Error(`Cannot remove root node.`);
      }
      const list = context.parent.children;
      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
      if (removalIndex < 0) {
        throw new Error(`node being removed is not a child of current parent`);
      }
      if (!node || node === context.currentNode) {
        context.currentNode = null;
        context.onNodeRemoved();
      } else {
        if (context.childIndex > removalIndex) {
          context.childIndex--;
          context.onNodeRemoved();
        }
      }
      context.parent.children.splice(removalIndex, 1);
    },
    onNodeRemoved: () => {
    },
    addIdentifiers(exp) {
    },
    removeIdentifiers(exp) {
    },
    hoist(exp) {
      if (isString(exp))
        exp = createSimpleExpression(exp);
      context.hoists.push(exp);
      const identifier = createSimpleExpression(
        `_hoisted_${context.hoists.length}`,
        false,
        exp.loc,
        2
      );
      identifier.hoisted = exp;
      return identifier;
    },
    cache(exp, isVNode = false) {
      return createCacheExpression(context.cached++, exp, isVNode);
    }
  };
  {
    context.filters = /* @__PURE__ */ new Set();
  }
  return context;
}
function transform(root, options) {
  const context = createTransformContext(root, options);
  traverseNode(root, context);
  if (options.hoistStatic) {
    hoistStatic(root, context);
  }
  if (!options.ssr) {
    createRootCodegen(root, context);
  }
  root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);
  root.components = [...context.components];
  root.directives = [...context.directives];
  root.imports = context.imports;
  root.hoists = context.hoists;
  root.temps = context.temps;
  root.cached = context.cached;
  {
    root.filters = [...context.filters];
  }
}
function createRootCodegen(root, context) {
  const { helper } = context;
  const { children } = root;
  if (children.length === 1) {
    const child = children[0];
    if (isSingleElementRoot(root, child) && child.codegenNode) {
      const codegenNode = child.codegenNode;
      if (codegenNode.type === 13) {
        convertToBlock(codegenNode, context);
      }
      root.codegenNode = codegenNode;
    } else {
      root.codegenNode = child;
    }
  } else if (children.length > 1) {
    let patchFlag = 64;
    let patchFlagText = PatchFlagNames[64];
    if (children.filter((c) => c.type !== 3).length === 1) {
      patchFlag |= 2048;
      patchFlagText += `, ${PatchFlagNames[2048]}`;
    }
    root.codegenNode = createVNodeCall(
      context,
      helper(FRAGMENT),
      void 0,
      root.children,
      patchFlag + (true ? ` /* ${patchFlagText} */` : ``),
      void 0,
      void 0,
      true,
      void 0,
      false
      /* isComponent */
    );
  } else
    ;
}
function traverseChildren(parent, context) {
  let i = 0;
  const nodeRemoved = () => {
    i--;
  };
  for (; i < parent.children.length; i++) {
    const child = parent.children[i];
    if (isString(child))
      continue;
    context.parent = parent;
    context.childIndex = i;
    context.onNodeRemoved = nodeRemoved;
    traverseNode(child, context);
  }
}
function traverseNode(node, context) {
  context.currentNode = node;
  const { nodeTransforms } = context;
  const exitFns = [];
  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
    const onExit = nodeTransforms[i2](node, context);
    if (onExit) {
      if (isArray(onExit)) {
        exitFns.push(...onExit);
      } else {
        exitFns.push(onExit);
      }
    }
    if (!context.currentNode) {
      return;
    } else {
      node = context.currentNode;
    }
  }
  switch (node.type) {
    case 3:
      if (!context.ssr) {
        context.helper(CREATE_COMMENT);
      }
      break;
    case 5:
      if (!context.ssr) {
        context.helper(TO_DISPLAY_STRING);
      }
      break;
    case 9:
      for (let i2 = 0; i2 < node.branches.length; i2++) {
        traverseNode(node.branches[i2], context);
      }
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      traverseChildren(node, context);
      break;
  }
  context.currentNode = node;
  let i = exitFns.length;
  while (i--) {
    exitFns[i]();
  }
}
function createStructuralDirectiveTransform(name, fn) {
  const matches = isString(name) ? (n) => n === name : (n) => name.test(n);
  return (node, context) => {
    if (node.type === 1) {
      const { props } = node;
      if (node.tagType === 3 && props.some(isVSlot)) {
        return;
      }
      const exitFns = [];
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 7 && matches(prop.name)) {
          props.splice(i, 1);
          i--;
          const onExit = fn(node, prop, context);
          if (onExit)
            exitFns.push(onExit);
        }
      }
      return exitFns;
    }
  };
}
function createCodegenContext(ast, {
  mode = "function",
  prefixIdentifiers = mode === "module",
  sourceMap = false,
  filename = `template.vue.html`,
  scopeId = null,
  optimizeImports = false,
  runtimeGlobalName = `Vue`,
  runtimeModuleName = `vue`,
  ssrRuntimeModuleName = "vue/server-renderer",
  ssr = false,
  isTS = false,
  inSSR = false
}) {
  const context = {
    mode,
    prefixIdentifiers,
    sourceMap,
    filename,
    scopeId,
    optimizeImports,
    runtimeGlobalName,
    runtimeModuleName,
    ssrRuntimeModuleName,
    ssr,
    isTS,
    inSSR,
    source: ast.loc.source,
    code: ``,
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(key) {
      return `_${helperNameMap[key]}`;
    },
    push(code, node) {
      context.code += code;
    },
    indent() {
      newline(++context.indentLevel);
    },
    deindent(withoutNewLine = false) {
      if (withoutNewLine) {
        --context.indentLevel;
      } else {
        newline(--context.indentLevel);
      }
    },
    newline() {
      newline(context.indentLevel);
    }
  };
  function newline(n) {
    context.push("\n" + `  `.repeat(n));
  }
  return context;
}
function generate(ast, options = {}) {
  const context = createCodegenContext(ast, options);
  if (options.onContextCreated)
    options.onContextCreated(context);
  const {
    mode,
    push,
    prefixIdentifiers,
    indent,
    deindent,
    newline,
    scopeId,
    ssr
  } = context;
  const helpers = Array.from(ast.helpers);
  const hasHelpers = helpers.length > 0;
  const useWithBlock = !prefixIdentifiers && mode !== "module";
  const isSetupInlined = false;
  const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
  {
    genFunctionPreamble(ast, preambleContext);
  }
  const functionName = ssr ? `ssrRender` : `render`;
  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
  const signature = args.join(", ");
  {
    push(`function ${functionName}(${signature}) {`);
  }
  indent();
  if (useWithBlock) {
    push(`with (_ctx) {`);
    indent();
    if (hasHelpers) {
      push(`const { ${helpers.map(aliasHelper).join(", ")} } = _Vue`);
      push(`
`);
      newline();
    }
  }
  if (ast.components.length) {
    genAssets(ast.components, "component", context);
    if (ast.directives.length || ast.temps > 0) {
      newline();
    }
  }
  if (ast.directives.length) {
    genAssets(ast.directives, "directive", context);
    if (ast.temps > 0) {
      newline();
    }
  }
  if (ast.filters && ast.filters.length) {
    newline();
    genAssets(ast.filters, "filter", context);
    newline();
  }
  if (ast.temps > 0) {
    push(`let `);
    for (let i = 0; i < ast.temps; i++) {
      push(`${i > 0 ? `, ` : ``}_temp${i}`);
    }
  }
  if (ast.components.length || ast.directives.length || ast.temps) {
    push(`
`);
    newline();
  }
  if (!ssr) {
    push(`return `);
  }
  if (ast.codegenNode) {
    genNode(ast.codegenNode, context);
  } else {
    push(`null`);
  }
  if (useWithBlock) {
    deindent();
    push(`}`);
  }
  deindent();
  push(`}`);
  return {
    ast,
    code: context.code,
    preamble: isSetupInlined ? preambleContext.code : ``,
    // SourceMapGenerator does have toJSON() method but it's not in the types
    map: context.map ? context.map.toJSON() : void 0
  };
}
function genFunctionPreamble(ast, context) {
  const {
    ssr,
    prefixIdentifiers,
    push,
    newline,
    runtimeModuleName,
    runtimeGlobalName,
    ssrRuntimeModuleName
  } = context;
  const VueBinding = runtimeGlobalName;
  const helpers = Array.from(ast.helpers);
  if (helpers.length > 0) {
    {
      push(`const _Vue = ${VueBinding}
`);
      if (ast.hoists.length) {
        const staticHelpers = [
          CREATE_VNODE,
          CREATE_ELEMENT_VNODE,
          CREATE_COMMENT,
          CREATE_TEXT,
          CREATE_STATIC
        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(", ");
        push(`const { ${staticHelpers} } = _Vue
`);
      }
    }
  }
  genHoists(ast.hoists, context);
  newline();
  push(`return `);
}
function genAssets(assets, type, { helper, push, newline, isTS }) {
  const resolver = helper(
    type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE
  );
  for (let i = 0; i < assets.length; i++) {
    let id = assets[i];
    const maybeSelfReference = id.endsWith("__self");
    if (maybeSelfReference) {
      id = id.slice(0, -6);
    }
    push(
      `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
    );
    if (i < assets.length - 1) {
      newline();
    }
  }
}
function genHoists(hoists, context) {
  if (!hoists.length) {
    return;
  }
  context.pure = true;
  const { push, newline, helper, scopeId, mode } = context;
  newline();
  for (let i = 0; i < hoists.length; i++) {
    const exp = hoists[i];
    if (exp) {
      push(
        `const _hoisted_${i + 1} = ${``}`
      );
      genNode(exp, context);
      newline();
    }
  }
  context.pure = false;
}
function isText(n) {
  return isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
}
function genNodeListAsArray(nodes, context) {
  const multilines = nodes.length > 3 || nodes.some((n) => isArray(n) || !isText(n));
  context.push(`[`);
  multilines && context.indent();
  genNodeList(nodes, context, multilines);
  multilines && context.deindent();
  context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
  const { push, newline } = context;
  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (isString(node)) {
      push(node);
    } else if (isArray(node)) {
      genNodeListAsArray(node, context);
    } else {
      genNode(node, context);
    }
    if (i < nodes.length - 1) {
      if (multilines) {
        comma && push(",");
        newline();
      } else {
        comma && push(", ");
      }
    }
  }
}
function genNode(node, context) {
  if (isString(node)) {
    context.push(node);
    return;
  }
  if (isSymbol(node)) {
    context.push(context.helper(node));
    return;
  }
  switch (node.type) {
    case 1:
    case 9:
    case 11:
      assert(
        node.codegenNode != null,
        `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`
      );
      genNode(node.codegenNode, context);
      break;
    case 2:
      genText(node, context);
      break;
    case 4:
      genExpression(node, context);
      break;
    case 5:
      genInterpolation(node, context);
      break;
    case 12:
      genNode(node.codegenNode, context);
      break;
    case 8:
      genCompoundExpression(node, context);
      break;
    case 3:
      genComment(node, context);
      break;
    case 13:
      genVNodeCall(node, context);
      break;
    case 14:
      genCallExpression(node, context);
      break;
    case 15:
      genObjectExpression(node, context);
      break;
    case 17:
      genArrayExpression(node, context);
      break;
    case 18:
      genFunctionExpression(node, context);
      break;
    case 19:
      genConditionalExpression(node, context);
      break;
    case 20:
      genCacheExpression(node, context);
      break;
    case 21:
      genNodeList(node.body, context, true, false);
      break;
    case 22:
      break;
    case 23:
      break;
    case 24:
      break;
    case 25:
      break;
    case 26:
      break;
    case 10:
      break;
    default:
      if (true) {
        assert(false, `unhandled codegen node type: ${node.type}`);
        const exhaustiveCheck = node;
        return exhaustiveCheck;
      }
  }
}
function genText(node, context) {
  context.push(JSON.stringify(node.content), node);
}
function genExpression(node, context) {
  const { content, isStatic } = node;
  context.push(isStatic ? JSON.stringify(content) : content, node);
}
function genInterpolation(node, context) {
  const { push, helper, pure } = context;
  if (pure)
    push(PURE_ANNOTATION);
  push(`${helper(TO_DISPLAY_STRING)}(`);
  genNode(node.content, context);
  push(`)`);
}
function genCompoundExpression(node, context) {
  for (let i = 0; i < node.children.length; i++) {
    const child = node.children[i];
    if (isString(child)) {
      context.push(child);
    } else {
      genNode(child, context);
    }
  }
}
function genExpressionAsPropertyKey(node, context) {
  const { push } = context;
  if (node.type === 8) {
    push(`[`);
    genCompoundExpression(node, context);
    push(`]`);
  } else if (node.isStatic) {
    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
    push(text, node);
  } else {
    push(`[${node.content}]`, node);
  }
}
function genComment(node, context) {
  const { push, helper, pure } = context;
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
}
function genVNodeCall(node, context) {
  const { push, helper, pure } = context;
  const {
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2
  } = node;
  if (directives) {
    push(helper(WITH_DIRECTIVES) + `(`);
  }
  if (isBlock) {
    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
  }
  if (pure) {
    push(PURE_ANNOTATION);
  }
  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
  push(helper(callHelper) + `(`, node);
  genNodeList(
    genNullableArgs([tag, props, children, patchFlag, dynamicProps]),
    context
  );
  push(`)`);
  if (isBlock) {
    push(`)`);
  }
  if (directives) {
    push(`, `);
    genNode(directives, context);
    push(`)`);
  }
}
function genNullableArgs(args) {
  let i = args.length;
  while (i--) {
    if (args[i] != null)
      break;
  }
  return args.slice(0, i + 1).map((arg) => arg || `null`);
}
function genCallExpression(node, context) {
  const { push, helper, pure } = context;
  const callee = isString(node.callee) ? node.callee : helper(node.callee);
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(callee + `(`, node);
  genNodeList(node.arguments, context);
  push(`)`);
}
function genObjectExpression(node, context) {
  const { push, indent, deindent, newline } = context;
  const { properties } = node;
  if (!properties.length) {
    push(`{}`, node);
    return;
  }
  const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
  push(multilines ? `{` : `{ `);
  multilines && indent();
  for (let i = 0; i < properties.length; i++) {
    const { key, value } = properties[i];
    genExpressionAsPropertyKey(key, context);
    push(`: `);
    genNode(value, context);
    if (i < properties.length - 1) {
      push(`,`);
      newline();
    }
  }
  multilines && deindent();
  push(multilines ? `}` : ` }`);
}
function genArrayExpression(node, context) {
  genNodeListAsArray(node.elements, context);
}
function genFunctionExpression(node, context) {
  const { push, indent, deindent } = context;
  const { params, returns, body, newline, isSlot } = node;
  if (isSlot) {
    push(`_${helperNameMap[WITH_CTX]}(`);
  }
  push(`(`, node);
  if (isArray(params)) {
    genNodeList(params, context);
  } else if (params) {
    genNode(params, context);
  }
  push(`) => `);
  if (newline || body) {
    push(`{`);
    indent();
  }
  if (returns) {
    if (newline) {
      push(`return `);
    }
    if (isArray(returns)) {
      genNodeListAsArray(returns, context);
    } else {
      genNode(returns, context);
    }
  } else if (body) {
    genNode(body, context);
  }
  if (newline || body) {
    deindent();
    push(`}`);
  }
  if (isSlot) {
    if (node.isNonScopedSlot) {
      push(`, undefined, true`);
    }
    push(`)`);
  }
}
function genConditionalExpression(node, context) {
  const { test, consequent, alternate, newline: needNewline } = node;
  const { push, indent, deindent, newline } = context;
  if (test.type === 4) {
    const needsParens = !isSimpleIdentifier(test.content);
    needsParens && push(`(`);
    genExpression(test, context);
    needsParens && push(`)`);
  } else {
    push(`(`);
    genNode(test, context);
    push(`)`);
  }
  needNewline && indent();
  context.indentLevel++;
  needNewline || push(` `);
  push(`? `);
  genNode(consequent, context);
  context.indentLevel--;
  needNewline && newline();
  needNewline || push(` `);
  push(`: `);
  const isNested = alternate.type === 19;
  if (!isNested) {
    context.indentLevel++;
  }
  genNode(alternate, context);
  if (!isNested) {
    context.indentLevel--;
  }
  needNewline && deindent(
    true
    /* without newline */
  );
}
function genCacheExpression(node, context) {
  const { push, helper, indent, deindent, newline } = context;
  push(`_cache[${node.index}] || (`);
  if (node.isVNode) {
    indent();
    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
    newline();
  }
  push(`_cache[${node.index}] = `);
  genNode(node.value, context);
  if (node.isVNode) {
    push(`,`);
    newline();
    push(`${helper(SET_BLOCK_TRACKING)}(1),`);
    newline();
    push(`_cache[${node.index}]`);
    deindent();
  }
  push(`)`);
}
function walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {
  {
    return;
  }
}
function isReferencedIdentifier(id, parent, parentStack) {
  {
    return false;
  }
}
function isInDestructureAssignment(parent, parentStack) {
  if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
    let i = parentStack.length;
    while (i--) {
      const p = parentStack[i];
      if (p.type === "AssignmentExpression") {
        return true;
      } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
        break;
      }
    }
  }
  return false;
}
function walkFunctionParams(node, onIdent) {
  for (const p of node.params) {
    for (const id of extractIdentifiers(p)) {
      onIdent(id);
    }
  }
}
function walkBlockDeclarations(block, onIdent) {
  for (const stmt of block.body) {
    if (stmt.type === "VariableDeclaration") {
      if (stmt.declare)
        continue;
      for (const decl of stmt.declarations) {
        for (const id of extractIdentifiers(decl.id)) {
          onIdent(id);
        }
      }
    } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
      if (stmt.declare || !stmt.id)
        continue;
      onIdent(stmt.id);
    }
  }
}
function extractIdentifiers(param, nodes = []) {
  switch (param.type) {
    case "Identifier":
      nodes.push(param);
      break;
    case "MemberExpression":
      let object = param;
      while (object.type === "MemberExpression") {
        object = object.object;
      }
      nodes.push(object);
      break;
    case "ObjectPattern":
      for (const prop of param.properties) {
        if (prop.type === "RestElement") {
          extractIdentifiers(prop.argument, nodes);
        } else {
          extractIdentifiers(prop.value, nodes);
        }
      }
      break;
    case "ArrayPattern":
      param.elements.forEach((element) => {
        if (element)
          extractIdentifiers(element, nodes);
      });
      break;
    case "RestElement":
      extractIdentifiers(param.argument, nodes);
      break;
    case "AssignmentPattern":
      extractIdentifiers(param.left, nodes);
      break;
  }
  return nodes;
}
function validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {
  const exp = node.content;
  if (!exp.trim()) {
    return;
  }
  try {
    new Function(
      asRawStatements ? ` ${exp} ` : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`
    );
  } catch (e) {
    let message = e.message;
    const keywordMatch = exp.replace(stripStringRE, "").match(prohibitedKeywordRE);
    if (keywordMatch) {
      message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;
    }
    context.onError(
      createCompilerError(
        45,
        node.loc,
        void 0,
        message
      )
    );
  }
}
function processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
  {
    if (true) {
      validateBrowserExpression(node, context, asParams, asRawStatements);
    }
    return node;
  }
}
function stringifyExpression(exp) {
  if (isString(exp)) {
    return exp;
  } else if (exp.type === 4) {
    return exp.content;
  } else {
    return exp.children.map(stringifyExpression).join("");
  }
}
function processIf(node, dir, context, processCodegen) {
  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
    const loc = dir.exp ? dir.exp.loc : node.loc;
    context.onError(
      createCompilerError(28, dir.loc)
    );
    dir.exp = createSimpleExpression(`true`, false, loc);
  }
  if (dir.exp) {
    validateBrowserExpression(dir.exp, context);
  }
  if (dir.name === "if") {
    const branch = createIfBranch(node, dir);
    const ifNode = {
      type: 9,
      loc: node.loc,
      branches: [branch]
    };
    context.replaceNode(ifNode);
    if (processCodegen) {
      return processCodegen(ifNode, branch, true);
    }
  } else {
    const siblings = context.parent.children;
    const comments = [];
    let i = siblings.indexOf(node);
    while (i-- >= -1) {
      const sibling = siblings[i];
      if (sibling && sibling.type === 3) {
        context.removeNode(sibling);
        comments.unshift(sibling);
        continue;
      }
      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 9) {
        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
          context.onError(
            createCompilerError(30, node.loc)
          );
        }
        context.removeNode();
        const branch = createIfBranch(node, dir);
        if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>
        !(context.parent && context.parent.type === 1 && isBuiltInType(context.parent.tag, "transition"))) {
          branch.children = [...comments, ...branch.children];
        }
        if (true) {
          const key = branch.userKey;
          if (key) {
            sibling.branches.forEach(({ userKey }) => {
              if (isSameKey(userKey, key)) {
                context.onError(
                  createCompilerError(
                    29,
                    branch.userKey.loc
                  )
                );
              }
            });
          }
        }
        sibling.branches.push(branch);
        const onExit = processCodegen && processCodegen(sibling, branch, false);
        traverseNode(branch, context);
        if (onExit)
          onExit();
        context.currentNode = null;
      } else {
        context.onError(
          createCompilerError(30, node.loc)
        );
      }
      break;
    }
  }
}
function createIfBranch(node, dir) {
  const isTemplateIf = node.tagType === 3;
  return {
    type: 10,
    loc: node.loc,
    condition: dir.name === "else" ? void 0 : dir.exp,
    children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
    userKey: findProp(node, `key`),
    isTemplateIf
  };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
  if (branch.condition) {
    return createConditionalExpression(
      branch.condition,
      createChildrenCodegenNode(branch, keyIndex, context),
      // make sure to pass in asBlock: true so that the comment node call
      // closes the current block.
      createCallExpression(context.helper(CREATE_COMMENT), [
        true ? '"v-if"' : '""',
        "true"
      ])
    );
  } else {
    return createChildrenCodegenNode(branch, keyIndex, context);
  }
}
function createChildrenCodegenNode(branch, keyIndex, context) {
  const { helper } = context;
  const keyProperty = createObjectProperty(
    `key`,
    createSimpleExpression(
      `${keyIndex}`,
      false,
      locStub,
      2
    )
  );
  const { children } = branch;
  const firstChild = children[0];
  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
  if (needFragmentWrapper) {
    if (children.length === 1 && firstChild.type === 11) {
      const vnodeCall = firstChild.codegenNode;
      injectProp(vnodeCall, keyProperty, context);
      return vnodeCall;
    } else {
      let patchFlag = 64;
      let patchFlagText = PatchFlagNames[64];
      if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {
        patchFlag |= 2048;
        patchFlagText += `, ${PatchFlagNames[2048]}`;
      }
      return createVNodeCall(
        context,
        helper(FRAGMENT),
        createObjectExpression([keyProperty]),
        children,
        patchFlag + (true ? ` /* ${patchFlagText} */` : ``),
        void 0,
        void 0,
        true,
        false,
        false,
        branch.loc
      );
    }
  } else {
    const ret = firstChild.codegenNode;
    const vnodeCall = getMemoedVNodeCall(ret);
    if (vnodeCall.type === 13) {
      convertToBlock(vnodeCall, context);
    }
    injectProp(vnodeCall, keyProperty, context);
    return ret;
  }
}
function isSameKey(a, b) {
  if (!a || a.type !== b.type) {
    return false;
  }
  if (a.type === 6) {
    if (a.value.content !== b.value.content) {
      return false;
    }
  } else {
    const exp = a.exp;
    const branchExp = b.exp;
    if (exp.type !== branchExp.type) {
      return false;
    }
    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
      return false;
    }
  }
  return true;
}
function getParentCondition(node) {
  while (true) {
    if (node.type === 19) {
      if (node.alternate.type === 19) {
        node = node.alternate;
      } else {
        return node;
      }
    } else if (node.type === 20) {
      node = node.value;
    }
  }
}
function processFor(node, dir, context, processCodegen) {
  if (!dir.exp) {
    context.onError(
      createCompilerError(31, dir.loc)
    );
    return;
  }
  const parseResult = parseForExpression(
    // can only be simple expression because vFor transform is applied
    // before expression transform.
    dir.exp,
    context
  );
  if (!parseResult) {
    context.onError(
      createCompilerError(32, dir.loc)
    );
    return;
  }
  const { addIdentifiers, removeIdentifiers, scopes } = context;
  const { source, value, key, index } = parseResult;
  const forNode = {
    type: 11,
    loc: dir.loc,
    source,
    valueAlias: value,
    keyAlias: key,
    objectIndexAlias: index,
    parseResult,
    children: isTemplateNode(node) ? node.children : [node]
  };
  context.replaceNode(forNode);
  scopes.vFor++;
  const onExit = processCodegen && processCodegen(forNode);
  return () => {
    scopes.vFor--;
    if (onExit)
      onExit();
  };
}
function parseForExpression(input, context) {
  const loc = input.loc;
  const exp = input.content;
  const inMatch = exp.match(forAliasRE);
  if (!inMatch)
    return;
  const [, LHS, RHS] = inMatch;
  const result = {
    source: createAliasExpression(
      loc,
      RHS.trim(),
      exp.indexOf(RHS, LHS.length)
    ),
    value: void 0,
    key: void 0,
    index: void 0
  };
  if (true) {
    validateBrowserExpression(result.source, context);
  }
  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
  const trimmedOffset = LHS.indexOf(valueContent);
  const iteratorMatch = valueContent.match(forIteratorRE);
  if (iteratorMatch) {
    valueContent = valueContent.replace(forIteratorRE, "").trim();
    const keyContent = iteratorMatch[1].trim();
    let keyOffset;
    if (keyContent) {
      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
      result.key = createAliasExpression(loc, keyContent, keyOffset);
      if (true) {
        validateBrowserExpression(
          result.key,
          context,
          true
        );
      }
    }
    if (iteratorMatch[2]) {
      const indexContent = iteratorMatch[2].trim();
      if (indexContent) {
        result.index = createAliasExpression(
          loc,
          indexContent,
          exp.indexOf(
            indexContent,
            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length
          )
        );
        if (true) {
          validateBrowserExpression(
            result.index,
            context,
            true
          );
        }
      }
    }
  }
  if (valueContent) {
    result.value = createAliasExpression(loc, valueContent, trimmedOffset);
    if (true) {
      validateBrowserExpression(
        result.value,
        context,
        true
      );
    }
  }
  return result;
}
function createAliasExpression(range, content, offset) {
  return createSimpleExpression(
    content,
    false,
    getInnerRange(range, offset, content.length)
  );
}
function createForLoopParams({ value, key, index }, memoArgs = []) {
  return createParamsList([value, key, index, ...memoArgs]);
}
function createParamsList(args) {
  let i = args.length;
  while (i--) {
    if (args[i])
      break;
  }
  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
}
function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
  context.helper(WITH_CTX);
  const { children, loc } = node;
  const slotsProperties = [];
  const dynamicSlots = [];
  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
  const onComponentSlot = findDir(node, "slot", true);
  if (onComponentSlot) {
    const { arg, exp } = onComponentSlot;
    if (arg && !isStaticExp(arg)) {
      hasDynamicSlots = true;
    }
    slotsProperties.push(
      createObjectProperty(
        arg || createSimpleExpression("default", true),
        buildSlotFn(exp, children, loc)
      )
    );
  }
  let hasTemplateSlots = false;
  let hasNamedDefaultSlot = false;
  const implicitDefaultChildren = [];
  const seenSlotNames = /* @__PURE__ */ new Set();
  let conditionalBranchIndex = 0;
  for (let i = 0; i < children.length; i++) {
    const slotElement = children[i];
    let slotDir;
    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
      if (slotElement.type !== 3) {
        implicitDefaultChildren.push(slotElement);
      }
      continue;
    }
    if (onComponentSlot) {
      context.onError(
        createCompilerError(37, slotDir.loc)
      );
      break;
    }
    hasTemplateSlots = true;
    const { children: slotChildren, loc: slotLoc } = slotElement;
    const {
      arg: slotName = createSimpleExpression(`default`, true),
      exp: slotProps,
      loc: dirLoc
    } = slotDir;
    let staticSlotName;
    if (isStaticExp(slotName)) {
      staticSlotName = slotName ? slotName.content : `default`;
    } else {
      hasDynamicSlots = true;
    }
    const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
    let vIf;
    let vElse;
    let vFor;
    if (vIf = findDir(slotElement, "if")) {
      hasDynamicSlots = true;
      dynamicSlots.push(
        createConditionalExpression(
          vIf.exp,
          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),
          defaultFallback
        )
      );
    } else if (vElse = findDir(
      slotElement,
      /^else(-if)?$/,
      true
      /* allowEmpty */
    )) {
      let j = i;
      let prev;
      while (j--) {
        prev = children[j];
        if (prev.type !== 3) {
          break;
        }
      }
      if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
        children.splice(i, 1);
        i--;
        let conditional = dynamicSlots[dynamicSlots.length - 1];
        while (conditional.alternate.type === 19) {
          conditional = conditional.alternate;
        }
        conditional.alternate = vElse.exp ? createConditionalExpression(
          vElse.exp,
          buildDynamicSlot(
            slotName,
            slotFunction,
            conditionalBranchIndex++
          ),
          defaultFallback
        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);
      } else {
        context.onError(
          createCompilerError(30, vElse.loc)
        );
      }
    } else if (vFor = findDir(slotElement, "for")) {
      hasDynamicSlots = true;
      const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
      if (parseResult) {
        dynamicSlots.push(
          createCallExpression(context.helper(RENDER_LIST), [
            parseResult.source,
            createFunctionExpression(
              createForLoopParams(parseResult),
              buildDynamicSlot(slotName, slotFunction),
              true
              /* force newline */
            )
          ])
        );
      } else {
        context.onError(
          createCompilerError(32, vFor.loc)
        );
      }
    } else {
      if (staticSlotName) {
        if (seenSlotNames.has(staticSlotName)) {
          context.onError(
            createCompilerError(
              38,
              dirLoc
            )
          );
          continue;
        }
        seenSlotNames.add(staticSlotName);
        if (staticSlotName === "default") {
          hasNamedDefaultSlot = true;
        }
      }
      slotsProperties.push(createObjectProperty(slotName, slotFunction));
    }
  }
  if (!onComponentSlot) {
    const buildDefaultSlotProperty = (props, children2) => {
      const fn = buildSlotFn(props, children2, loc);
      if (context.compatConfig) {
        fn.isNonScopedSlot = true;
      }
      return createObjectProperty(`default`, fn);
    };
    if (!hasTemplateSlots) {
      slotsProperties.push(buildDefaultSlotProperty(void 0, children));
    } else if (implicitDefaultChildren.length && // #3766
    // with whitespace: 'preserve', whitespaces between slots will end up in
    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
    implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
      if (hasNamedDefaultSlot) {
        context.onError(
          createCompilerError(
            39,
            implicitDefaultChildren[0].loc
          )
        );
      } else {
        slotsProperties.push(
          buildDefaultSlotProperty(void 0, implicitDefaultChildren)
        );
      }
    }
  }
  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
  let slots = createObjectExpression(
    slotsProperties.concat(
      createObjectProperty(
        `_`,
        // 2 = compiled but dynamic = can skip normalization, but must run diff
        // 1 = compiled and static = can skip normalization AND diff as optimized
        createSimpleExpression(
          slotFlag + (true ? ` /* ${slotFlagsText[slotFlag]} */` : ``),
          false
        )
      )
    ),
    loc
  );
  if (dynamicSlots.length) {
    slots = createCallExpression(context.helper(CREATE_SLOTS), [
      slots,
      createArrayExpression(dynamicSlots)
    ]);
  }
  return {
    slots,
    hasDynamicSlots
  };
}
function buildDynamicSlot(name, fn, index) {
  const props = [
    createObjectProperty(`name`, name),
    createObjectProperty(`fn`, fn)
  ];
  if (index != null) {
    props.push(
      createObjectProperty(`key`, createSimpleExpression(String(index), true))
    );
  }
  return createObjectExpression(props);
}
function hasForwardedSlots(children) {
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    switch (child.type) {
      case 1:
        if (child.tagType === 2 || hasForwardedSlots(child.children)) {
          return true;
        }
        break;
      case 9:
        if (hasForwardedSlots(child.branches))
          return true;
        break;
      case 10:
      case 11:
        if (hasForwardedSlots(child.children))
          return true;
        break;
    }
  }
  return false;
}
function isNonWhitespaceContent(node) {
  if (node.type !== 2 && node.type !== 12)
    return true;
  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
}
function resolveComponentType(node, context, ssr = false) {
  let { tag } = node;
  const isExplicitDynamic = isComponentTag(tag);
  const isProp = findProp(node, "is");
  if (isProp) {
    if (isExplicitDynamic || isCompatEnabled(
      "COMPILER_IS_ON_ELEMENT",
      context
    )) {
      const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
      if (exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          exp
        ]);
      }
    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
      tag = isProp.value.content.slice(4);
    }
  }
  const isDir = !isExplicitDynamic && findDir(node, "is");
  if (isDir && isDir.exp) {
    if (true) {
      context.onWarn(
        createCompilerError(52, isDir.loc)
      );
    }
    return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
      isDir.exp
    ]);
  }
  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
  if (builtIn) {
    if (!ssr)
      context.helper(builtIn);
    return builtIn;
  }
  context.helper(RESOLVE_COMPONENT);
  context.components.add(tag);
  return toValidAssetId(tag, `component`);
}
function buildProps(node, context, props = node.props, isComponent2, isDynamicComponent, ssr = false) {
  const { tag, loc: elementLoc, children } = node;
  let properties = [];
  const mergeArgs = [];
  const runtimeDirectives = [];
  const hasChildren = children.length > 0;
  let shouldUseBlock = false;
  let patchFlag = 0;
  let hasRef = false;
  let hasClassBinding = false;
  let hasStyleBinding = false;
  let hasHydrationEventBinding = false;
  let hasDynamicKeys = false;
  let hasVnodeHook = false;
  const dynamicPropNames = [];
  const pushMergeArg = (arg) => {
    if (properties.length) {
      mergeArgs.push(
        createObjectExpression(dedupeProperties(properties), elementLoc)
      );
      properties = [];
    }
    if (arg)
      mergeArgs.push(arg);
  };
  const analyzePatchFlag = ({ key, value }) => {
    if (isStaticExp(key)) {
      const name = key.content;
      const isEventHandler = isOn(name);
      if (isEventHandler && (!isComponent2 || isDynamicComponent) && // omit the flag for click handlers because hydration gives click
      // dedicated fast path.
      name.toLowerCase() !== "onclick" && // omit v-model handlers
      name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
      !isReservedProp(name)) {
        hasHydrationEventBinding = true;
      }
      if (isEventHandler && isReservedProp(name)) {
        hasVnodeHook = true;
      }
      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
        return;
      }
      if (name === "ref") {
        hasRef = true;
      } else if (name === "class") {
        hasClassBinding = true;
      } else if (name === "style") {
        hasStyleBinding = true;
      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
      if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
    } else {
      hasDynamicKeys = true;
    }
  };
  for (let i = 0; i < props.length; i++) {
    const prop = props[i];
    if (prop.type === 6) {
      const { loc, name, value } = prop;
      let isStatic = true;
      if (name === "ref") {
        hasRef = true;
        if (context.scopes.vFor > 0) {
          properties.push(
            createObjectProperty(
              createSimpleExpression("ref_for", true),
              createSimpleExpression("true")
            )
          );
        }
      }
      if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      properties.push(
        createObjectProperty(
          createSimpleExpression(
            name,
            true,
            getInnerRange(loc, 0, name.length)
          ),
          createSimpleExpression(
            value ? value.content : "",
            isStatic,
            value ? value.loc : loc
          )
        )
      );
    } else {
      const { name, arg, exp, loc } = prop;
      const isVBind = name === "bind";
      const isVOn = name === "on";
      if (name === "slot") {
        if (!isComponent2) {
          context.onError(
            createCompilerError(40, loc)
          );
        }
        continue;
      }
      if (name === "once" || name === "memo") {
        continue;
      }
      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      if (isVOn && ssr) {
        continue;
      }
      if (
        // #938: elements with dynamic keys should be forced into blocks
        isVBind && isStaticArgOf(arg, "key") || // inline before-update hooks need to force block so that it is invoked
        // before children
        isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")
      ) {
        shouldUseBlock = true;
      }
      if (isVBind && isStaticArgOf(arg, "ref") && context.scopes.vFor > 0) {
        properties.push(
          createObjectProperty(
            createSimpleExpression("ref_for", true),
            createSimpleExpression("true")
          )
        );
      }
      if (!arg && (isVBind || isVOn)) {
        hasDynamicKeys = true;
        if (exp) {
          if (isVBind) {
            pushMergeArg();
            {
              if (true) {
                const hasOverridableKeys = mergeArgs.some((arg2) => {
                  if (arg2.type === 15) {
                    return arg2.properties.some(({ key }) => {
                      if (key.type !== 4 || !key.isStatic) {
                        return true;
                      }
                      return key.content !== "class" && key.content !== "style" && !isOn(key.content);
                    });
                  } else {
                    return true;
                  }
                });
                if (hasOverridableKeys) {
                  checkCompatEnabled(
                    "COMPILER_V_BIND_OBJECT_ORDER",
                    context,
                    loc
                  );
                }
              }
              if (isCompatEnabled(
                "COMPILER_V_BIND_OBJECT_ORDER",
                context
              )) {
                mergeArgs.unshift(exp);
                continue;
              }
            }
            mergeArgs.push(exp);
          } else {
            pushMergeArg({
              type: 14,
              loc,
              callee: context.helper(TO_HANDLERS),
              arguments: isComponent2 ? [exp] : [exp, `true`]
            });
          }
        } else {
          context.onError(
            createCompilerError(
              isVBind ? 34 : 35,
              loc
            )
          );
        }
        continue;
      }
      const directiveTransform = context.directiveTransforms[name];
      if (directiveTransform) {
        const { props: props2, needRuntime } = directiveTransform(prop, node, context);
        !ssr && props2.forEach(analyzePatchFlag);
        if (isVOn && arg && !isStaticExp(arg)) {
          pushMergeArg(createObjectExpression(props2, elementLoc));
        } else {
          properties.push(...props2);
        }
        if (needRuntime) {
          runtimeDirectives.push(prop);
          if (isSymbol(needRuntime)) {
            directiveImportMap.set(prop, needRuntime);
          }
        }
      } else if (!isBuiltInDirective(name)) {
        runtimeDirectives.push(prop);
        if (hasChildren) {
          shouldUseBlock = true;
        }
      }
    }
  }
  let propsExpression = void 0;
  if (mergeArgs.length) {
    pushMergeArg();
    if (mergeArgs.length > 1) {
      propsExpression = createCallExpression(
        context.helper(MERGE_PROPS),
        mergeArgs,
        elementLoc
      );
    } else {
      propsExpression = mergeArgs[0];
    }
  } else if (properties.length) {
    propsExpression = createObjectExpression(
      dedupeProperties(properties),
      elementLoc
    );
  }
  if (hasDynamicKeys) {
    patchFlag |= 16;
  } else {
    if (hasClassBinding && !isComponent2) {
      patchFlag |= 2;
    }
    if (hasStyleBinding && !isComponent2) {
      patchFlag |= 4;
    }
    if (dynamicPropNames.length) {
      patchFlag |= 8;
    }
    if (hasHydrationEventBinding) {
      patchFlag |= 32;
    }
  }
  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
    patchFlag |= 512;
  }
  if (!context.inSSR && propsExpression) {
    switch (propsExpression.type) {
      case 15:
        let classKeyIndex = -1;
        let styleKeyIndex = -1;
        let hasDynamicKey = false;
        for (let i = 0; i < propsExpression.properties.length; i++) {
          const key = propsExpression.properties[i].key;
          if (isStaticExp(key)) {
            if (key.content === "class") {
              classKeyIndex = i;
            } else if (key.content === "style") {
              styleKeyIndex = i;
            }
          } else if (!key.isHandlerKey) {
            hasDynamicKey = true;
          }
        }
        const classProp = propsExpression.properties[classKeyIndex];
        const styleProp = propsExpression.properties[styleKeyIndex];
        if (!hasDynamicKey) {
          if (classProp && !isStaticExp(classProp.value)) {
            classProp.value = createCallExpression(
              context.helper(NORMALIZE_CLASS),
              [classProp.value]
            );
          }
          if (styleProp && // the static style is compiled into an object,
          // so use `hasStyleBinding` to ensure that it is a dynamic style binding
          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,
          // v-bind:style with static literal object
          styleProp.value.type === 17)) {
            styleProp.value = createCallExpression(
              context.helper(NORMALIZE_STYLE),
              [styleProp.value]
            );
          }
        } else {
          propsExpression = createCallExpression(
            context.helper(NORMALIZE_PROPS),
            [propsExpression]
          );
        }
        break;
      case 14:
        break;
      default:
        propsExpression = createCallExpression(
          context.helper(NORMALIZE_PROPS),
          [
            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
              propsExpression
            ])
          ]
        );
        break;
    }
  }
  return {
    props: propsExpression,
    directives: runtimeDirectives,
    patchFlag,
    dynamicPropNames,
    shouldUseBlock
  };
}
function dedupeProperties(properties) {
  const knownProps = /* @__PURE__ */ new Map();
  const deduped = [];
  for (let i = 0; i < properties.length; i++) {
    const prop = properties[i];
    if (prop.key.type === 8 || !prop.key.isStatic) {
      deduped.push(prop);
      continue;
    }
    const name = prop.key.content;
    const existing = knownProps.get(name);
    if (existing) {
      if (name === "style" || name === "class" || isOn(name)) {
        mergeAsArray(existing, prop);
      }
    } else {
      knownProps.set(name, prop);
      deduped.push(prop);
    }
  }
  return deduped;
}
function mergeAsArray(existing, incoming) {
  if (existing.value.type === 17) {
    existing.value.elements.push(incoming.value);
  } else {
    existing.value = createArrayExpression(
      [existing.value, incoming.value],
      existing.loc
    );
  }
}
function buildDirectiveArgs(dir, context) {
  const dirArgs = [];
  const runtime = directiveImportMap.get(dir);
  if (runtime) {
    dirArgs.push(context.helperString(runtime));
  } else {
    {
      context.helper(RESOLVE_DIRECTIVE);
      context.directives.add(dir.name);
      dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
  }
  const { loc } = dir;
  if (dir.exp)
    dirArgs.push(dir.exp);
  if (dir.arg) {
    if (!dir.exp) {
      dirArgs.push(`void 0`);
    }
    dirArgs.push(dir.arg);
  }
  if (Object.keys(dir.modifiers).length) {
    if (!dir.arg) {
      if (!dir.exp) {
        dirArgs.push(`void 0`);
      }
      dirArgs.push(`void 0`);
    }
    const trueExpression = createSimpleExpression(`true`, false, loc);
    dirArgs.push(
      createObjectExpression(
        dir.modifiers.map(
          (modifier) => createObjectProperty(modifier, trueExpression)
        ),
        loc
      )
    );
  }
  return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
  let propsNamesString = `[`;
  for (let i = 0, l = props.length; i < l; i++) {
    propsNamesString += JSON.stringify(props[i]);
    if (i < l - 1)
      propsNamesString += ", ";
  }
  return propsNamesString + `]`;
}
function isComponentTag(tag) {
  return tag === "component" || tag === "Component";
}
function processSlotOutlet(node, context) {
  let slotName = `"default"`;
  let slotProps = void 0;
  const nonNameProps = [];
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 6) {
      if (p.value) {
        if (p.name === "name") {
          slotName = JSON.stringify(p.value.content);
        } else {
          p.name = camelize(p.name);
          nonNameProps.push(p);
        }
      }
    } else {
      if (p.name === "bind" && isStaticArgOf(p.arg, "name")) {
        if (p.exp)
          slotName = p.exp;
      } else {
        if (p.name === "bind" && p.arg && isStaticExp(p.arg)) {
          p.arg.content = camelize(p.arg.content);
        }
        nonNameProps.push(p);
      }
    }
  }
  if (nonNameProps.length > 0) {
    const { props, directives } = buildProps(
      node,
      context,
      nonNameProps,
      false,
      false
    );
    slotProps = props;
    if (directives.length) {
      context.onError(
        createCompilerError(
          36,
          directives[0].loc
        )
      );
    }
  }
  return {
    slotName,
    slotProps
  };
}
function createTransformProps(props = []) {
  return { props };
}
function rewriteFilter(node, context) {
  if (node.type === 4) {
    parseFilter(node, context);
  } else {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      if (typeof child !== "object")
        continue;
      if (child.type === 4) {
        parseFilter(child, context);
      } else if (child.type === 8) {
        rewriteFilter(node, context);
      } else if (child.type === 5) {
        rewriteFilter(child.content, context);
      }
    }
  }
}
function parseFilter(node, context) {
  const exp = node.content;
  let inSingle = false;
  let inDouble = false;
  let inTemplateString = false;
  let inRegex = false;
  let curly = 0;
  let square = 0;
  let paren = 0;
  let lastFilterIndex = 0;
  let c, prev, i, expression, filters = [];
  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 39 && prev !== 92)
        inSingle = false;
    } else if (inDouble) {
      if (c === 34 && prev !== 92)
        inDouble = false;
    } else if (inTemplateString) {
      if (c === 96 && prev !== 92)
        inTemplateString = false;
    } else if (inRegex) {
      if (c === 47 && prev !== 92)
        inRegex = false;
    } else if (c === 124 && // pipe
    exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
      if (expression === void 0) {
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 34:
          inDouble = true;
          break;
        case 39:
          inSingle = true;
          break;
        case 96:
          inTemplateString = true;
          break;
        case 40:
          paren++;
          break;
        case 41:
          paren--;
          break;
        case 91:
          square++;
          break;
        case 93:
          square--;
          break;
        case 123:
          curly++;
          break;
        case 125:
          curly--;
          break;
      }
      if (c === 47) {
        let j = i - 1;
        let p;
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== " ")
            break;
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }
  if (expression === void 0) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }
  function pushFilter() {
    filters.push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }
  if (filters.length) {
    warnDeprecation(
      "COMPILER_FILTER",
      context,
      node.loc
    );
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i], context);
    }
    node.content = expression;
  }
}
function wrapFilter(exp, filter, context) {
  context.helper(RESOLVE_FILTER);
  const i = filter.indexOf("(");
  if (i < 0) {
    context.filters.add(filter);
    return `${toValidAssetId(filter, "filter")}(${exp})`;
  } else {
    const name = filter.slice(0, i);
    const args = filter.slice(i + 1);
    context.filters.add(name);
    return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
  }
}
function getBaseTransformPreset(prefixIdentifiers) {
  return [
    [
      transformOnce,
      transformIf,
      transformMemo,
      transformFor,
      ...[transformFilter],
      ...true ? [transformExpression] : [],
      transformSlotOutlet,
      transformElement,
      trackSlotScopes,
      transformText
    ],
    {
      on: transformOn,
      bind: transformBind,
      model: transformModel
    }
  ];
}
function baseCompile(template, options = {}) {
  const onError = options.onError || defaultOnError;
  const isModuleMode = options.mode === "module";
  {
    if (options.prefixIdentifiers === true) {
      onError(createCompilerError(47));
    } else if (isModuleMode) {
      onError(createCompilerError(48));
    }
  }
  const prefixIdentifiers = false;
  if (options.cacheHandlers) {
    onError(createCompilerError(49));
  }
  if (options.scopeId && !isModuleMode) {
    onError(createCompilerError(50));
  }
  const ast = isString(template) ? baseParse(template, options) : template;
  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
  transform(
    ast,
    extend({}, options, {
      prefixIdentifiers,
      nodeTransforms: [
        ...nodeTransforms,
        ...options.nodeTransforms || []
        // user transforms
      ],
      directiveTransforms: extend(
        {},
        directiveTransforms,
        options.directiveTransforms || {}
        // user transforms
      )
    })
  );
  return generate(
    ast,
    extend({}, options, {
      prefixIdentifiers
    })
  );
}
var errorMessages, FRAGMENT, TELEPORT, SUSPENSE, KEEP_ALIVE, BASE_TRANSITION, OPEN_BLOCK, CREATE_BLOCK, CREATE_ELEMENT_BLOCK, CREATE_VNODE, CREATE_ELEMENT_VNODE, CREATE_COMMENT, CREATE_TEXT, CREATE_STATIC, RESOLVE_COMPONENT, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_FILTER, WITH_DIRECTIVES, RENDER_LIST, RENDER_SLOT, CREATE_SLOTS, TO_DISPLAY_STRING, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_STYLE, NORMALIZE_PROPS, GUARD_REACTIVE_PROPS, TO_HANDLERS, CAMELIZE, CAPITALIZE, TO_HANDLER_KEY, SET_BLOCK_TRACKING, PUSH_SCOPE_ID, POP_SCOPE_ID, WITH_CTX, UNREF, IS_REF, WITH_MEMO, IS_MEMO_SAME, helperNameMap, locStub, isStaticExp, isBuiltInType, nonIdentifierRE, isSimpleIdentifier, validFirstIdentCharRE, validIdentCharRE, whitespaceRE, isMemberExpressionBrowser, isMemberExpressionNode, isMemberExpression, propsHelperSet, deprecationData, decodeRE, decodeMap, defaultParserOptions, TagType, isSpecialTemplateDirective, allowHoistedHelperSet, PURE_ANNOTATION, aliasHelper, isFunctionType, isStaticProperty, isStaticPropertyKey, TS_NODE_TYPES, prohibitedKeywordRE, stripStringRE, transformExpression, transformIf, transformFor, forAliasRE, forIteratorRE, stripParensRE, defaultFallback, trackSlotScopes, trackVForSlotScopes, buildClientSlotFn, directiveImportMap, transformElement, transformSlotOutlet, fnExpRE, transformOn, transformBind, injectPrefix, transformText, seen$1, transformOnce, transformModel, validDivisionCharRE, transformFilter, seen, transformMemo, noopDirectiveTransform;
var init_compiler_core_esm_bundler = __esm({
  "node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js"() {
    init_shared_esm_bundler();
    init_shared_esm_bundler();
    errorMessages = {
      // parse errors
      [0]: "Illegal comment.",
      [1]: "CDATA section is allowed only in XML context.",
      [2]: "Duplicate attribute.",
      [3]: "End tag cannot have attributes.",
      [4]: "Illegal '/' in tags.",
      [5]: "Unexpected EOF in tag.",
      [6]: "Unexpected EOF in CDATA section.",
      [7]: "Unexpected EOF in comment.",
      [8]: "Unexpected EOF in script.",
      [9]: "Unexpected EOF in tag.",
      [10]: "Incorrectly closed comment.",
      [11]: "Incorrectly opened comment.",
      [12]: "Illegal tag name. Use '&lt;' to print '<'.",
      [13]: "Attribute value was expected.",
      [14]: "End tag name was expected.",
      [15]: "Whitespace was expected.",
      [16]: "Unexpected '<!--' in comment.",
      [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
      [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
      [19]: "Attribute name cannot start with '='.",
      [21]: "'<?' is allowed only in XML context.",
      [20]: `Unexpected null character.`,
      [22]: "Illegal '/' in tags.",
      // Vue-specific parse errors
      [23]: "Invalid end tag.",
      [24]: "Element is missing end tag.",
      [25]: "Interpolation end sign was not found.",
      [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
      [26]: "Legal directive name was expected.",
      // transform errors
      [28]: `v-if/v-else-if is missing expression.`,
      [29]: `v-if/else branches must use unique keys.`,
      [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
      [31]: `v-for is missing expression.`,
      [32]: `v-for has invalid expression.`,
      [33]: `<template v-for> key should be placed on the <template> tag.`,
      [34]: `v-bind is missing expression.`,
      [35]: `v-on is missing expression.`,
      [36]: `Unexpected custom directive on <slot> outlet.`,
      [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
      [38]: `Duplicate slot names found. `,
      [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
      [40]: `v-slot can only be used on components or <template> tags.`,
      [41]: `v-model is missing expression.`,
      [42]: `v-model value must be a valid JavaScript member expression.`,
      [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
      [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.
Use a v-bind binding combined with a v-on listener that emits update:x event instead.`,
      [45]: `Error parsing JavaScript expression: `,
      [46]: `<KeepAlive> expects exactly one child component.`,
      // generic errors
      [47]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
      [48]: `ES module mode is not supported in this build of compiler.`,
      [49]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
      [50]: `"scopeId" option is only supported in module mode.`,
      // deprecations
      [51]: `@vnode-* hooks in templates are deprecated. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support will be removed in 3.4.`,
      [52]: `v-is="component-name" has been deprecated. Use is="vue:component-name" instead. v-is support will be removed in 3.4.`,
      // just to fulfill types
      [53]: ``
    };
    FRAGMENT = Symbol(true ? `Fragment` : ``);
    TELEPORT = Symbol(true ? `Teleport` : ``);
    SUSPENSE = Symbol(true ? `Suspense` : ``);
    KEEP_ALIVE = Symbol(true ? `KeepAlive` : ``);
    BASE_TRANSITION = Symbol(true ? `BaseTransition` : ``);
    OPEN_BLOCK = Symbol(true ? `openBlock` : ``);
    CREATE_BLOCK = Symbol(true ? `createBlock` : ``);
    CREATE_ELEMENT_BLOCK = Symbol(true ? `createElementBlock` : ``);
    CREATE_VNODE = Symbol(true ? `createVNode` : ``);
    CREATE_ELEMENT_VNODE = Symbol(true ? `createElementVNode` : ``);
    CREATE_COMMENT = Symbol(true ? `createCommentVNode` : ``);
    CREATE_TEXT = Symbol(true ? `createTextVNode` : ``);
    CREATE_STATIC = Symbol(true ? `createStaticVNode` : ``);
    RESOLVE_COMPONENT = Symbol(true ? `resolveComponent` : ``);
    RESOLVE_DYNAMIC_COMPONENT = Symbol(
      true ? `resolveDynamicComponent` : ``
    );
    RESOLVE_DIRECTIVE = Symbol(true ? `resolveDirective` : ``);
    RESOLVE_FILTER = Symbol(true ? `resolveFilter` : ``);
    WITH_DIRECTIVES = Symbol(true ? `withDirectives` : ``);
    RENDER_LIST = Symbol(true ? `renderList` : ``);
    RENDER_SLOT = Symbol(true ? `renderSlot` : ``);
    CREATE_SLOTS = Symbol(true ? `createSlots` : ``);
    TO_DISPLAY_STRING = Symbol(true ? `toDisplayString` : ``);
    MERGE_PROPS = Symbol(true ? `mergeProps` : ``);
    NORMALIZE_CLASS = Symbol(true ? `normalizeClass` : ``);
    NORMALIZE_STYLE = Symbol(true ? `normalizeStyle` : ``);
    NORMALIZE_PROPS = Symbol(true ? `normalizeProps` : ``);
    GUARD_REACTIVE_PROPS = Symbol(true ? `guardReactiveProps` : ``);
    TO_HANDLERS = Symbol(true ? `toHandlers` : ``);
    CAMELIZE = Symbol(true ? `camelize` : ``);
    CAPITALIZE = Symbol(true ? `capitalize` : ``);
    TO_HANDLER_KEY = Symbol(true ? `toHandlerKey` : ``);
    SET_BLOCK_TRACKING = Symbol(true ? `setBlockTracking` : ``);
    PUSH_SCOPE_ID = Symbol(true ? `pushScopeId` : ``);
    POP_SCOPE_ID = Symbol(true ? `popScopeId` : ``);
    WITH_CTX = Symbol(true ? `withCtx` : ``);
    UNREF = Symbol(true ? `unref` : ``);
    IS_REF = Symbol(true ? `isRef` : ``);
    WITH_MEMO = Symbol(true ? `withMemo` : ``);
    IS_MEMO_SAME = Symbol(true ? `isMemoSame` : ``);
    helperNameMap = {
      [FRAGMENT]: `Fragment`,
      [TELEPORT]: `Teleport`,
      [SUSPENSE]: `Suspense`,
      [KEEP_ALIVE]: `KeepAlive`,
      [BASE_TRANSITION]: `BaseTransition`,
      [OPEN_BLOCK]: `openBlock`,
      [CREATE_BLOCK]: `createBlock`,
      [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
      [CREATE_VNODE]: `createVNode`,
      [CREATE_ELEMENT_VNODE]: `createElementVNode`,
      [CREATE_COMMENT]: `createCommentVNode`,
      [CREATE_TEXT]: `createTextVNode`,
      [CREATE_STATIC]: `createStaticVNode`,
      [RESOLVE_COMPONENT]: `resolveComponent`,
      [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
      [RESOLVE_DIRECTIVE]: `resolveDirective`,
      [RESOLVE_FILTER]: `resolveFilter`,
      [WITH_DIRECTIVES]: `withDirectives`,
      [RENDER_LIST]: `renderList`,
      [RENDER_SLOT]: `renderSlot`,
      [CREATE_SLOTS]: `createSlots`,
      [TO_DISPLAY_STRING]: `toDisplayString`,
      [MERGE_PROPS]: `mergeProps`,
      [NORMALIZE_CLASS]: `normalizeClass`,
      [NORMALIZE_STYLE]: `normalizeStyle`,
      [NORMALIZE_PROPS]: `normalizeProps`,
      [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
      [TO_HANDLERS]: `toHandlers`,
      [CAMELIZE]: `camelize`,
      [CAPITALIZE]: `capitalize`,
      [TO_HANDLER_KEY]: `toHandlerKey`,
      [SET_BLOCK_TRACKING]: `setBlockTracking`,
      [PUSH_SCOPE_ID]: `pushScopeId`,
      [POP_SCOPE_ID]: `popScopeId`,
      [WITH_CTX]: `withCtx`,
      [UNREF]: `unref`,
      [IS_REF]: `isRef`,
      [WITH_MEMO]: `withMemo`,
      [IS_MEMO_SAME]: `isMemoSame`
    };
    locStub = {
      source: "",
      start: { line: 1, column: 1, offset: 0 },
      end: { line: 1, column: 1, offset: 0 }
    };
    isStaticExp = (p) => p.type === 4 && p.isStatic;
    isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);
    nonIdentifierRE = /^\d|[^\$\w]/;
    isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
    validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
    validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
    whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
    isMemberExpressionBrowser = (path) => {
      path = path.trim().replace(whitespaceRE, (s) => s.trim());
      let state = 0;
      let stateStack = [];
      let currentOpenBracketCount = 0;
      let currentOpenParensCount = 0;
      let currentStringType = null;
      for (let i = 0; i < path.length; i++) {
        const char = path.charAt(i);
        switch (state) {
          case 0:
            if (char === "[") {
              stateStack.push(state);
              state = 1;
              currentOpenBracketCount++;
            } else if (char === "(") {
              stateStack.push(state);
              state = 2;
              currentOpenParensCount++;
            } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
              return false;
            }
            break;
          case 1:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `[`) {
              currentOpenBracketCount++;
            } else if (char === `]`) {
              if (!--currentOpenBracketCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 2:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `(`) {
              currentOpenParensCount++;
            } else if (char === `)`) {
              if (i === path.length - 1) {
                return false;
              }
              if (!--currentOpenParensCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 3:
            if (char === currentStringType) {
              state = stateStack.pop();
              currentStringType = null;
            }
            break;
        }
      }
      return !currentOpenBracketCount && !currentOpenParensCount;
    };
    isMemberExpressionNode = NOOP;
    isMemberExpression = isMemberExpressionBrowser;
    propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
    deprecationData = {
      ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
      },
      ["COMPILER_V_BIND_SYNC"]: {
        message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
      },
      ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
      },
      ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
      },
      ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
      },
      ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
      },
      ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
      },
      ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
      },
      ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
      }
    };
    decodeRE = /&(gt|lt|amp|apos|quot);/g;
    decodeMap = {
      gt: ">",
      lt: "<",
      amp: "&",
      apos: "'",
      quot: '"'
    };
    defaultParserOptions = {
      delimiters: [`{{`, `}}`],
      getNamespace: () => 0,
      getTextMode: () => 0,
      isVoidTag: NO,
      isPreTag: NO,
      isCustomElement: NO,
      decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
      onError: defaultOnError,
      onWarn: defaultOnWarn,
      comments: true
    };
    TagType = ((TagType2) => {
      TagType2[TagType2["Start"] = 0] = "Start";
      TagType2[TagType2["End"] = 1] = "End";
      return TagType2;
    })(TagType || {});
    isSpecialTemplateDirective = makeMap(
      `if,else,else-if,for,slot`
    );
    allowHoistedHelperSet = /* @__PURE__ */ new Set([
      NORMALIZE_CLASS,
      NORMALIZE_STYLE,
      NORMALIZE_PROPS,
      GUARD_REACTIVE_PROPS
    ]);
    PURE_ANNOTATION = `/*#__PURE__*/`;
    aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
    isFunctionType = (node) => {
      return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
    };
    isStaticProperty = (node) => node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
    isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;
    TS_NODE_TYPES = [
      "TSAsExpression",
      // foo as number
      "TSTypeAssertion",
      // (<number>foo)
      "TSNonNullExpression",
      // foo!
      "TSInstantiationExpression",
      // foo<string>
      "TSSatisfiesExpression"
      // foo satisfies T
    ];
    prohibitedKeywordRE = new RegExp(
      "\\b" + "arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b") + "\\b"
    );
    stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
    transformExpression = (node, context) => {
      if (node.type === 5) {
        node.content = processExpression(
          node.content,
          context
        );
      } else if (node.type === 1) {
        for (let i = 0; i < node.props.length; i++) {
          const dir = node.props[i];
          if (dir.type === 7 && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
              dir.exp = processExpression(
                exp,
                context,
                // slot args must be processed as function params
                dir.name === "slot"
              );
            }
            if (arg && arg.type === 4 && !arg.isStatic) {
              dir.arg = processExpression(arg, context);
            }
          }
        }
      }
    };
    transformIf = createStructuralDirectiveTransform(
      /^(if|else|else-if)$/,
      (node, dir, context) => {
        return processIf(node, dir, context, (ifNode, branch, isRoot) => {
          const siblings = context.parent.children;
          let i = siblings.indexOf(ifNode);
          let key = 0;
          while (i-- >= 0) {
            const sibling = siblings[i];
            if (sibling && sibling.type === 9) {
              key += sibling.branches.length;
            }
          }
          return () => {
            if (isRoot) {
              ifNode.codegenNode = createCodegenNodeForBranch(
                branch,
                key,
                context
              );
            } else {
              const parentCondition = getParentCondition(ifNode.codegenNode);
              parentCondition.alternate = createCodegenNodeForBranch(
                branch,
                key + ifNode.branches.length - 1,
                context
              );
            }
          };
        });
      }
    );
    transformFor = createStructuralDirectiveTransform(
      "for",
      (node, dir, context) => {
        const { helper, removeHelper } = context;
        return processFor(node, dir, context, (forNode) => {
          const renderExp = createCallExpression(helper(RENDER_LIST), [
            forNode.source
          ]);
          const isTemplate = isTemplateNode(node);
          const memo = findDir(node, "memo");
          const keyProp = findProp(node, `key`);
          const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
          const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
          const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
          const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
          forNode.codegenNode = createVNodeCall(
            context,
            helper(FRAGMENT),
            void 0,
            renderExp,
            fragmentFlag + (true ? ` /* ${PatchFlagNames[fragmentFlag]} */` : ``),
            void 0,
            void 0,
            true,
            !isStableFragment,
            false,
            node.loc
          );
          return () => {
            let childBlock;
            const { children } = forNode;
            if (isTemplate) {
              node.children.some((c) => {
                if (c.type === 1) {
                  const key = findProp(c, "key");
                  if (key) {
                    context.onError(
                      createCompilerError(
                        33,
                        key.loc
                      )
                    );
                    return true;
                  }
                }
              });
            }
            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
            const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
            if (slotOutlet) {
              childBlock = slotOutlet.codegenNode;
              if (isTemplate && keyProperty) {
                injectProp(childBlock, keyProperty, context);
              }
            } else if (needFragmentWrapper) {
              childBlock = createVNodeCall(
                context,
                helper(FRAGMENT),
                keyProperty ? createObjectExpression([keyProperty]) : void 0,
                node.children,
                64 + (true ? ` /* ${PatchFlagNames[64]} */` : ``),
                void 0,
                void 0,
                true,
                void 0,
                false
                /* isComponent */
              );
            } else {
              childBlock = children[0].codegenNode;
              if (isTemplate && keyProperty) {
                injectProp(childBlock, keyProperty, context);
              }
              if (childBlock.isBlock !== !isStableFragment) {
                if (childBlock.isBlock) {
                  removeHelper(OPEN_BLOCK);
                  removeHelper(
                    getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
                  );
                } else {
                  removeHelper(
                    getVNodeHelper(context.inSSR, childBlock.isComponent)
                  );
                }
              }
              childBlock.isBlock = !isStableFragment;
              if (childBlock.isBlock) {
                helper(OPEN_BLOCK);
                helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
              } else {
                helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
              }
            }
            if (memo) {
              const loop = createFunctionExpression(
                createForLoopParams(forNode.parseResult, [
                  createSimpleExpression(`_cached`)
                ])
              );
              loop.body = createBlockStatement([
                createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
                createCompoundExpression([
                  `if (_cached`,
                  ...keyExp ? [` && _cached.key === `, keyExp] : [],
                  ` && ${context.helperString(
                    IS_MEMO_SAME
                  )}(_cached, _memo)) return _cached`
                ]),
                createCompoundExpression([`const _item = `, childBlock]),
                createSimpleExpression(`_item.memo = _memo`),
                createSimpleExpression(`return _item`)
              ]);
              renderExp.arguments.push(
                loop,
                createSimpleExpression(`_cache`),
                createSimpleExpression(String(context.cached++))
              );
            } else {
              renderExp.arguments.push(
                createFunctionExpression(
                  createForLoopParams(forNode.parseResult),
                  childBlock,
                  true
                  /* force newline */
                )
              );
            }
          };
        });
      }
    );
    forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    stripParensRE = /^\(|\)$/g;
    defaultFallback = createSimpleExpression(`undefined`, false);
    trackSlotScopes = (node, context) => {
      if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
        const vSlot = findDir(node, "slot");
        if (vSlot) {
          vSlot.exp;
          context.scopes.vSlot++;
          return () => {
            context.scopes.vSlot--;
          };
        }
      }
    };
    trackVForSlotScopes = (node, context) => {
      let vFor;
      if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, "for"))) {
        const result = vFor.parseResult = parseForExpression(
          vFor.exp,
          context
        );
        if (result) {
          const { value, key, index } = result;
          const { addIdentifiers, removeIdentifiers } = context;
          value && addIdentifiers(value);
          key && addIdentifiers(key);
          index && addIdentifiers(index);
          return () => {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
          };
        }
      }
    };
    buildClientSlotFn = (props, children, loc) => createFunctionExpression(
      props,
      children,
      false,
      true,
      children.length ? children[0].loc : loc
    );
    directiveImportMap = /* @__PURE__ */ new WeakMap();
    transformElement = (node, context) => {
      return function postTransformElement() {
        node = context.currentNode;
        if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
          return;
        }
        const { tag, props } = node;
        const isComponent2 = node.tagType === 1;
        let vnodeTag = isComponent2 ? resolveComponentType(node, context) : `"${tag}"`;
        const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = (
          // dynamic component may resolve to plain elements
          isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && // <svg> and <foreignObject> must be forced into blocks so that block
          // updates inside get proper isSVG flag at runtime. (#639, #643)
          // This is technically web-specific, but splitting the logic out of core
          // leads to too much unnecessary complexity.
          (tag === "svg" || tag === "foreignObject")
        );
        if (props.length > 0) {
          const propsBuildResult = buildProps(
            node,
            context,
            void 0,
            isComponent2,
            isDynamicComponent
          );
          vnodeProps = propsBuildResult.props;
          patchFlag = propsBuildResult.patchFlag;
          dynamicPropNames = propsBuildResult.dynamicPropNames;
          const directives = propsBuildResult.directives;
          vnodeDirectives = directives && directives.length ? createArrayExpression(
            directives.map((dir) => buildDirectiveArgs(dir, context))
          ) : void 0;
          if (propsBuildResult.shouldUseBlock) {
            shouldUseBlock = true;
          }
        }
        if (node.children.length > 0) {
          if (vnodeTag === KEEP_ALIVE) {
            shouldUseBlock = true;
            patchFlag |= 1024;
            if (node.children.length > 1) {
              context.onError(
                createCompilerError(46, {
                  start: node.children[0].loc.start,
                  end: node.children[node.children.length - 1].loc.end,
                  source: ""
                })
              );
            }
          }
          const shouldBuildAsSlots = isComponent2 && // Teleport is not a real component and has dedicated runtime handling
          vnodeTag !== TELEPORT && // explained above.
          vnodeTag !== KEEP_ALIVE;
          if (shouldBuildAsSlots) {
            const { slots, hasDynamicSlots } = buildSlots(node, context);
            vnodeChildren = slots;
            if (hasDynamicSlots) {
              patchFlag |= 1024;
            }
          } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
            const child = node.children[0];
            const type = child.type;
            const hasDynamicTextChild = type === 5 || type === 8;
            if (hasDynamicTextChild && getConstantType(child, context) === 0) {
              patchFlag |= 1;
            }
            if (hasDynamicTextChild || type === 2) {
              vnodeChildren = child;
            } else {
              vnodeChildren = node.children;
            }
          } else {
            vnodeChildren = node.children;
          }
        }
        if (patchFlag !== 0) {
          if (true) {
            if (patchFlag < 0) {
              vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;
            } else {
              const flagNames = Object.keys(PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => PatchFlagNames[n]).join(`, `);
              vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
            }
          } else {
            vnodePatchFlag = String(patchFlag);
          }
          if (dynamicPropNames && dynamicPropNames.length) {
            vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
          }
        }
        node.codegenNode = createVNodeCall(
          context,
          vnodeTag,
          vnodeProps,
          vnodeChildren,
          vnodePatchFlag,
          vnodeDynamicProps,
          vnodeDirectives,
          !!shouldUseBlock,
          false,
          isComponent2,
          node.loc
        );
      };
    };
    transformSlotOutlet = (node, context) => {
      if (isSlotOutlet(node)) {
        const { children, loc } = node;
        const { slotName, slotProps } = processSlotOutlet(node, context);
        const slotArgs = [
          context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
          slotName,
          "{}",
          "undefined",
          "true"
        ];
        let expectedLen = 2;
        if (slotProps) {
          slotArgs[2] = slotProps;
          expectedLen = 3;
        }
        if (children.length) {
          slotArgs[3] = createFunctionExpression([], children, false, false, loc);
          expectedLen = 4;
        }
        if (context.scopeId && !context.slotted) {
          expectedLen = 5;
        }
        slotArgs.splice(expectedLen);
        node.codegenNode = createCallExpression(
          context.helper(RENDER_SLOT),
          slotArgs,
          loc
        );
      }
    };
    fnExpRE = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
    transformOn = (dir, node, context, augmentor) => {
      const { loc, modifiers, arg } = dir;
      if (!dir.exp && !modifiers.length) {
        context.onError(createCompilerError(35, loc));
      }
      let eventName;
      if (arg.type === 4) {
        if (arg.isStatic) {
          let rawName = arg.content;
          if (rawName.startsWith("vnode")) {
            context.onWarn(
              createCompilerError(51, arg.loc)
            );
          }
          if (rawName.startsWith("vue:")) {
            rawName = `vnode-${rawName.slice(4)}`;
          }
          const eventString = node.tagType !== 0 || rawName.startsWith("vnode") || !/[A-Z]/.test(rawName) ? (
            // for non-element and vnode lifecycle event listeners, auto convert
            // it to camelCase. See issue #2249
            toHandlerKey(camelize(rawName))
          ) : (
            // preserve case for plain element listeners that have uppercase
            // letters, as these may be custom elements' custom events
            `on:${rawName}`
          );
          eventName = createSimpleExpression(eventString, true, arg.loc);
        } else {
          eventName = createCompoundExpression([
            `${context.helperString(TO_HANDLER_KEY)}(`,
            arg,
            `)`
          ]);
        }
      } else {
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
        eventName.children.push(`)`);
      }
      let exp = dir.exp;
      if (exp && !exp.content.trim()) {
        exp = void 0;
      }
      let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
      if (exp) {
        const isMemberExp = isMemberExpression(exp.content);
        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        if (true) {
          validateBrowserExpression(
            exp,
            context,
            false,
            hasMultipleStatements
          );
        }
        if (isInlineStatement || shouldCache && isMemberExp) {
          exp = createCompoundExpression([
            `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
          ]);
        }
      }
      let ret = {
        props: [
          createObjectProperty(
            eventName,
            exp || createSimpleExpression(`() => {}`, false, loc)
          )
        ]
      };
      if (augmentor) {
        ret = augmentor(ret);
      }
      if (shouldCache) {
        ret.props[0].value = context.cache(ret.props[0].value);
      }
      ret.props.forEach((p) => p.key.isHandlerKey = true);
      return ret;
    };
    transformBind = (dir, _node, context) => {
      const { exp, modifiers, loc } = dir;
      const arg = dir.arg;
      if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
      } else if (!arg.isStatic) {
        arg.content = `${arg.content} || ""`;
      }
      if (modifiers.includes("camel")) {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = camelize(arg.content);
          } else {
            arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
          }
        } else {
          arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
          arg.children.push(`)`);
        }
      }
      if (!context.inSSR) {
        if (modifiers.includes("prop")) {
          injectPrefix(arg, ".");
        }
        if (modifiers.includes("attr")) {
          injectPrefix(arg, "^");
        }
      }
      if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError(34, loc));
        return {
          props: [createObjectProperty(arg, createSimpleExpression("", true, loc))]
        };
      }
      return {
        props: [createObjectProperty(arg, exp)]
      };
    };
    injectPrefix = (arg, prefix) => {
      if (arg.type === 4) {
        if (arg.isStatic) {
          arg.content = prefix + arg.content;
        } else {
          arg.content = `\`${prefix}\${${arg.content}}\``;
        }
      } else {
        arg.children.unshift(`'${prefix}' + (`);
        arg.children.push(`)`);
      }
    };
    transformText = (node, context) => {
      if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
        return () => {
          const children = node.children;
          let currentContainer = void 0;
          let hasText = false;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText$1(child)) {
              hasText = true;
              for (let j = i + 1; j < children.length; j++) {
                const next = children[j];
                if (isText$1(next)) {
                  if (!currentContainer) {
                    currentContainer = children[i] = createCompoundExpression(
                      [child],
                      child.loc
                    );
                  }
                  currentContainer.children.push(` + `, next);
                  children.splice(j, 1);
                  j--;
                } else {
                  currentContainer = void 0;
                  break;
                }
              }
            }
          }
          if (!hasText || // if this is a plain element with a single text child, leave it
          // as-is since the runtime has dedicated fast path for this by directly
          // setting textContent of the element.
          // for component root it's always normalized anyway.
          children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756
          // custom directives can potentially add DOM elements arbitrarily,
          // we need to avoid setting textContent of the element at runtime
          // to avoid accidentally overwriting the DOM elements added
          // by the user through custom directives.
          !node.props.find(
            (p) => p.type === 7 && !context.directiveTransforms[p.name]
          ) && // in compat mode, <template> tags with no special directives
          // will be rendered as a fragment so its children must be
          // converted into vnodes.
          !(node.tag === "template"))) {
            return;
          }
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText$1(child) || child.type === 8) {
              const callArgs = [];
              if (child.type !== 2 || child.content !== " ") {
                callArgs.push(child);
              }
              if (!context.ssr && getConstantType(child, context) === 0) {
                callArgs.push(
                  1 + (true ? ` /* ${PatchFlagNames[1]} */` : ``)
                );
              }
              children[i] = {
                type: 12,
                content: child,
                loc: child.loc,
                codegenNode: createCallExpression(
                  context.helper(CREATE_TEXT),
                  callArgs
                )
              };
            }
          }
        };
      }
    };
    seen$1 = /* @__PURE__ */ new WeakSet();
    transformOnce = (node, context) => {
      if (node.type === 1 && findDir(node, "once", true)) {
        if (seen$1.has(node) || context.inVOnce || context.inSSR) {
          return;
        }
        seen$1.add(node);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING);
        return () => {
          context.inVOnce = false;
          const cur = context.currentNode;
          if (cur.codegenNode) {
            cur.codegenNode = context.cache(
              cur.codegenNode,
              true
              /* isVNode */
            );
          }
        };
      }
    };
    transformModel = (dir, node, context) => {
      const { exp, arg } = dir;
      if (!exp) {
        context.onError(
          createCompilerError(41, dir.loc)
        );
        return createTransformProps();
      }
      const rawExp = exp.loc.source;
      const expString = exp.type === 4 ? exp.content : rawExp;
      const bindingType = context.bindingMetadata[rawExp];
      if (bindingType === "props" || bindingType === "props-aliased") {
        context.onError(createCompilerError(44, exp.loc));
        return createTransformProps();
      }
      const maybeRef = false;
      if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {
        context.onError(
          createCompilerError(42, exp.loc)
        );
        return createTransformProps();
      }
      const propName = arg ? arg : createSimpleExpression("modelValue", true);
      const eventName = arg ? isStaticExp(arg) ? `onUpdate:${camelize(arg.content)}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
      let assignmentExp;
      const eventArg = context.isTS ? `($event: any)` : `$event`;
      {
        assignmentExp = createCompoundExpression([
          `${eventArg} => ((`,
          exp,
          `) = $event)`
        ]);
      }
      const props = [
        // modelValue: foo
        createObjectProperty(propName, dir.exp),
        // "onUpdate:modelValue": $event => (foo = $event)
        createObjectProperty(eventName, assignmentExp)
      ];
      if (dir.modifiers.length && node.tagType === 1) {
        const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
        props.push(
          createObjectProperty(
            modifiersKey,
            createSimpleExpression(
              `{ ${modifiers} }`,
              false,
              dir.loc,
              2
            )
          )
        );
      }
      return createTransformProps(props);
    };
    validDivisionCharRE = /[\w).+\-_$\]]/;
    transformFilter = (node, context) => {
      if (!isCompatEnabled("COMPILER_FILTER", context)) {
        return;
      }
      if (node.type === 5) {
        rewriteFilter(node.content, context);
      }
      if (node.type === 1) {
        node.props.forEach((prop) => {
          if (prop.type === 7 && prop.name !== "for" && prop.exp) {
            rewriteFilter(prop.exp, context);
          }
        });
      }
    };
    seen = /* @__PURE__ */ new WeakSet();
    transformMemo = (node, context) => {
      if (node.type === 1) {
        const dir = findDir(node, "memo");
        if (!dir || seen.has(node)) {
          return;
        }
        seen.add(node);
        return () => {
          const codegenNode = node.codegenNode || context.currentNode.codegenNode;
          if (codegenNode && codegenNode.type === 13) {
            if (node.tagType !== 1) {
              convertToBlock(codegenNode, context);
            }
            node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
              dir.exp,
              createFunctionExpression(void 0, codegenNode),
              `_cache`,
              String(context.cached++)
            ]);
          }
        };
      }
    };
    noopDirectiveTransform = () => ({ props: [] });
  }
});

// node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js
var compiler_dom_esm_bundler_exports = {};
__export(compiler_dom_esm_bundler_exports, {
  BASE_TRANSITION: () => BASE_TRANSITION,
  CAMELIZE: () => CAMELIZE,
  CAPITALIZE: () => CAPITALIZE,
  CREATE_BLOCK: () => CREATE_BLOCK,
  CREATE_COMMENT: () => CREATE_COMMENT,
  CREATE_ELEMENT_BLOCK: () => CREATE_ELEMENT_BLOCK,
  CREATE_ELEMENT_VNODE: () => CREATE_ELEMENT_VNODE,
  CREATE_SLOTS: () => CREATE_SLOTS,
  CREATE_STATIC: () => CREATE_STATIC,
  CREATE_TEXT: () => CREATE_TEXT,
  CREATE_VNODE: () => CREATE_VNODE,
  DOMDirectiveTransforms: () => DOMDirectiveTransforms,
  DOMNodeTransforms: () => DOMNodeTransforms,
  FRAGMENT: () => FRAGMENT,
  GUARD_REACTIVE_PROPS: () => GUARD_REACTIVE_PROPS,
  IS_MEMO_SAME: () => IS_MEMO_SAME,
  IS_REF: () => IS_REF,
  KEEP_ALIVE: () => KEEP_ALIVE,
  MERGE_PROPS: () => MERGE_PROPS,
  NORMALIZE_CLASS: () => NORMALIZE_CLASS,
  NORMALIZE_PROPS: () => NORMALIZE_PROPS,
  NORMALIZE_STYLE: () => NORMALIZE_STYLE,
  OPEN_BLOCK: () => OPEN_BLOCK,
  POP_SCOPE_ID: () => POP_SCOPE_ID,
  PUSH_SCOPE_ID: () => PUSH_SCOPE_ID,
  RENDER_LIST: () => RENDER_LIST,
  RENDER_SLOT: () => RENDER_SLOT,
  RESOLVE_COMPONENT: () => RESOLVE_COMPONENT,
  RESOLVE_DIRECTIVE: () => RESOLVE_DIRECTIVE,
  RESOLVE_DYNAMIC_COMPONENT: () => RESOLVE_DYNAMIC_COMPONENT,
  RESOLVE_FILTER: () => RESOLVE_FILTER,
  SET_BLOCK_TRACKING: () => SET_BLOCK_TRACKING,
  SUSPENSE: () => SUSPENSE,
  TELEPORT: () => TELEPORT,
  TO_DISPLAY_STRING: () => TO_DISPLAY_STRING,
  TO_HANDLERS: () => TO_HANDLERS,
  TO_HANDLER_KEY: () => TO_HANDLER_KEY,
  TRANSITION: () => TRANSITION,
  TRANSITION_GROUP: () => TRANSITION_GROUP,
  TS_NODE_TYPES: () => TS_NODE_TYPES,
  UNREF: () => UNREF,
  V_MODEL_CHECKBOX: () => V_MODEL_CHECKBOX,
  V_MODEL_DYNAMIC: () => V_MODEL_DYNAMIC,
  V_MODEL_RADIO: () => V_MODEL_RADIO,
  V_MODEL_SELECT: () => V_MODEL_SELECT,
  V_MODEL_TEXT: () => V_MODEL_TEXT,
  V_ON_WITH_KEYS: () => V_ON_WITH_KEYS,
  V_ON_WITH_MODIFIERS: () => V_ON_WITH_MODIFIERS,
  V_SHOW: () => V_SHOW,
  WITH_CTX: () => WITH_CTX,
  WITH_DIRECTIVES: () => WITH_DIRECTIVES,
  WITH_MEMO: () => WITH_MEMO,
  advancePositionWithClone: () => advancePositionWithClone,
  advancePositionWithMutation: () => advancePositionWithMutation,
  assert: () => assert,
  baseCompile: () => baseCompile,
  baseParse: () => baseParse,
  buildDirectiveArgs: () => buildDirectiveArgs,
  buildProps: () => buildProps,
  buildSlots: () => buildSlots,
  checkCompatEnabled: () => checkCompatEnabled,
  compile: () => compile,
  convertToBlock: () => convertToBlock,
  createArrayExpression: () => createArrayExpression,
  createAssignmentExpression: () => createAssignmentExpression,
  createBlockStatement: () => createBlockStatement,
  createCacheExpression: () => createCacheExpression,
  createCallExpression: () => createCallExpression,
  createCompilerError: () => createCompilerError,
  createCompoundExpression: () => createCompoundExpression,
  createConditionalExpression: () => createConditionalExpression,
  createDOMCompilerError: () => createDOMCompilerError,
  createForLoopParams: () => createForLoopParams,
  createFunctionExpression: () => createFunctionExpression,
  createIfStatement: () => createIfStatement,
  createInterpolation: () => createInterpolation,
  createObjectExpression: () => createObjectExpression,
  createObjectProperty: () => createObjectProperty,
  createReturnStatement: () => createReturnStatement,
  createRoot: () => createRoot,
  createSequenceExpression: () => createSequenceExpression,
  createSimpleExpression: () => createSimpleExpression,
  createStructuralDirectiveTransform: () => createStructuralDirectiveTransform,
  createTemplateLiteral: () => createTemplateLiteral,
  createTransformContext: () => createTransformContext,
  createVNodeCall: () => createVNodeCall,
  extractIdentifiers: () => extractIdentifiers,
  findDir: () => findDir,
  findProp: () => findProp,
  generate: () => generate,
  generateCodeFrame: () => generateCodeFrame,
  getBaseTransformPreset: () => getBaseTransformPreset,
  getConstantType: () => getConstantType,
  getInnerRange: () => getInnerRange,
  getMemoedVNodeCall: () => getMemoedVNodeCall,
  getVNodeBlockHelper: () => getVNodeBlockHelper,
  getVNodeHelper: () => getVNodeHelper,
  hasDynamicKeyVBind: () => hasDynamicKeyVBind,
  hasScopeRef: () => hasScopeRef,
  helperNameMap: () => helperNameMap,
  injectProp: () => injectProp,
  isBuiltInType: () => isBuiltInType,
  isCoreComponent: () => isCoreComponent,
  isFunctionType: () => isFunctionType,
  isInDestructureAssignment: () => isInDestructureAssignment,
  isMemberExpression: () => isMemberExpression,
  isMemberExpressionBrowser: () => isMemberExpressionBrowser,
  isMemberExpressionNode: () => isMemberExpressionNode,
  isReferencedIdentifier: () => isReferencedIdentifier,
  isSimpleIdentifier: () => isSimpleIdentifier,
  isSlotOutlet: () => isSlotOutlet,
  isStaticArgOf: () => isStaticArgOf,
  isStaticExp: () => isStaticExp,
  isStaticProperty: () => isStaticProperty,
  isStaticPropertyKey: () => isStaticPropertyKey,
  isTemplateNode: () => isTemplateNode,
  isText: () => isText$1,
  isVSlot: () => isVSlot,
  locStub: () => locStub,
  noopDirectiveTransform: () => noopDirectiveTransform,
  parse: () => parse,
  parserOptions: () => parserOptions,
  processExpression: () => processExpression,
  processFor: () => processFor,
  processIf: () => processIf,
  processSlotOutlet: () => processSlotOutlet,
  registerRuntimeHelpers: () => registerRuntimeHelpers,
  resolveComponentType: () => resolveComponentType,
  stringifyExpression: () => stringifyExpression,
  toValidAssetId: () => toValidAssetId,
  trackSlotScopes: () => trackSlotScopes,
  trackVForSlotScopes: () => trackVForSlotScopes,
  transform: () => transform,
  transformBind: () => transformBind,
  transformElement: () => transformElement,
  transformExpression: () => transformExpression,
  transformModel: () => transformModel,
  transformOn: () => transformOn,
  transformStyle: () => transformStyle,
  traverseNode: () => traverseNode,
  walkBlockDeclarations: () => walkBlockDeclarations,
  walkFunctionParams: () => walkFunctionParams,
  walkIdentifiers: () => walkIdentifiers,
  warnDeprecation: () => warnDeprecation
});
function decodeHtmlBrowser(raw, asAttr = false) {
  if (!decoder) {
    decoder = document.createElement("div");
  }
  if (asAttr) {
    decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
    return decoder.children[0].getAttribute("foo");
  } else {
    decoder.innerHTML = raw;
    return decoder.textContent;
  }
}
function createDOMCompilerError(code, loc) {
  return createCompilerError(
    code,
    loc,
    true ? DOMErrorMessages : void 0
  );
}
function hasMultipleChildren(node) {
  const children = node.children = node.children.filter(
    (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())
  );
  const child = children[0];
  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
}
function compile(template, options = {}) {
  return baseCompile(
    template,
    extend({}, parserOptions, options, {
      nodeTransforms: [
        // ignore <script> and <tag>
        // this is not put inside DOMNodeTransforms because that list is used
        // by compiler-ssr to generate vnode fallback branches
        ignoreSideEffectTags,
        ...DOMNodeTransforms,
        ...options.nodeTransforms || []
      ],
      directiveTransforms: extend(
        {},
        DOMDirectiveTransforms,
        options.directiveTransforms || {}
      ),
      transformHoist: null
    })
  );
}
function parse(template, options = {}) {
  return baseParse(template, extend({}, parserOptions, options));
}
var V_MODEL_RADIO, V_MODEL_CHECKBOX, V_MODEL_TEXT, V_MODEL_SELECT, V_MODEL_DYNAMIC, V_ON_WITH_MODIFIERS, V_ON_WITH_KEYS, V_SHOW, TRANSITION, TRANSITION_GROUP, decoder, isRawTextContainer, parserOptions, transformStyle, parseInlineCSS, DOMErrorMessages, transformVHtml, transformVText, transformModel2, isEventOptionModifier, isNonKeyModifier, maybeKeyModifier, isKeyboardEvent, resolveModifiers, transformClick, transformOn2, transformShow, transformTransition, ignoreSideEffectTags, DOMNodeTransforms, DOMDirectiveTransforms;
var init_compiler_dom_esm_bundler = __esm({
  "node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js"() {
    init_compiler_core_esm_bundler();
    init_compiler_core_esm_bundler();
    init_shared_esm_bundler();
    V_MODEL_RADIO = Symbol(true ? `vModelRadio` : ``);
    V_MODEL_CHECKBOX = Symbol(true ? `vModelCheckbox` : ``);
    V_MODEL_TEXT = Symbol(true ? `vModelText` : ``);
    V_MODEL_SELECT = Symbol(true ? `vModelSelect` : ``);
    V_MODEL_DYNAMIC = Symbol(true ? `vModelDynamic` : ``);
    V_ON_WITH_MODIFIERS = Symbol(true ? `vOnModifiersGuard` : ``);
    V_ON_WITH_KEYS = Symbol(true ? `vOnKeysGuard` : ``);
    V_SHOW = Symbol(true ? `vShow` : ``);
    TRANSITION = Symbol(true ? `Transition` : ``);
    TRANSITION_GROUP = Symbol(true ? `TransitionGroup` : ``);
    registerRuntimeHelpers({
      [V_MODEL_RADIO]: `vModelRadio`,
      [V_MODEL_CHECKBOX]: `vModelCheckbox`,
      [V_MODEL_TEXT]: `vModelText`,
      [V_MODEL_SELECT]: `vModelSelect`,
      [V_MODEL_DYNAMIC]: `vModelDynamic`,
      [V_ON_WITH_MODIFIERS]: `withModifiers`,
      [V_ON_WITH_KEYS]: `withKeys`,
      [V_SHOW]: `vShow`,
      [TRANSITION]: `Transition`,
      [TRANSITION_GROUP]: `TransitionGroup`
    });
    isRawTextContainer = makeMap(
      "style,iframe,script,noscript",
      true
    );
    parserOptions = {
      isVoidTag,
      isNativeTag: (tag) => isHTMLTag(tag) || isSVGTag(tag),
      isPreTag: (tag) => tag === "pre",
      decodeEntities: decodeHtmlBrowser,
      isBuiltInComponent: (tag) => {
        if (isBuiltInType(tag, `Transition`)) {
          return TRANSITION;
        } else if (isBuiltInType(tag, `TransitionGroup`)) {
          return TRANSITION_GROUP;
        }
      },
      // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
      getNamespace(tag, parent) {
        let ns = parent ? parent.ns : 0;
        if (parent && ns === 2) {
          if (parent.tag === "annotation-xml") {
            if (tag === "svg") {
              return 1;
            }
            if (parent.props.some(
              (a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml")
            )) {
              ns = 0;
            }
          } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
            ns = 0;
          }
        } else if (parent && ns === 1) {
          if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
            ns = 0;
          }
        }
        if (ns === 0) {
          if (tag === "svg") {
            return 1;
          }
          if (tag === "math") {
            return 2;
          }
        }
        return ns;
      },
      // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments
      getTextMode({ tag, ns }) {
        if (ns === 0) {
          if (tag === "textarea" || tag === "title") {
            return 1;
          }
          if (isRawTextContainer(tag)) {
            return 2;
          }
        }
        return 0;
      }
    };
    transformStyle = (node) => {
      if (node.type === 1) {
        node.props.forEach((p, i) => {
          if (p.type === 6 && p.name === "style" && p.value) {
            node.props[i] = {
              type: 7,
              name: `bind`,
              arg: createSimpleExpression(`style`, true, p.loc),
              exp: parseInlineCSS(p.value.content, p.loc),
              modifiers: [],
              loc: p.loc
            };
          }
        });
      }
    };
    parseInlineCSS = (cssText, loc) => {
      const normalized = parseStringStyle(cssText);
      return createSimpleExpression(
        JSON.stringify(normalized),
        false,
        loc,
        3
      );
    };
    DOMErrorMessages = {
      [53]: `v-html is missing expression.`,
      [54]: `v-html will override element children.`,
      [55]: `v-text is missing expression.`,
      [56]: `v-text will override element children.`,
      [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
      [58]: `v-model argument is not supported on plain elements.`,
      [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
      [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
      [61]: `v-show is missing expression.`,
      [62]: `<Transition> expects exactly one child element or component.`,
      [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
    };
    transformVHtml = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(
          createDOMCompilerError(53, loc)
        );
      }
      if (node.children.length) {
        context.onError(
          createDOMCompilerError(54, loc)
        );
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(
            createSimpleExpression(`innerHTML`, true, loc),
            exp || createSimpleExpression("", true)
          )
        ]
      };
    };
    transformVText = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(
          createDOMCompilerError(55, loc)
        );
      }
      if (node.children.length) {
        context.onError(
          createDOMCompilerError(56, loc)
        );
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(
            createSimpleExpression(`textContent`, true),
            exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(
              context.helperString(TO_DISPLAY_STRING),
              [exp],
              loc
            ) : createSimpleExpression("", true)
          )
        ]
      };
    };
    transformModel2 = (dir, node, context) => {
      const baseResult = transformModel(dir, node, context);
      if (!baseResult.props.length || node.tagType === 1) {
        return baseResult;
      }
      if (dir.arg) {
        context.onError(
          createDOMCompilerError(
            58,
            dir.arg.loc
          )
        );
      }
      function checkDuplicatedValue() {
        const value = findProp(node, "value");
        if (value) {
          context.onError(
            createDOMCompilerError(
              60,
              value.loc
            )
          );
        }
      }
      const { tag } = node;
      const isCustomElement = context.isCustomElement(tag);
      if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT;
        let isInvalidType = false;
        if (tag === "input" || isCustomElement) {
          const type = findProp(node, `type`);
          if (type) {
            if (type.type === 7) {
              directiveToUse = V_MODEL_DYNAMIC;
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  directiveToUse = V_MODEL_RADIO;
                  break;
                case "checkbox":
                  directiveToUse = V_MODEL_CHECKBOX;
                  break;
                case "file":
                  isInvalidType = true;
                  context.onError(
                    createDOMCompilerError(
                      59,
                      dir.loc
                    )
                  );
                  break;
                default:
                  checkDuplicatedValue();
                  break;
              }
            }
          } else if (hasDynamicKeyVBind(node)) {
            directiveToUse = V_MODEL_DYNAMIC;
          } else {
            checkDuplicatedValue();
          }
        } else if (tag === "select") {
          directiveToUse = V_MODEL_SELECT;
        } else {
          checkDuplicatedValue();
        }
        if (!isInvalidType) {
          baseResult.needRuntime = context.helper(directiveToUse);
        }
      } else {
        context.onError(
          createDOMCompilerError(
            57,
            dir.loc
          )
        );
      }
      baseResult.props = baseResult.props.filter(
        (p) => !(p.key.type === 4 && p.key.content === "modelValue")
      );
      return baseResult;
    };
    isEventOptionModifier = makeMap(`passive,once,capture`);
    isNonKeyModifier = makeMap(
      // event propagation management
      `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
    );
    maybeKeyModifier = makeMap("left,right");
    isKeyboardEvent = makeMap(
      `onkeyup,onkeydown,onkeypress`,
      true
    );
    resolveModifiers = (key, modifiers, context, loc) => {
      const keyModifiers = [];
      const nonKeyModifiers = [];
      const eventOptionModifiers = [];
      for (let i = 0; i < modifiers.length; i++) {
        const modifier = modifiers[i];
        if (modifier === "native" && checkCompatEnabled(
          "COMPILER_V_ON_NATIVE",
          context,
          loc
        )) {
          eventOptionModifiers.push(modifier);
        } else if (isEventOptionModifier(modifier)) {
          eventOptionModifiers.push(modifier);
        } else {
          if (maybeKeyModifier(modifier)) {
            if (isStaticExp(key)) {
              if (isKeyboardEvent(key.content)) {
                keyModifiers.push(modifier);
              } else {
                nonKeyModifiers.push(modifier);
              }
            } else {
              keyModifiers.push(modifier);
              nonKeyModifiers.push(modifier);
            }
          } else {
            if (isNonKeyModifier(modifier)) {
              nonKeyModifiers.push(modifier);
            } else {
              keyModifiers.push(modifier);
            }
          }
        }
      }
      return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
      };
    };
    transformClick = (key, event) => {
      const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === "onclick";
      return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
      ]) : key;
    };
    transformOn2 = (dir, node, context) => {
      return transformOn(dir, node, context, (baseResult) => {
        const { modifiers } = dir;
        if (!modifiers.length)
          return baseResult;
        let { key, value: handlerExp } = baseResult.props[0];
        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
        if (nonKeyModifiers.includes("right")) {
          key = transformClick(key, `onContextmenu`);
        }
        if (nonKeyModifiers.includes("middle")) {
          key = transformClick(key, `onMouseup`);
        }
        if (nonKeyModifiers.length) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
          ]);
        }
        if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard
        (!isStaticExp(key) || isKeyboardEvent(key.content))) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
            handlerExp,
            JSON.stringify(keyModifiers)
          ]);
        }
        if (eventOptionModifiers.length) {
          const modifierPostfix = eventOptionModifiers.map(capitalize).join("");
          key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
        }
        return {
          props: [createObjectProperty(key, handlerExp)]
        };
      });
    };
    transformShow = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(
          createDOMCompilerError(61, loc)
        );
      }
      return {
        props: [],
        needRuntime: context.helper(V_SHOW)
      };
    };
    transformTransition = (node, context) => {
      if (node.type === 1 && node.tagType === 1) {
        const component = context.isBuiltInComponent(node.tag);
        if (component === TRANSITION) {
          return () => {
            if (!node.children.length) {
              return;
            }
            if (hasMultipleChildren(node)) {
              context.onError(
                createDOMCompilerError(
                  62,
                  {
                    start: node.children[0].loc.start,
                    end: node.children[node.children.length - 1].loc.end,
                    source: ""
                  }
                )
              );
            }
            const child = node.children[0];
            if (child.type === 1) {
              for (const p of child.props) {
                if (p.type === 7 && p.name === "show") {
                  node.props.push({
                    type: 6,
                    name: "persisted",
                    value: void 0,
                    loc: node.loc
                  });
                }
              }
            }
          };
        }
      }
    };
    ignoreSideEffectTags = (node, context) => {
      if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
        context.onError(
          createDOMCompilerError(
            63,
            node.loc
          )
        );
        context.removeNode();
      }
    };
    DOMNodeTransforms = [
      transformStyle,
      ...true ? [transformTransition] : []
    ];
    DOMDirectiveTransforms = {
      cloak: noopDirectiveTransform,
      html: transformVHtml,
      text: transformVText,
      model: transformModel2,
      // override compiler-core
      on: transformOn2,
      // override compiler-core
      show: transformShow
    };
  }
});

// node_modules/vue/dist/vue.cjs.js
var require_vue_cjs = __commonJS({
  "node_modules/vue/dist/vue.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var compilerDom = (init_compiler_dom_esm_bundler(), __toCommonJS(compiler_dom_esm_bundler_exports));
    var runtimeDom = (init_runtime_dom_esm_bundler(), __toCommonJS(runtime_dom_esm_bundler_exports));
    var shared = (init_shared_esm_bundler(), __toCommonJS(shared_esm_bundler_exports));
    function _interopNamespaceDefault(e) {
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        for (var k in e) {
          n[k] = e[k];
        }
      }
      n.default = e;
      return Object.freeze(n);
    }
    var runtimeDom__namespace = _interopNamespaceDefault(runtimeDom);
    var compileCache = /* @__PURE__ */ Object.create(null);
    function compileToFunction(template, options) {
      if (!shared.isString(template)) {
        if (template.nodeType) {
          template = template.innerHTML;
        } else {
          runtimeDom.warn(`invalid template option: `, template);
          return shared.NOOP;
        }
      }
      const key = template;
      const cached = compileCache[key];
      if (cached) {
        return cached;
      }
      if (template[0] === "#") {
        const el = document.querySelector(template);
        if (!el) {
          runtimeDom.warn(`Template element not found or is empty: ${template}`);
        }
        template = el ? el.innerHTML : ``;
      }
      const opts = shared.extend(
        {
          hoistStatic: true,
          onError,
          onWarn: (e) => onError(e, true)
        },
        options
      );
      if (!opts.isCustomElement && typeof customElements !== "undefined") {
        opts.isCustomElement = (tag) => !!customElements.get(tag);
      }
      const { code } = compilerDom.compile(template, opts);
      function onError(err, asWarning = false) {
        const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
        const codeFrame = err.loc && shared.generateCodeFrame(
          template,
          err.loc.start.offset,
          err.loc.end.offset
        );
        runtimeDom.warn(codeFrame ? `${message}
${codeFrame}` : message);
      }
      const render = new Function("Vue", code)(runtimeDom__namespace);
      render._rc = true;
      return compileCache[key] = render;
    }
    runtimeDom.registerRuntimeCompiler(compileToFunction);
    exports.compile = compileToFunction;
    Object.keys(runtimeDom).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        exports[k] = runtimeDom[k];
    });
  }
});

// node_modules/vue/index.js
var require_vue = __commonJS({
  "node_modules/vue/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_vue_cjs();
    }
  }
});

// node_modules/vuesax/dist/vuesax.js
var require_vuesax = __commonJS({
  "node_modules/vuesax/dist/vuesax.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_vue());
      else if (typeof define === "function" && define.amd)
        define("Vuesax", ["vue"], factory);
      else if (typeof exports === "object")
        exports["Vuesax"] = factory(require_vue());
      else
        root["Vuesax"] = factory(root["Vue"]);
    })(typeof self !== "undefined" ? self : exports, function(__WEBPACK_EXTERNAL_MODULE__6__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, (function(key2) {
                  return value[key2];
                }).bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "/dist/";
          return __webpack_require__(__webpack_require__.s = 44);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
              var desc = {};
              Object.keys(descriptor).forEach(function(key) {
                desc[key] = descriptor[key];
              });
              desc.enumerable = !!desc.enumerable;
              desc.configurable = !!desc.configurable;
              if ("value" in desc || desc.initializer) {
                desc.writable = true;
              }
              desc = decorators.slice().reverse().reduce(function(desc2, decorator) {
                return decorator(target, property, desc2) || desc2;
              }, desc);
              if (context && desc.initializer !== void 0) {
                desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                desc.initializer = void 0;
              }
              if (desc.initializer === void 0) {
                Object.defineProperty(target, property, desc);
                desc = null;
              }
              return desc;
            }
            module2.exports = _applyDecoratedDescriptor;
          },
          /* 1 */
          /***/
          function(module2, exports2) {
            function _initializerDefineProperty(target, property, descriptor, context) {
              if (!descriptor)
                return;
              Object.defineProperty(target, property, {
                enumerable: descriptor.enumerable,
                configurable: descriptor.configurable,
                writable: descriptor.writable,
                value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
              });
            }
            module2.exports = _initializerDefineProperty;
          },
          /* 2 */
          /***/
          function(module2, exports2) {
            function _assertThisInitialized(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            module2.exports = _assertThisInitialized;
          },
          /* 3 */
          /***/
          function(module2, exports2) {
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              subClass.__proto__ = superClass;
            }
            module2.exports = _inheritsLoose;
          },
          /* 4 */
          /***/
          function(module2, exports2) {
            function _initializerWarningHelper(descriptor, context) {
              throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.");
            }
            module2.exports = _initializerWarningHelper;
          },
          /* 5 */
          /***/
          function(module2, exports2) {
            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            module2.exports = _createClass;
          },
          /* 6 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE__6__;
          },
          /* 7 */
          /***/
          function(module2, exports2) {
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            module2.exports = _defineProperty;
          },
          /* 8 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 9 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            (function(global, module3) {
              var __WEBPACK_AMD_DEFINE_RESULT__;
              ;
              (function() {
                var undefined2;
                var VERSION = "4.17.19";
                var LARGE_ARRAY_SIZE = 200;
                var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function";
                var HASH_UNDEFINED = "__lodash_hash_undefined__";
                var MAX_MEMOIZE_SIZE = 500;
                var PLACEHOLDER = "__lodash_placeholder__";
                var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
                var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
                var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
                var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
                var HOT_COUNT = 800, HOT_SPAN = 16;
                var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
                var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
                var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
                var wrapFlags = [
                  ["ary", WRAP_ARY_FLAG],
                  ["bind", WRAP_BIND_FLAG],
                  ["bindKey", WRAP_BIND_KEY_FLAG],
                  ["curry", WRAP_CURRY_FLAG],
                  ["curryRight", WRAP_CURRY_RIGHT_FLAG],
                  ["flip", WRAP_FLIP_FLAG],
                  ["partial", WRAP_PARTIAL_FLAG],
                  ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
                  ["rearg", WRAP_REARG_FLAG]
                ];
                var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
                var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
                var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
                var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
                var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
                var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
                var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
                var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
                var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
                var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
                var reEscapeChar = /\\(\\)?/g;
                var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
                var reFlags = /\w*$/;
                var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
                var reIsBinary = /^0b[01]+$/i;
                var reIsHostCtor = /^\[object .+?Constructor\]$/;
                var reIsOctal = /^0o[0-7]+$/i;
                var reIsUint = /^(?:0|[1-9]\d*)$/;
                var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
                var reNoMatch = /($^)/;
                var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
                var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
                var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
                var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
                var reApos = RegExp(rsApos, "g");
                var reComboMark = RegExp(rsCombo, "g");
                var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
                var reUnicodeWord = RegExp([
                  rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
                  rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
                  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
                  rsUpper + "+" + rsOptContrUpper,
                  rsOrdUpper,
                  rsOrdLower,
                  rsDigits,
                  rsEmoji
                ].join("|"), "g");
                var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
                var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
                var contextProps = [
                  "Array",
                  "Buffer",
                  "DataView",
                  "Date",
                  "Error",
                  "Float32Array",
                  "Float64Array",
                  "Function",
                  "Int8Array",
                  "Int16Array",
                  "Int32Array",
                  "Map",
                  "Math",
                  "Object",
                  "Promise",
                  "RegExp",
                  "Set",
                  "String",
                  "Symbol",
                  "TypeError",
                  "Uint8Array",
                  "Uint8ClampedArray",
                  "Uint16Array",
                  "Uint32Array",
                  "WeakMap",
                  "_",
                  "clearTimeout",
                  "isFinite",
                  "parseInt",
                  "setTimeout"
                ];
                var templateCounter = -1;
                var typedArrayTags = {};
                typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
                typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
                var cloneableTags = {};
                cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
                var deburredLetters = {
                  // Latin-1 Supplement block.
                  "À": "A",
                  "Á": "A",
                  "Â": "A",
                  "Ã": "A",
                  "Ä": "A",
                  "Å": "A",
                  "à": "a",
                  "á": "a",
                  "â": "a",
                  "ã": "a",
                  "ä": "a",
                  "å": "a",
                  "Ç": "C",
                  "ç": "c",
                  "Ð": "D",
                  "ð": "d",
                  "È": "E",
                  "É": "E",
                  "Ê": "E",
                  "Ë": "E",
                  "è": "e",
                  "é": "e",
                  "ê": "e",
                  "ë": "e",
                  "Ì": "I",
                  "Í": "I",
                  "Î": "I",
                  "Ï": "I",
                  "ì": "i",
                  "í": "i",
                  "î": "i",
                  "ï": "i",
                  "Ñ": "N",
                  "ñ": "n",
                  "Ò": "O",
                  "Ó": "O",
                  "Ô": "O",
                  "Õ": "O",
                  "Ö": "O",
                  "Ø": "O",
                  "ò": "o",
                  "ó": "o",
                  "ô": "o",
                  "õ": "o",
                  "ö": "o",
                  "ø": "o",
                  "Ù": "U",
                  "Ú": "U",
                  "Û": "U",
                  "Ü": "U",
                  "ù": "u",
                  "ú": "u",
                  "û": "u",
                  "ü": "u",
                  "Ý": "Y",
                  "ý": "y",
                  "ÿ": "y",
                  "Æ": "Ae",
                  "æ": "ae",
                  "Þ": "Th",
                  "þ": "th",
                  "ß": "ss",
                  // Latin Extended-A block.
                  "Ā": "A",
                  "Ă": "A",
                  "Ą": "A",
                  "ā": "a",
                  "ă": "a",
                  "ą": "a",
                  "Ć": "C",
                  "Ĉ": "C",
                  "Ċ": "C",
                  "Č": "C",
                  "ć": "c",
                  "ĉ": "c",
                  "ċ": "c",
                  "č": "c",
                  "Ď": "D",
                  "Đ": "D",
                  "ď": "d",
                  "đ": "d",
                  "Ē": "E",
                  "Ĕ": "E",
                  "Ė": "E",
                  "Ę": "E",
                  "Ě": "E",
                  "ē": "e",
                  "ĕ": "e",
                  "ė": "e",
                  "ę": "e",
                  "ě": "e",
                  "Ĝ": "G",
                  "Ğ": "G",
                  "Ġ": "G",
                  "Ģ": "G",
                  "ĝ": "g",
                  "ğ": "g",
                  "ġ": "g",
                  "ģ": "g",
                  "Ĥ": "H",
                  "Ħ": "H",
                  "ĥ": "h",
                  "ħ": "h",
                  "Ĩ": "I",
                  "Ī": "I",
                  "Ĭ": "I",
                  "Į": "I",
                  "İ": "I",
                  "ĩ": "i",
                  "ī": "i",
                  "ĭ": "i",
                  "į": "i",
                  "ı": "i",
                  "Ĵ": "J",
                  "ĵ": "j",
                  "Ķ": "K",
                  "ķ": "k",
                  "ĸ": "k",
                  "Ĺ": "L",
                  "Ļ": "L",
                  "Ľ": "L",
                  "Ŀ": "L",
                  "Ł": "L",
                  "ĺ": "l",
                  "ļ": "l",
                  "ľ": "l",
                  "ŀ": "l",
                  "ł": "l",
                  "Ń": "N",
                  "Ņ": "N",
                  "Ň": "N",
                  "Ŋ": "N",
                  "ń": "n",
                  "ņ": "n",
                  "ň": "n",
                  "ŋ": "n",
                  "Ō": "O",
                  "Ŏ": "O",
                  "Ő": "O",
                  "ō": "o",
                  "ŏ": "o",
                  "ő": "o",
                  "Ŕ": "R",
                  "Ŗ": "R",
                  "Ř": "R",
                  "ŕ": "r",
                  "ŗ": "r",
                  "ř": "r",
                  "Ś": "S",
                  "Ŝ": "S",
                  "Ş": "S",
                  "Š": "S",
                  "ś": "s",
                  "ŝ": "s",
                  "ş": "s",
                  "š": "s",
                  "Ţ": "T",
                  "Ť": "T",
                  "Ŧ": "T",
                  "ţ": "t",
                  "ť": "t",
                  "ŧ": "t",
                  "Ũ": "U",
                  "Ū": "U",
                  "Ŭ": "U",
                  "Ů": "U",
                  "Ű": "U",
                  "Ų": "U",
                  "ũ": "u",
                  "ū": "u",
                  "ŭ": "u",
                  "ů": "u",
                  "ű": "u",
                  "ų": "u",
                  "Ŵ": "W",
                  "ŵ": "w",
                  "Ŷ": "Y",
                  "ŷ": "y",
                  "Ÿ": "Y",
                  "Ź": "Z",
                  "Ż": "Z",
                  "Ž": "Z",
                  "ź": "z",
                  "ż": "z",
                  "ž": "z",
                  "Ĳ": "IJ",
                  "ĳ": "ij",
                  "Œ": "Oe",
                  "œ": "oe",
                  "ŉ": "'n",
                  "ſ": "s"
                };
                var htmlEscapes = {
                  "&": "&amp;",
                  "<": "&lt;",
                  ">": "&gt;",
                  '"': "&quot;",
                  "'": "&#39;"
                };
                var htmlUnescapes = {
                  "&amp;": "&",
                  "&lt;": "<",
                  "&gt;": ">",
                  "&quot;": '"',
                  "&#39;": "'"
                };
                var stringEscapes = {
                  "\\": "\\",
                  "'": "'",
                  "\n": "n",
                  "\r": "r",
                  "\u2028": "u2028",
                  "\u2029": "u2029"
                };
                var freeParseFloat = parseFloat, freeParseInt = parseInt;
                var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
                var freeSelf = typeof self == "object" && self && self.Object === Object && self;
                var root = freeGlobal || freeSelf || Function("return this")();
                var freeExports = exports2 && !exports2.nodeType && exports2;
                var freeModule = freeExports && typeof module3 == "object" && module3 && !module3.nodeType && module3;
                var moduleExports = freeModule && freeModule.exports === freeExports;
                var freeProcess = moduleExports && freeGlobal.process;
                var nodeUtil = function() {
                  try {
                    var types = freeModule && freeModule.require && freeModule.require("util").types;
                    if (types) {
                      return types;
                    }
                    return freeProcess && freeProcess.binding && freeProcess.binding("util");
                  } catch (e) {
                  }
                }();
                var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
                function apply(func, thisArg, args) {
                  switch (args.length) {
                    case 0:
                      return func.call(thisArg);
                    case 1:
                      return func.call(thisArg, args[0]);
                    case 2:
                      return func.call(thisArg, args[0], args[1]);
                    case 3:
                      return func.call(thisArg, args[0], args[1], args[2]);
                  }
                  return func.apply(thisArg, args);
                }
                function arrayAggregator(array, setter, iteratee, accumulator) {
                  var index = -1, length = array == null ? 0 : array.length;
                  while (++index < length) {
                    var value = array[index];
                    setter(accumulator, value, iteratee(value), array);
                  }
                  return accumulator;
                }
                function arrayEach(array, iteratee) {
                  var index = -1, length = array == null ? 0 : array.length;
                  while (++index < length) {
                    if (iteratee(array[index], index, array) === false) {
                      break;
                    }
                  }
                  return array;
                }
                function arrayEachRight(array, iteratee) {
                  var length = array == null ? 0 : array.length;
                  while (length--) {
                    if (iteratee(array[length], length, array) === false) {
                      break;
                    }
                  }
                  return array;
                }
                function arrayEvery(array, predicate) {
                  var index = -1, length = array == null ? 0 : array.length;
                  while (++index < length) {
                    if (!predicate(array[index], index, array)) {
                      return false;
                    }
                  }
                  return true;
                }
                function arrayFilter(array, predicate) {
                  var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
                  while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                      result[resIndex++] = value;
                    }
                  }
                  return result;
                }
                function arrayIncludes(array, value) {
                  var length = array == null ? 0 : array.length;
                  return !!length && baseIndexOf(array, value, 0) > -1;
                }
                function arrayIncludesWith(array, value, comparator) {
                  var index = -1, length = array == null ? 0 : array.length;
                  while (++index < length) {
                    if (comparator(value, array[index])) {
                      return true;
                    }
                  }
                  return false;
                }
                function arrayMap(array, iteratee) {
                  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
                  while (++index < length) {
                    result[index] = iteratee(array[index], index, array);
                  }
                  return result;
                }
                function arrayPush(array, values) {
                  var index = -1, length = values.length, offset = array.length;
                  while (++index < length) {
                    array[offset + index] = values[index];
                  }
                  return array;
                }
                function arrayReduce(array, iteratee, accumulator, initAccum) {
                  var index = -1, length = array == null ? 0 : array.length;
                  if (initAccum && length) {
                    accumulator = array[++index];
                  }
                  while (++index < length) {
                    accumulator = iteratee(accumulator, array[index], index, array);
                  }
                  return accumulator;
                }
                function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                  var length = array == null ? 0 : array.length;
                  if (initAccum && length) {
                    accumulator = array[--length];
                  }
                  while (length--) {
                    accumulator = iteratee(accumulator, array[length], length, array);
                  }
                  return accumulator;
                }
                function arraySome(array, predicate) {
                  var index = -1, length = array == null ? 0 : array.length;
                  while (++index < length) {
                    if (predicate(array[index], index, array)) {
                      return true;
                    }
                  }
                  return false;
                }
                var asciiSize = baseProperty("length");
                function asciiToArray(string) {
                  return string.split("");
                }
                function asciiWords(string) {
                  return string.match(reAsciiWord) || [];
                }
                function baseFindKey(collection, predicate, eachFunc) {
                  var result;
                  eachFunc(collection, function(value, key, collection2) {
                    if (predicate(value, key, collection2)) {
                      result = key;
                      return false;
                    }
                  });
                  return result;
                }
                function baseFindIndex(array, predicate, fromIndex, fromRight) {
                  var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
                  while (fromRight ? index-- : ++index < length) {
                    if (predicate(array[index], index, array)) {
                      return index;
                    }
                  }
                  return -1;
                }
                function baseIndexOf(array, value, fromIndex) {
                  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
                }
                function baseIndexOfWith(array, value, fromIndex, comparator) {
                  var index = fromIndex - 1, length = array.length;
                  while (++index < length) {
                    if (comparator(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }
                function baseIsNaN(value) {
                  return value !== value;
                }
                function baseMean(array, iteratee) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSum(array, iteratee) / length : NAN;
                }
                function baseProperty(key) {
                  return function(object) {
                    return object == null ? undefined2 : object[key];
                  };
                }
                function basePropertyOf(object) {
                  return function(key) {
                    return object == null ? undefined2 : object[key];
                  };
                }
                function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                  eachFunc(collection, function(value, index, collection2) {
                    accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
                  });
                  return accumulator;
                }
                function baseSortBy(array, comparer) {
                  var length = array.length;
                  array.sort(comparer);
                  while (length--) {
                    array[length] = array[length].value;
                  }
                  return array;
                }
                function baseSum(array, iteratee) {
                  var result, index = -1, length = array.length;
                  while (++index < length) {
                    var current = iteratee(array[index]);
                    if (current !== undefined2) {
                      result = result === undefined2 ? current : result + current;
                    }
                  }
                  return result;
                }
                function baseTimes(n, iteratee) {
                  var index = -1, result = Array(n);
                  while (++index < n) {
                    result[index] = iteratee(index);
                  }
                  return result;
                }
                function baseToPairs(object, props) {
                  return arrayMap(props, function(key) {
                    return [key, object[key]];
                  });
                }
                function baseUnary(func) {
                  return function(value) {
                    return func(value);
                  };
                }
                function baseValues(object, props) {
                  return arrayMap(props, function(key) {
                    return object[key];
                  });
                }
                function cacheHas(cache, key) {
                  return cache.has(key);
                }
                function charsStartIndex(strSymbols, chrSymbols) {
                  var index = -1, length = strSymbols.length;
                  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
                  }
                  return index;
                }
                function charsEndIndex(strSymbols, chrSymbols) {
                  var index = strSymbols.length;
                  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
                  }
                  return index;
                }
                function countHolders(array, placeholder) {
                  var length = array.length, result = 0;
                  while (length--) {
                    if (array[length] === placeholder) {
                      ++result;
                    }
                  }
                  return result;
                }
                var deburrLetter = basePropertyOf(deburredLetters);
                var escapeHtmlChar = basePropertyOf(htmlEscapes);
                function escapeStringChar(chr) {
                  return "\\" + stringEscapes[chr];
                }
                function getValue(object, key) {
                  return object == null ? undefined2 : object[key];
                }
                function hasUnicode(string) {
                  return reHasUnicode.test(string);
                }
                function hasUnicodeWord(string) {
                  return reHasUnicodeWord.test(string);
                }
                function iteratorToArray(iterator) {
                  var data, result = [];
                  while (!(data = iterator.next()).done) {
                    result.push(data.value);
                  }
                  return result;
                }
                function mapToArray(map) {
                  var index = -1, result = Array(map.size);
                  map.forEach(function(value, key) {
                    result[++index] = [key, value];
                  });
                  return result;
                }
                function overArg(func, transform2) {
                  return function(arg) {
                    return func(transform2(arg));
                  };
                }
                function replaceHolders(array, placeholder) {
                  var index = -1, length = array.length, resIndex = 0, result = [];
                  while (++index < length) {
                    var value = array[index];
                    if (value === placeholder || value === PLACEHOLDER) {
                      array[index] = PLACEHOLDER;
                      result[resIndex++] = index;
                    }
                  }
                  return result;
                }
                function setToArray(set) {
                  var index = -1, result = Array(set.size);
                  set.forEach(function(value) {
                    result[++index] = value;
                  });
                  return result;
                }
                function setToPairs(set) {
                  var index = -1, result = Array(set.size);
                  set.forEach(function(value) {
                    result[++index] = [value, value];
                  });
                  return result;
                }
                function strictIndexOf(array, value, fromIndex) {
                  var index = fromIndex - 1, length = array.length;
                  while (++index < length) {
                    if (array[index] === value) {
                      return index;
                    }
                  }
                  return -1;
                }
                function strictLastIndexOf(array, value, fromIndex) {
                  var index = fromIndex + 1;
                  while (index--) {
                    if (array[index] === value) {
                      return index;
                    }
                  }
                  return index;
                }
                function stringSize(string) {
                  return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
                }
                function stringToArray(string) {
                  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
                }
                var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
                function unicodeSize(string) {
                  var result = reUnicode.lastIndex = 0;
                  while (reUnicode.test(string)) {
                    ++result;
                  }
                  return result;
                }
                function unicodeToArray(string) {
                  return string.match(reUnicode) || [];
                }
                function unicodeWords(string) {
                  return string.match(reUnicodeWord) || [];
                }
                var runInContext = function runInContext2(context) {
                  context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
                  var Array2 = context.Array, Date = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError = context.TypeError;
                  var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
                  var coreJsData = context["__core-js_shared__"];
                  var funcToString = funcProto.toString;
                  var hasOwnProperty = objectProto.hasOwnProperty;
                  var idCounter = 0;
                  var maskSrcKey = function() {
                    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
                    return uid ? "Symbol(src)_1." + uid : "";
                  }();
                  var nativeObjectToString = objectProto.toString;
                  var objectCtorString = funcToString.call(Object2);
                  var oldDash = root._;
                  var reIsNative = RegExp2(
                    "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
                  );
                  var Buffer = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
                  var defineProperty = function() {
                    try {
                      var func = getNative(Object2, "defineProperty");
                      func({}, "", {});
                      return func;
                    } catch (e) {
                    }
                  }();
                  var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
                  var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
                  var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
                  var metaMap = WeakMap2 && new WeakMap2();
                  var realNames = {};
                  var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
                  var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
                  function lodash(value) {
                    if (isObjectLike(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
                      if (value instanceof LodashWrapper) {
                        return value;
                      }
                      if (hasOwnProperty.call(value, "__wrapped__")) {
                        return wrapperClone(value);
                      }
                    }
                    return new LodashWrapper(value);
                  }
                  var baseCreate = function() {
                    function object() {
                    }
                    return function(proto) {
                      if (!isObject2(proto)) {
                        return {};
                      }
                      if (objectCreate) {
                        return objectCreate(proto);
                      }
                      object.prototype = proto;
                      var result2 = new object();
                      object.prototype = undefined2;
                      return result2;
                    };
                  }();
                  function baseLodash() {
                  }
                  function LodashWrapper(value, chainAll) {
                    this.__wrapped__ = value;
                    this.__actions__ = [];
                    this.__chain__ = !!chainAll;
                    this.__index__ = 0;
                    this.__values__ = undefined2;
                  }
                  lodash.templateSettings = {
                    /**
                     * Used to detect `data` property values to be HTML-escaped.
                     *
                     * @memberOf _.templateSettings
                     * @type {RegExp}
                     */
                    "escape": reEscape,
                    /**
                     * Used to detect code to be evaluated.
                     *
                     * @memberOf _.templateSettings
                     * @type {RegExp}
                     */
                    "evaluate": reEvaluate,
                    /**
                     * Used to detect `data` property values to inject.
                     *
                     * @memberOf _.templateSettings
                     * @type {RegExp}
                     */
                    "interpolate": reInterpolate,
                    /**
                     * Used to reference the data object in the template text.
                     *
                     * @memberOf _.templateSettings
                     * @type {string}
                     */
                    "variable": "",
                    /**
                     * Used to import variables into the compiled template.
                     *
                     * @memberOf _.templateSettings
                     * @type {Object}
                     */
                    "imports": {
                      /**
                       * A reference to the `lodash` function.
                       *
                       * @memberOf _.templateSettings.imports
                       * @type {Function}
                       */
                      "_": lodash
                    }
                  };
                  lodash.prototype = baseLodash.prototype;
                  lodash.prototype.constructor = lodash;
                  LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                  LodashWrapper.prototype.constructor = LodashWrapper;
                  function LazyWrapper(value) {
                    this.__wrapped__ = value;
                    this.__actions__ = [];
                    this.__dir__ = 1;
                    this.__filtered__ = false;
                    this.__iteratees__ = [];
                    this.__takeCount__ = MAX_ARRAY_LENGTH;
                    this.__views__ = [];
                  }
                  function lazyClone() {
                    var result2 = new LazyWrapper(this.__wrapped__);
                    result2.__actions__ = copyArray(this.__actions__);
                    result2.__dir__ = this.__dir__;
                    result2.__filtered__ = this.__filtered__;
                    result2.__iteratees__ = copyArray(this.__iteratees__);
                    result2.__takeCount__ = this.__takeCount__;
                    result2.__views__ = copyArray(this.__views__);
                    return result2;
                  }
                  function lazyReverse() {
                    if (this.__filtered__) {
                      var result2 = new LazyWrapper(this);
                      result2.__dir__ = -1;
                      result2.__filtered__ = true;
                    } else {
                      result2 = this.clone();
                      result2.__dir__ *= -1;
                    }
                    return result2;
                  }
                  function lazyValue() {
                    var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
                    if (!isArr || !isRight && arrLength == length && takeCount == length) {
                      return baseWrapperValue(array, this.__actions__);
                    }
                    var result2 = [];
                    outer:
                      while (length-- && resIndex < takeCount) {
                        index += dir;
                        var iterIndex = -1, value = array[index];
                        while (++iterIndex < iterLength) {
                          var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                          if (type == LAZY_MAP_FLAG) {
                            value = computed;
                          } else if (!computed) {
                            if (type == LAZY_FILTER_FLAG) {
                              continue outer;
                            } else {
                              break outer;
                            }
                          }
                        }
                        result2[resIndex++] = value;
                      }
                    return result2;
                  }
                  LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                  LazyWrapper.prototype.constructor = LazyWrapper;
                  function Hash(entries) {
                    var index = -1, length = entries == null ? 0 : entries.length;
                    this.clear();
                    while (++index < length) {
                      var entry = entries[index];
                      this.set(entry[0], entry[1]);
                    }
                  }
                  function hashClear() {
                    this.__data__ = nativeCreate ? nativeCreate(null) : {};
                    this.size = 0;
                  }
                  function hashDelete(key) {
                    var result2 = this.has(key) && delete this.__data__[key];
                    this.size -= result2 ? 1 : 0;
                    return result2;
                  }
                  function hashGet(key) {
                    var data = this.__data__;
                    if (nativeCreate) {
                      var result2 = data[key];
                      return result2 === HASH_UNDEFINED ? undefined2 : result2;
                    }
                    return hasOwnProperty.call(data, key) ? data[key] : undefined2;
                  }
                  function hashHas(key) {
                    var data = this.__data__;
                    return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
                  }
                  function hashSet(key, value) {
                    var data = this.__data__;
                    this.size += this.has(key) ? 0 : 1;
                    data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
                    return this;
                  }
                  Hash.prototype.clear = hashClear;
                  Hash.prototype["delete"] = hashDelete;
                  Hash.prototype.get = hashGet;
                  Hash.prototype.has = hashHas;
                  Hash.prototype.set = hashSet;
                  function ListCache(entries) {
                    var index = -1, length = entries == null ? 0 : entries.length;
                    this.clear();
                    while (++index < length) {
                      var entry = entries[index];
                      this.set(entry[0], entry[1]);
                    }
                  }
                  function listCacheClear() {
                    this.__data__ = [];
                    this.size = 0;
                  }
                  function listCacheDelete(key) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    if (index < 0) {
                      return false;
                    }
                    var lastIndex = data.length - 1;
                    if (index == lastIndex) {
                      data.pop();
                    } else {
                      splice.call(data, index, 1);
                    }
                    --this.size;
                    return true;
                  }
                  function listCacheGet(key) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    return index < 0 ? undefined2 : data[index][1];
                  }
                  function listCacheHas(key) {
                    return assocIndexOf(this.__data__, key) > -1;
                  }
                  function listCacheSet(key, value) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    if (index < 0) {
                      ++this.size;
                      data.push([key, value]);
                    } else {
                      data[index][1] = value;
                    }
                    return this;
                  }
                  ListCache.prototype.clear = listCacheClear;
                  ListCache.prototype["delete"] = listCacheDelete;
                  ListCache.prototype.get = listCacheGet;
                  ListCache.prototype.has = listCacheHas;
                  ListCache.prototype.set = listCacheSet;
                  function MapCache(entries) {
                    var index = -1, length = entries == null ? 0 : entries.length;
                    this.clear();
                    while (++index < length) {
                      var entry = entries[index];
                      this.set(entry[0], entry[1]);
                    }
                  }
                  function mapCacheClear() {
                    this.size = 0;
                    this.__data__ = {
                      "hash": new Hash(),
                      "map": new (Map2 || ListCache)(),
                      "string": new Hash()
                    };
                  }
                  function mapCacheDelete(key) {
                    var result2 = getMapData(this, key)["delete"](key);
                    this.size -= result2 ? 1 : 0;
                    return result2;
                  }
                  function mapCacheGet(key) {
                    return getMapData(this, key).get(key);
                  }
                  function mapCacheHas(key) {
                    return getMapData(this, key).has(key);
                  }
                  function mapCacheSet(key, value) {
                    var data = getMapData(this, key), size2 = data.size;
                    data.set(key, value);
                    this.size += data.size == size2 ? 0 : 1;
                    return this;
                  }
                  MapCache.prototype.clear = mapCacheClear;
                  MapCache.prototype["delete"] = mapCacheDelete;
                  MapCache.prototype.get = mapCacheGet;
                  MapCache.prototype.has = mapCacheHas;
                  MapCache.prototype.set = mapCacheSet;
                  function SetCache(values2) {
                    var index = -1, length = values2 == null ? 0 : values2.length;
                    this.__data__ = new MapCache();
                    while (++index < length) {
                      this.add(values2[index]);
                    }
                  }
                  function setCacheAdd(value) {
                    this.__data__.set(value, HASH_UNDEFINED);
                    return this;
                  }
                  function setCacheHas(value) {
                    return this.__data__.has(value);
                  }
                  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                  SetCache.prototype.has = setCacheHas;
                  function Stack(entries) {
                    var data = this.__data__ = new ListCache(entries);
                    this.size = data.size;
                  }
                  function stackClear() {
                    this.__data__ = new ListCache();
                    this.size = 0;
                  }
                  function stackDelete(key) {
                    var data = this.__data__, result2 = data["delete"](key);
                    this.size = data.size;
                    return result2;
                  }
                  function stackGet(key) {
                    return this.__data__.get(key);
                  }
                  function stackHas(key) {
                    return this.__data__.has(key);
                  }
                  function stackSet(key, value) {
                    var data = this.__data__;
                    if (data instanceof ListCache) {
                      var pairs = data.__data__;
                      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                        pairs.push([key, value]);
                        this.size = ++data.size;
                        return this;
                      }
                      data = this.__data__ = new MapCache(pairs);
                    }
                    data.set(key, value);
                    this.size = data.size;
                    return this;
                  }
                  Stack.prototype.clear = stackClear;
                  Stack.prototype["delete"] = stackDelete;
                  Stack.prototype.get = stackGet;
                  Stack.prototype.has = stackHas;
                  Stack.prototype.set = stackSet;
                  function arrayLikeKeys(value, inherited) {
                    var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
                    for (var key in value) {
                      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
                      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
                      isIndex(key, length)))) {
                        result2.push(key);
                      }
                    }
                    return result2;
                  }
                  function arraySample(array) {
                    var length = array.length;
                    return length ? array[baseRandom(0, length - 1)] : undefined2;
                  }
                  function arraySampleSize(array, n) {
                    return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                  }
                  function arrayShuffle(array) {
                    return shuffleSelf(copyArray(array));
                  }
                  function assignMergeValue(object, key, value) {
                    if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
                      baseAssignValue(object, key, value);
                    }
                  }
                  function assignValue(object, key, value) {
                    var objValue = object[key];
                    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
                      baseAssignValue(object, key, value);
                    }
                  }
                  function assocIndexOf(array, key) {
                    var length = array.length;
                    while (length--) {
                      if (eq(array[length][0], key)) {
                        return length;
                      }
                    }
                    return -1;
                  }
                  function baseAggregator(collection, setter, iteratee2, accumulator) {
                    baseEach(collection, function(value, key, collection2) {
                      setter(accumulator, value, iteratee2(value), collection2);
                    });
                    return accumulator;
                  }
                  function baseAssign(object, source) {
                    return object && copyObject(source, keys(source), object);
                  }
                  function baseAssignIn(object, source) {
                    return object && copyObject(source, keysIn(source), object);
                  }
                  function baseAssignValue(object, key, value) {
                    if (key == "__proto__" && defineProperty) {
                      defineProperty(object, key, {
                        "configurable": true,
                        "enumerable": true,
                        "value": value,
                        "writable": true
                      });
                    } else {
                      object[key] = value;
                    }
                  }
                  function baseAt(object, paths) {
                    var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
                    while (++index < length) {
                      result2[index] = skip ? undefined2 : get(object, paths[index]);
                    }
                    return result2;
                  }
                  function baseClamp(number, lower, upper) {
                    if (number === number) {
                      if (upper !== undefined2) {
                        number = number <= upper ? number : upper;
                      }
                      if (lower !== undefined2) {
                        number = number >= lower ? number : lower;
                      }
                    }
                    return number;
                  }
                  function baseClone(value, bitmask, customizer, key, object, stack) {
                    var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
                    if (customizer) {
                      result2 = object ? customizer(value, key, object, stack) : customizer(value);
                    }
                    if (result2 !== undefined2) {
                      return result2;
                    }
                    if (!isObject2(value)) {
                      return value;
                    }
                    var isArr = isArray2(value);
                    if (isArr) {
                      result2 = initCloneArray(value);
                      if (!isDeep) {
                        return copyArray(value, result2);
                      }
                    } else {
                      var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                      if (isBuffer(value)) {
                        return cloneBuffer(value, isDeep);
                      }
                      if (tag == objectTag || tag == argsTag || isFunc && !object) {
                        result2 = isFlat || isFunc ? {} : initCloneObject(value);
                        if (!isDeep) {
                          return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                        }
                      } else {
                        if (!cloneableTags[tag]) {
                          return object ? value : {};
                        }
                        result2 = initCloneByTag(value, tag, isDeep);
                      }
                    }
                    stack || (stack = new Stack());
                    var stacked = stack.get(value);
                    if (stacked) {
                      return stacked;
                    }
                    stack.set(value, result2);
                    if (isSet(value)) {
                      value.forEach(function(subValue) {
                        result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                      });
                    } else if (isMap(value)) {
                      value.forEach(function(subValue, key2) {
                        result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
                      });
                    }
                    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
                    var props = isArr ? undefined2 : keysFunc(value);
                    arrayEach(props || value, function(subValue, key2) {
                      if (props) {
                        key2 = subValue;
                        subValue = value[key2];
                      }
                      assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
                    });
                    return result2;
                  }
                  function baseConforms(source) {
                    var props = keys(source);
                    return function(object) {
                      return baseConformsTo(object, source, props);
                    };
                  }
                  function baseConformsTo(object, source, props) {
                    var length = props.length;
                    if (object == null) {
                      return !length;
                    }
                    object = Object2(object);
                    while (length--) {
                      var key = props[length], predicate = source[key], value = object[key];
                      if (value === undefined2 && !(key in object) || !predicate(value)) {
                        return false;
                      }
                    }
                    return true;
                  }
                  function baseDelay(func, wait, args) {
                    if (typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return setTimeout2(function() {
                      func.apply(undefined2, args);
                    }, wait);
                  }
                  function baseDifference(array, values2, iteratee2, comparator) {
                    var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
                    if (!length) {
                      return result2;
                    }
                    if (iteratee2) {
                      values2 = arrayMap(values2, baseUnary(iteratee2));
                    }
                    if (comparator) {
                      includes2 = arrayIncludesWith;
                      isCommon = false;
                    } else if (values2.length >= LARGE_ARRAY_SIZE) {
                      includes2 = cacheHas;
                      isCommon = false;
                      values2 = new SetCache(values2);
                    }
                    outer:
                      while (++index < length) {
                        var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                        value = comparator || value !== 0 ? value : 0;
                        if (isCommon && computed === computed) {
                          var valuesIndex = valuesLength;
                          while (valuesIndex--) {
                            if (values2[valuesIndex] === computed) {
                              continue outer;
                            }
                          }
                          result2.push(value);
                        } else if (!includes2(values2, computed, comparator)) {
                          result2.push(value);
                        }
                      }
                    return result2;
                  }
                  var baseEach = createBaseEach(baseForOwn);
                  var baseEachRight = createBaseEach(baseForOwnRight, true);
                  function baseEvery(collection, predicate) {
                    var result2 = true;
                    baseEach(collection, function(value, index, collection2) {
                      result2 = !!predicate(value, index, collection2);
                      return result2;
                    });
                    return result2;
                  }
                  function baseExtremum(array, iteratee2, comparator) {
                    var index = -1, length = array.length;
                    while (++index < length) {
                      var value = array[index], current = iteratee2(value);
                      if (current != null && (computed === undefined2 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
                        var computed = current, result2 = value;
                      }
                    }
                    return result2;
                  }
                  function baseFill(array, value, start, end) {
                    var length = array.length;
                    start = toInteger(start);
                    if (start < 0) {
                      start = -start > length ? 0 : length + start;
                    }
                    end = end === undefined2 || end > length ? length : toInteger(end);
                    if (end < 0) {
                      end += length;
                    }
                    end = start > end ? 0 : toLength(end);
                    while (start < end) {
                      array[start++] = value;
                    }
                    return array;
                  }
                  function baseFilter(collection, predicate) {
                    var result2 = [];
                    baseEach(collection, function(value, index, collection2) {
                      if (predicate(value, index, collection2)) {
                        result2.push(value);
                      }
                    });
                    return result2;
                  }
                  function baseFlatten(array, depth, predicate, isStrict, result2) {
                    var index = -1, length = array.length;
                    predicate || (predicate = isFlattenable);
                    result2 || (result2 = []);
                    while (++index < length) {
                      var value = array[index];
                      if (depth > 0 && predicate(value)) {
                        if (depth > 1) {
                          baseFlatten(value, depth - 1, predicate, isStrict, result2);
                        } else {
                          arrayPush(result2, value);
                        }
                      } else if (!isStrict) {
                        result2[result2.length] = value;
                      }
                    }
                    return result2;
                  }
                  var baseFor = createBaseFor();
                  var baseForRight = createBaseFor(true);
                  function baseForOwn(object, iteratee2) {
                    return object && baseFor(object, iteratee2, keys);
                  }
                  function baseForOwnRight(object, iteratee2) {
                    return object && baseForRight(object, iteratee2, keys);
                  }
                  function baseFunctions(object, props) {
                    return arrayFilter(props, function(key) {
                      return isFunction(object[key]);
                    });
                  }
                  function baseGet(object, path) {
                    path = castPath(path, object);
                    var index = 0, length = path.length;
                    while (object != null && index < length) {
                      object = object[toKey(path[index++])];
                    }
                    return index && index == length ? object : undefined2;
                  }
                  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                    var result2 = keysFunc(object);
                    return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
                  }
                  function baseGetTag(value) {
                    if (value == null) {
                      return value === undefined2 ? undefinedTag : nullTag;
                    }
                    return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
                  }
                  function baseGt(value, other) {
                    return value > other;
                  }
                  function baseHas(object, key) {
                    return object != null && hasOwnProperty.call(object, key);
                  }
                  function baseHasIn(object, key) {
                    return object != null && key in Object2(object);
                  }
                  function baseInRange(number, start, end) {
                    return number >= nativeMin(start, end) && number < nativeMax(start, end);
                  }
                  function baseIntersection(arrays, iteratee2, comparator) {
                    var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
                    while (othIndex--) {
                      var array = arrays[othIndex];
                      if (othIndex && iteratee2) {
                        array = arrayMap(array, baseUnary(iteratee2));
                      }
                      maxLength = nativeMin(array.length, maxLength);
                      caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
                    }
                    array = arrays[0];
                    var index = -1, seen2 = caches[0];
                    outer:
                      while (++index < length && result2.length < maxLength) {
                        var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                        value = comparator || value !== 0 ? value : 0;
                        if (!(seen2 ? cacheHas(seen2, computed) : includes2(result2, computed, comparator))) {
                          othIndex = othLength;
                          while (--othIndex) {
                            var cache = caches[othIndex];
                            if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                              continue outer;
                            }
                          }
                          if (seen2) {
                            seen2.push(computed);
                          }
                          result2.push(value);
                        }
                      }
                    return result2;
                  }
                  function baseInverter(object, setter, iteratee2, accumulator) {
                    baseForOwn(object, function(value, key, object2) {
                      setter(accumulator, iteratee2(value), key, object2);
                    });
                    return accumulator;
                  }
                  function baseInvoke(object, path, args) {
                    path = castPath(path, object);
                    object = parent(object, path);
                    var func = object == null ? object : object[toKey(last2(path))];
                    return func == null ? undefined2 : apply(func, object, args);
                  }
                  function baseIsArguments(value) {
                    return isObjectLike(value) && baseGetTag(value) == argsTag;
                  }
                  function baseIsArrayBuffer(value) {
                    return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                  }
                  function baseIsDate(value) {
                    return isObjectLike(value) && baseGetTag(value) == dateTag;
                  }
                  function baseIsEqual(value, other, bitmask, customizer, stack) {
                    if (value === other) {
                      return true;
                    }
                    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
                      return value !== value && other !== other;
                    }
                    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                  }
                  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                    var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
                    objTag = objTag == argsTag ? objectTag : objTag;
                    othTag = othTag == argsTag ? objectTag : othTag;
                    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
                    if (isSameTag && isBuffer(object)) {
                      if (!isBuffer(other)) {
                        return false;
                      }
                      objIsArr = true;
                      objIsObj = false;
                    }
                    if (isSameTag && !objIsObj) {
                      stack || (stack = new Stack());
                      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                    }
                    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                      var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                      if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                        stack || (stack = new Stack());
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                      }
                    }
                    if (!isSameTag) {
                      return false;
                    }
                    stack || (stack = new Stack());
                    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                  }
                  function baseIsMap(value) {
                    return isObjectLike(value) && getTag(value) == mapTag;
                  }
                  function baseIsMatch(object, source, matchData, customizer) {
                    var index = matchData.length, length = index, noCustomizer = !customizer;
                    if (object == null) {
                      return !length;
                    }
                    object = Object2(object);
                    while (index--) {
                      var data = matchData[index];
                      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                        return false;
                      }
                    }
                    while (++index < length) {
                      data = matchData[index];
                      var key = data[0], objValue = object[key], srcValue = data[1];
                      if (noCustomizer && data[2]) {
                        if (objValue === undefined2 && !(key in object)) {
                          return false;
                        }
                      } else {
                        var stack = new Stack();
                        if (customizer) {
                          var result2 = customizer(objValue, srcValue, key, object, source, stack);
                        }
                        if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                          return false;
                        }
                      }
                    }
                    return true;
                  }
                  function baseIsNative(value) {
                    if (!isObject2(value) || isMasked(value)) {
                      return false;
                    }
                    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                    return pattern.test(toSource(value));
                  }
                  function baseIsRegExp(value) {
                    return isObjectLike(value) && baseGetTag(value) == regexpTag;
                  }
                  function baseIsSet(value) {
                    return isObjectLike(value) && getTag(value) == setTag;
                  }
                  function baseIsTypedArray(value) {
                    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                  }
                  function baseIteratee(value) {
                    if (typeof value == "function") {
                      return value;
                    }
                    if (value == null) {
                      return identity;
                    }
                    if (typeof value == "object") {
                      return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
                    }
                    return property(value);
                  }
                  function baseKeys(object) {
                    if (!isPrototype(object)) {
                      return nativeKeys(object);
                    }
                    var result2 = [];
                    for (var key in Object2(object)) {
                      if (hasOwnProperty.call(object, key) && key != "constructor") {
                        result2.push(key);
                      }
                    }
                    return result2;
                  }
                  function baseKeysIn(object) {
                    if (!isObject2(object)) {
                      return nativeKeysIn(object);
                    }
                    var isProto = isPrototype(object), result2 = [];
                    for (var key in object) {
                      if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                        result2.push(key);
                      }
                    }
                    return result2;
                  }
                  function baseLt(value, other) {
                    return value < other;
                  }
                  function baseMap(collection, iteratee2) {
                    var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
                    baseEach(collection, function(value, key, collection2) {
                      result2[++index] = iteratee2(value, key, collection2);
                    });
                    return result2;
                  }
                  function baseMatches(source) {
                    var matchData = getMatchData(source);
                    if (matchData.length == 1 && matchData[0][2]) {
                      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                    }
                    return function(object) {
                      return object === source || baseIsMatch(object, source, matchData);
                    };
                  }
                  function baseMatchesProperty(path, srcValue) {
                    if (isKey(path) && isStrictComparable(srcValue)) {
                      return matchesStrictComparable(toKey(path), srcValue);
                    }
                    return function(object) {
                      var objValue = get(object, path);
                      return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                    };
                  }
                  function baseMerge(object, source, srcIndex, customizer, stack) {
                    if (object === source) {
                      return;
                    }
                    baseFor(source, function(srcValue, key) {
                      stack || (stack = new Stack());
                      if (isObject2(srcValue)) {
                        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                      } else {
                        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                        if (newValue === undefined2) {
                          newValue = srcValue;
                        }
                        assignMergeValue(object, key, newValue);
                      }
                    }, keysIn);
                  }
                  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
                    if (stacked) {
                      assignMergeValue(object, key, stacked);
                      return;
                    }
                    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
                    var isCommon = newValue === undefined2;
                    if (isCommon) {
                      var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                      newValue = srcValue;
                      if (isArr || isBuff || isTyped) {
                        if (isArray2(objValue)) {
                          newValue = objValue;
                        } else if (isArrayLikeObject(objValue)) {
                          newValue = copyArray(objValue);
                        } else if (isBuff) {
                          isCommon = false;
                          newValue = cloneBuffer(srcValue, true);
                        } else if (isTyped) {
                          isCommon = false;
                          newValue = cloneTypedArray(srcValue, true);
                        } else {
                          newValue = [];
                        }
                      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                        newValue = objValue;
                        if (isArguments(objValue)) {
                          newValue = toPlainObject(objValue);
                        } else if (!isObject2(objValue) || isFunction(objValue)) {
                          newValue = initCloneObject(srcValue);
                        }
                      } else {
                        isCommon = false;
                      }
                    }
                    if (isCommon) {
                      stack.set(srcValue, newValue);
                      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                      stack["delete"](srcValue);
                    }
                    assignMergeValue(object, key, newValue);
                  }
                  function baseNth(array, n) {
                    var length = array.length;
                    if (!length) {
                      return;
                    }
                    n += n < 0 ? length : 0;
                    return isIndex(n, length) ? array[n] : undefined2;
                  }
                  function baseOrderBy(collection, iteratees, orders) {
                    if (iteratees.length) {
                      iteratees = arrayMap(iteratees, function(iteratee2) {
                        if (isArray2(iteratee2)) {
                          return function(value) {
                            return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                          };
                        }
                        return iteratee2;
                      });
                    } else {
                      iteratees = [identity];
                    }
                    var index = -1;
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    var result2 = baseMap(collection, function(value, key, collection2) {
                      var criteria = arrayMap(iteratees, function(iteratee2) {
                        return iteratee2(value);
                      });
                      return { "criteria": criteria, "index": ++index, "value": value };
                    });
                    return baseSortBy(result2, function(object, other) {
                      return compareMultiple(object, other, orders);
                    });
                  }
                  function basePick(object, paths) {
                    return basePickBy(object, paths, function(value, path) {
                      return hasIn(object, path);
                    });
                  }
                  function basePickBy(object, paths, predicate) {
                    var index = -1, length = paths.length, result2 = {};
                    while (++index < length) {
                      var path = paths[index], value = baseGet(object, path);
                      if (predicate(value, path)) {
                        baseSet(result2, castPath(path, object), value);
                      }
                    }
                    return result2;
                  }
                  function basePropertyDeep(path) {
                    return function(object) {
                      return baseGet(object, path);
                    };
                  }
                  function basePullAll(array, values2, iteratee2, comparator) {
                    var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen2 = array;
                    if (array === values2) {
                      values2 = copyArray(values2);
                    }
                    if (iteratee2) {
                      seen2 = arrayMap(array, baseUnary(iteratee2));
                    }
                    while (++index < length) {
                      var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
                      while ((fromIndex = indexOf2(seen2, computed, fromIndex, comparator)) > -1) {
                        if (seen2 !== array) {
                          splice.call(seen2, fromIndex, 1);
                        }
                        splice.call(array, fromIndex, 1);
                      }
                    }
                    return array;
                  }
                  function basePullAt(array, indexes) {
                    var length = array ? indexes.length : 0, lastIndex = length - 1;
                    while (length--) {
                      var index = indexes[length];
                      if (length == lastIndex || index !== previous) {
                        var previous = index;
                        if (isIndex(index)) {
                          splice.call(array, index, 1);
                        } else {
                          baseUnset(array, index);
                        }
                      }
                    }
                    return array;
                  }
                  function baseRandom(lower, upper) {
                    return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                  }
                  function baseRange(start, end, step, fromRight) {
                    var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
                    while (length--) {
                      result2[fromRight ? length : ++index] = start;
                      start += step;
                    }
                    return result2;
                  }
                  function baseRepeat(string, n) {
                    var result2 = "";
                    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                      return result2;
                    }
                    do {
                      if (n % 2) {
                        result2 += string;
                      }
                      n = nativeFloor(n / 2);
                      if (n) {
                        string += string;
                      }
                    } while (n);
                    return result2;
                  }
                  function baseRest(func, start) {
                    return setToString(overRest(func, start, identity), func + "");
                  }
                  function baseSample(collection) {
                    return arraySample(values(collection));
                  }
                  function baseSampleSize(collection, n) {
                    var array = values(collection);
                    return shuffleSelf(array, baseClamp(n, 0, array.length));
                  }
                  function baseSet(object, path, value, customizer) {
                    if (!isObject2(object)) {
                      return object;
                    }
                    path = castPath(path, object);
                    var index = -1, length = path.length, lastIndex = length - 1, nested = object;
                    while (nested != null && ++index < length) {
                      var key = toKey(path[index]), newValue = value;
                      if (key === "__proto__" || key === "constructor" || key === "prototype") {
                        return object;
                      }
                      if (index != lastIndex) {
                        var objValue = nested[key];
                        newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                        if (newValue === undefined2) {
                          newValue = isObject2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                        }
                      }
                      assignValue(nested, key, newValue);
                      nested = nested[key];
                    }
                    return object;
                  }
                  var baseSetData = !metaMap ? identity : function(func, data) {
                    metaMap.set(func, data);
                    return func;
                  };
                  var baseSetToString = !defineProperty ? identity : function(func, string) {
                    return defineProperty(func, "toString", {
                      "configurable": true,
                      "enumerable": false,
                      "value": constant(string),
                      "writable": true
                    });
                  };
                  function baseShuffle(collection) {
                    return shuffleSelf(values(collection));
                  }
                  function baseSlice(array, start, end) {
                    var index = -1, length = array.length;
                    if (start < 0) {
                      start = -start > length ? 0 : length + start;
                    }
                    end = end > length ? length : end;
                    if (end < 0) {
                      end += length;
                    }
                    length = start > end ? 0 : end - start >>> 0;
                    start >>>= 0;
                    var result2 = Array2(length);
                    while (++index < length) {
                      result2[index] = array[index + start];
                    }
                    return result2;
                  }
                  function baseSome(collection, predicate) {
                    var result2;
                    baseEach(collection, function(value, index, collection2) {
                      result2 = predicate(value, index, collection2);
                      return !result2;
                    });
                    return !!result2;
                  }
                  function baseSortedIndex(array, value, retHighest) {
                    var low = 0, high = array == null ? low : array.length;
                    if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                      while (low < high) {
                        var mid = low + high >>> 1, computed = array[mid];
                        if (computed !== null && !isSymbol2(computed) && (retHighest ? computed <= value : computed < value)) {
                          low = mid + 1;
                        } else {
                          high = mid;
                        }
                      }
                      return high;
                    }
                    return baseSortedIndexBy(array, value, identity, retHighest);
                  }
                  function baseSortedIndexBy(array, value, iteratee2, retHighest) {
                    var low = 0, high = array == null ? 0 : array.length;
                    if (high === 0) {
                      return 0;
                    }
                    value = iteratee2(value);
                    var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol2(value), valIsUndefined = value === undefined2;
                    while (low < high) {
                      var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol2(computed);
                      if (valIsNaN) {
                        var setLow = retHighest || othIsReflexive;
                      } else if (valIsUndefined) {
                        setLow = othIsReflexive && (retHighest || othIsDefined);
                      } else if (valIsNull) {
                        setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                      } else if (valIsSymbol) {
                        setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                      } else if (othIsNull || othIsSymbol) {
                        setLow = false;
                      } else {
                        setLow = retHighest ? computed <= value : computed < value;
                      }
                      if (setLow) {
                        low = mid + 1;
                      } else {
                        high = mid;
                      }
                    }
                    return nativeMin(high, MAX_ARRAY_INDEX);
                  }
                  function baseSortedUniq(array, iteratee2) {
                    var index = -1, length = array.length, resIndex = 0, result2 = [];
                    while (++index < length) {
                      var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                      if (!index || !eq(computed, seen2)) {
                        var seen2 = computed;
                        result2[resIndex++] = value === 0 ? 0 : value;
                      }
                    }
                    return result2;
                  }
                  function baseToNumber(value) {
                    if (typeof value == "number") {
                      return value;
                    }
                    if (isSymbol2(value)) {
                      return NAN;
                    }
                    return +value;
                  }
                  function baseToString(value) {
                    if (typeof value == "string") {
                      return value;
                    }
                    if (isArray2(value)) {
                      return arrayMap(value, baseToString) + "";
                    }
                    if (isSymbol2(value)) {
                      return symbolToString ? symbolToString.call(value) : "";
                    }
                    var result2 = value + "";
                    return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
                  }
                  function baseUniq(array, iteratee2, comparator) {
                    var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen2 = result2;
                    if (comparator) {
                      isCommon = false;
                      includes2 = arrayIncludesWith;
                    } else if (length >= LARGE_ARRAY_SIZE) {
                      var set2 = iteratee2 ? null : createSet(array);
                      if (set2) {
                        return setToArray(set2);
                      }
                      isCommon = false;
                      includes2 = cacheHas;
                      seen2 = new SetCache();
                    } else {
                      seen2 = iteratee2 ? [] : result2;
                    }
                    outer:
                      while (++index < length) {
                        var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                        value = comparator || value !== 0 ? value : 0;
                        if (isCommon && computed === computed) {
                          var seenIndex = seen2.length;
                          while (seenIndex--) {
                            if (seen2[seenIndex] === computed) {
                              continue outer;
                            }
                          }
                          if (iteratee2) {
                            seen2.push(computed);
                          }
                          result2.push(value);
                        } else if (!includes2(seen2, computed, comparator)) {
                          if (seen2 !== result2) {
                            seen2.push(computed);
                          }
                          result2.push(value);
                        }
                      }
                    return result2;
                  }
                  function baseUnset(object, path) {
                    path = castPath(path, object);
                    object = parent(object, path);
                    return object == null || delete object[toKey(last2(path))];
                  }
                  function baseUpdate(object, path, updater, customizer) {
                    return baseSet(object, path, updater(baseGet(object, path)), customizer);
                  }
                  function baseWhile(array, predicate, isDrop, fromRight) {
                    var length = array.length, index = fromRight ? length : -1;
                    while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
                    }
                    return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
                  }
                  function baseWrapperValue(value, actions) {
                    var result2 = value;
                    if (result2 instanceof LazyWrapper) {
                      result2 = result2.value();
                    }
                    return arrayReduce(actions, function(result3, action) {
                      return action.func.apply(action.thisArg, arrayPush([result3], action.args));
                    }, result2);
                  }
                  function baseXor(arrays, iteratee2, comparator) {
                    var length = arrays.length;
                    if (length < 2) {
                      return length ? baseUniq(arrays[0]) : [];
                    }
                    var index = -1, result2 = Array2(length);
                    while (++index < length) {
                      var array = arrays[index], othIndex = -1;
                      while (++othIndex < length) {
                        if (othIndex != index) {
                          result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                        }
                      }
                    }
                    return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
                  }
                  function baseZipObject(props, values2, assignFunc) {
                    var index = -1, length = props.length, valsLength = values2.length, result2 = {};
                    while (++index < length) {
                      var value = index < valsLength ? values2[index] : undefined2;
                      assignFunc(result2, props[index], value);
                    }
                    return result2;
                  }
                  function castArrayLikeObject(value) {
                    return isArrayLikeObject(value) ? value : [];
                  }
                  function castFunction(value) {
                    return typeof value == "function" ? value : identity;
                  }
                  function castPath(value, object) {
                    if (isArray2(value)) {
                      return value;
                    }
                    return isKey(value, object) ? [value] : stringToPath(toString(value));
                  }
                  var castRest = baseRest;
                  function castSlice(array, start, end) {
                    var length = array.length;
                    end = end === undefined2 ? length : end;
                    return !start && end >= length ? array : baseSlice(array, start, end);
                  }
                  var clearTimeout = ctxClearTimeout || function(id) {
                    return root.clearTimeout(id);
                  };
                  function cloneBuffer(buffer, isDeep) {
                    if (isDeep) {
                      return buffer.slice();
                    }
                    var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
                    buffer.copy(result2);
                    return result2;
                  }
                  function cloneArrayBuffer(arrayBuffer) {
                    var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
                    new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
                    return result2;
                  }
                  function cloneDataView(dataView, isDeep) {
                    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                  }
                  function cloneRegExp(regexp) {
                    var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                    result2.lastIndex = regexp.lastIndex;
                    return result2;
                  }
                  function cloneSymbol(symbol) {
                    return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
                  }
                  function cloneTypedArray(typedArray, isDeep) {
                    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                  }
                  function compareAscending(value, other) {
                    if (value !== other) {
                      var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
                      var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
                      if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                        return 1;
                      }
                      if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                        return -1;
                      }
                    }
                    return 0;
                  }
                  function compareMultiple(object, other, orders) {
                    var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
                    while (++index < length) {
                      var result2 = compareAscending(objCriteria[index], othCriteria[index]);
                      if (result2) {
                        if (index >= ordersLength) {
                          return result2;
                        }
                        var order = orders[index];
                        return result2 * (order == "desc" ? -1 : 1);
                      }
                    }
                    return object.index - other.index;
                  }
                  function composeArgs(args, partials, holders, isCurried) {
                    var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
                    while (++leftIndex < leftLength) {
                      result2[leftIndex] = partials[leftIndex];
                    }
                    while (++argsIndex < holdersLength) {
                      if (isUncurried || argsIndex < argsLength) {
                        result2[holders[argsIndex]] = args[argsIndex];
                      }
                    }
                    while (rangeLength--) {
                      result2[leftIndex++] = args[argsIndex++];
                    }
                    return result2;
                  }
                  function composeArgsRight(args, partials, holders, isCurried) {
                    var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
                    while (++argsIndex < rangeLength) {
                      result2[argsIndex] = args[argsIndex];
                    }
                    var offset = argsIndex;
                    while (++rightIndex < rightLength) {
                      result2[offset + rightIndex] = partials[rightIndex];
                    }
                    while (++holdersIndex < holdersLength) {
                      if (isUncurried || argsIndex < argsLength) {
                        result2[offset + holders[holdersIndex]] = args[argsIndex++];
                      }
                    }
                    return result2;
                  }
                  function copyArray(source, array) {
                    var index = -1, length = source.length;
                    array || (array = Array2(length));
                    while (++index < length) {
                      array[index] = source[index];
                    }
                    return array;
                  }
                  function copyObject(source, props, object, customizer) {
                    var isNew = !object;
                    object || (object = {});
                    var index = -1, length = props.length;
                    while (++index < length) {
                      var key = props[index];
                      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
                      if (newValue === undefined2) {
                        newValue = source[key];
                      }
                      if (isNew) {
                        baseAssignValue(object, key, newValue);
                      } else {
                        assignValue(object, key, newValue);
                      }
                    }
                    return object;
                  }
                  function copySymbols(source, object) {
                    return copyObject(source, getSymbols(source), object);
                  }
                  function copySymbolsIn(source, object) {
                    return copyObject(source, getSymbolsIn(source), object);
                  }
                  function createAggregator(setter, initializer) {
                    return function(collection, iteratee2) {
                      var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                      return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
                    };
                  }
                  function createAssigner(assigner) {
                    return baseRest(function(object, sources) {
                      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
                      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
                      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                        customizer = length < 3 ? undefined2 : customizer;
                        length = 1;
                      }
                      object = Object2(object);
                      while (++index < length) {
                        var source = sources[index];
                        if (source) {
                          assigner(object, source, index, customizer);
                        }
                      }
                      return object;
                    });
                  }
                  function createBaseEach(eachFunc, fromRight) {
                    return function(collection, iteratee2) {
                      if (collection == null) {
                        return collection;
                      }
                      if (!isArrayLike(collection)) {
                        return eachFunc(collection, iteratee2);
                      }
                      var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
                      while (fromRight ? index-- : ++index < length) {
                        if (iteratee2(iterable[index], index, iterable) === false) {
                          break;
                        }
                      }
                      return collection;
                    };
                  }
                  function createBaseFor(fromRight) {
                    return function(object, iteratee2, keysFunc) {
                      var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
                      while (length--) {
                        var key = props[fromRight ? length : ++index];
                        if (iteratee2(iterable[key], key, iterable) === false) {
                          break;
                        }
                      }
                      return object;
                    };
                  }
                  function createBind(func, bitmask, thisArg) {
                    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                    function wrapper() {
                      var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                      return fn.apply(isBind ? thisArg : this, arguments);
                    }
                    return wrapper;
                  }
                  function createCaseFirst(methodName) {
                    return function(string) {
                      string = toString(string);
                      var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
                      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                      var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
                      return chr[methodName]() + trailing;
                    };
                  }
                  function createCompounder(callback) {
                    return function(string) {
                      return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
                    };
                  }
                  function createCtor(Ctor) {
                    return function() {
                      var args = arguments;
                      switch (args.length) {
                        case 0:
                          return new Ctor();
                        case 1:
                          return new Ctor(args[0]);
                        case 2:
                          return new Ctor(args[0], args[1]);
                        case 3:
                          return new Ctor(args[0], args[1], args[2]);
                        case 4:
                          return new Ctor(args[0], args[1], args[2], args[3]);
                        case 5:
                          return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                        case 6:
                          return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                        case 7:
                          return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                      }
                      var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
                      return isObject2(result2) ? result2 : thisBinding;
                    };
                  }
                  function createCurry(func, bitmask, arity) {
                    var Ctor = createCtor(func);
                    function wrapper() {
                      var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
                      while (index--) {
                        args[index] = arguments[index];
                      }
                      var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                      length -= holders.length;
                      if (length < arity) {
                        return createRecurry(
                          func,
                          bitmask,
                          createHybrid,
                          wrapper.placeholder,
                          undefined2,
                          args,
                          holders,
                          undefined2,
                          undefined2,
                          arity - length
                        );
                      }
                      var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                      return apply(fn, this, args);
                    }
                    return wrapper;
                  }
                  function createFind(findIndexFunc) {
                    return function(collection, predicate, fromIndex) {
                      var iterable = Object2(collection);
                      if (!isArrayLike(collection)) {
                        var iteratee2 = getIteratee(predicate, 3);
                        collection = keys(collection);
                        predicate = function(key) {
                          return iteratee2(iterable[key], key, iterable);
                        };
                      }
                      var index = findIndexFunc(collection, predicate, fromIndex);
                      return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
                    };
                  }
                  function createFlow(fromRight) {
                    return flatRest(function(funcs) {
                      var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                      if (fromRight) {
                        funcs.reverse();
                      }
                      while (index--) {
                        var func = funcs[index];
                        if (typeof func != "function") {
                          throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                          var wrapper = new LodashWrapper([], true);
                        }
                      }
                      index = wrapper ? index : length;
                      while (++index < length) {
                        func = funcs[index];
                        var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                        if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                          wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                        } else {
                          wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                        }
                      }
                      return function() {
                        var args = arguments, value = args[0];
                        if (wrapper && args.length == 1 && isArray2(value)) {
                          return wrapper.plant(value).value();
                        }
                        var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                        while (++index2 < length) {
                          result2 = funcs[index2].call(this, result2);
                        }
                        return result2;
                      };
                    });
                  }
                  function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
                    var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
                    function wrapper() {
                      var length = arguments.length, args = Array2(length), index = length;
                      while (index--) {
                        args[index] = arguments[index];
                      }
                      if (isCurried) {
                        var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                      }
                      if (partials) {
                        args = composeArgs(args, partials, holders, isCurried);
                      }
                      if (partialsRight) {
                        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                      }
                      length -= holdersCount;
                      if (isCurried && length < arity) {
                        var newHolders = replaceHolders(args, placeholder);
                        return createRecurry(
                          func,
                          bitmask,
                          createHybrid,
                          wrapper.placeholder,
                          thisArg,
                          args,
                          newHolders,
                          argPos,
                          ary2,
                          arity - length
                        );
                      }
                      var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                      length = args.length;
                      if (argPos) {
                        args = reorder(args, argPos);
                      } else if (isFlip && length > 1) {
                        args.reverse();
                      }
                      if (isAry && ary2 < length) {
                        args.length = ary2;
                      }
                      if (this && this !== root && this instanceof wrapper) {
                        fn = Ctor || createCtor(fn);
                      }
                      return fn.apply(thisBinding, args);
                    }
                    return wrapper;
                  }
                  function createInverter(setter, toIteratee) {
                    return function(object, iteratee2) {
                      return baseInverter(object, setter, toIteratee(iteratee2), {});
                    };
                  }
                  function createMathOperation(operator, defaultValue) {
                    return function(value, other) {
                      var result2;
                      if (value === undefined2 && other === undefined2) {
                        return defaultValue;
                      }
                      if (value !== undefined2) {
                        result2 = value;
                      }
                      if (other !== undefined2) {
                        if (result2 === undefined2) {
                          return other;
                        }
                        if (typeof value == "string" || typeof other == "string") {
                          value = baseToString(value);
                          other = baseToString(other);
                        } else {
                          value = baseToNumber(value);
                          other = baseToNumber(other);
                        }
                        result2 = operator(value, other);
                      }
                      return result2;
                    };
                  }
                  function createOver(arrayFunc) {
                    return flatRest(function(iteratees) {
                      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                      return baseRest(function(args) {
                        var thisArg = this;
                        return arrayFunc(iteratees, function(iteratee2) {
                          return apply(iteratee2, thisArg, args);
                        });
                      });
                    });
                  }
                  function createPadding(length, chars) {
                    chars = chars === undefined2 ? " " : baseToString(chars);
                    var charsLength = chars.length;
                    if (charsLength < 2) {
                      return charsLength ? baseRepeat(chars, length) : chars;
                    }
                    var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                    return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
                  }
                  function createPartial(func, bitmask, thisArg, partials) {
                    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                    function wrapper() {
                      var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                      while (++leftIndex < leftLength) {
                        args[leftIndex] = partials[leftIndex];
                      }
                      while (argsLength--) {
                        args[leftIndex++] = arguments[++argsIndex];
                      }
                      return apply(fn, isBind ? thisArg : this, args);
                    }
                    return wrapper;
                  }
                  function createRange(fromRight) {
                    return function(start, end, step) {
                      if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                        end = step = undefined2;
                      }
                      start = toFinite(start);
                      if (end === undefined2) {
                        end = start;
                        start = 0;
                      } else {
                        end = toFinite(end);
                      }
                      step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
                      return baseRange(start, end, step, fromRight);
                    };
                  }
                  function createRelationalOperation(operator) {
                    return function(value, other) {
                      if (!(typeof value == "string" && typeof other == "string")) {
                        value = toNumber(value);
                        other = toNumber(other);
                      }
                      return operator(value, other);
                    };
                  }
                  function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
                    var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
                    bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
                    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
                    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                      bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                    }
                    var newData = [
                      func,
                      bitmask,
                      thisArg,
                      newPartials,
                      newHolders,
                      newPartialsRight,
                      newHoldersRight,
                      argPos,
                      ary2,
                      arity
                    ];
                    var result2 = wrapFunc.apply(undefined2, newData);
                    if (isLaziable(func)) {
                      setData(result2, newData);
                    }
                    result2.placeholder = placeholder;
                    return setWrapToString(result2, func, bitmask);
                  }
                  function createRound(methodName) {
                    var func = Math2[methodName];
                    return function(number, precision) {
                      number = toNumber(number);
                      precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                      if (precision && nativeIsFinite(number)) {
                        var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                        pair = (toString(value) + "e").split("e");
                        return +(pair[0] + "e" + (+pair[1] - precision));
                      }
                      return func(number);
                    };
                  }
                  var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
                    return new Set2(values2);
                  };
                  function createToPairs(keysFunc) {
                    return function(object) {
                      var tag = getTag(object);
                      if (tag == mapTag) {
                        return mapToArray(object);
                      }
                      if (tag == setTag) {
                        return setToPairs(object);
                      }
                      return baseToPairs(object, keysFunc(object));
                    };
                  }
                  function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
                    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                    if (!isBindKey && typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    var length = partials ? partials.length : 0;
                    if (!length) {
                      bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                      partials = holders = undefined2;
                    }
                    ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
                    arity = arity === undefined2 ? arity : toInteger(arity);
                    length -= holders ? holders.length : 0;
                    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                      var partialsRight = partials, holdersRight = holders;
                      partials = holders = undefined2;
                    }
                    var data = isBindKey ? undefined2 : getData(func);
                    var newData = [
                      func,
                      bitmask,
                      thisArg,
                      partials,
                      holders,
                      partialsRight,
                      holdersRight,
                      argPos,
                      ary2,
                      arity
                    ];
                    if (data) {
                      mergeData(newData, data);
                    }
                    func = newData[0];
                    bitmask = newData[1];
                    thisArg = newData[2];
                    partials = newData[3];
                    holders = newData[4];
                    arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
                    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                      bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                    }
                    if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                      var result2 = createBind(func, bitmask, thisArg);
                    } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                      result2 = createCurry(func, bitmask, arity);
                    } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                      result2 = createPartial(func, bitmask, thisArg, partials);
                    } else {
                      result2 = createHybrid.apply(undefined2, newData);
                    }
                    var setter = data ? baseSetData : setData;
                    return setWrapToString(setter(result2, newData), func, bitmask);
                  }
                  function customDefaultsAssignIn(objValue, srcValue, key, object) {
                    if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                      return srcValue;
                    }
                    return objValue;
                  }
                  function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                    if (isObject2(objValue) && isObject2(srcValue)) {
                      stack.set(srcValue, objValue);
                      baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
                      stack["delete"](srcValue);
                    }
                    return objValue;
                  }
                  function customOmitClone(value) {
                    return isPlainObject(value) ? undefined2 : value;
                  }
                  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
                    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                      return false;
                    }
                    var arrStacked = stack.get(array);
                    var othStacked = stack.get(other);
                    if (arrStacked && othStacked) {
                      return arrStacked == other && othStacked == array;
                    }
                    var index = -1, result2 = true, seen2 = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
                    stack.set(array, other);
                    stack.set(other, array);
                    while (++index < arrLength) {
                      var arrValue = array[index], othValue = other[index];
                      if (customizer) {
                        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                      }
                      if (compared !== undefined2) {
                        if (compared) {
                          continue;
                        }
                        result2 = false;
                        break;
                      }
                      if (seen2) {
                        if (!arraySome(other, function(othValue2, othIndex) {
                          if (!cacheHas(seen2, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                            return seen2.push(othIndex);
                          }
                        })) {
                          result2 = false;
                          break;
                        }
                      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                        result2 = false;
                        break;
                      }
                    }
                    stack["delete"](array);
                    stack["delete"](other);
                    return result2;
                  }
                  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                    switch (tag) {
                      case dataViewTag:
                        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                          return false;
                        }
                        object = object.buffer;
                        other = other.buffer;
                      case arrayBufferTag:
                        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                          return false;
                        }
                        return true;
                      case boolTag:
                      case dateTag:
                      case numberTag:
                        return eq(+object, +other);
                      case errorTag:
                        return object.name == other.name && object.message == other.message;
                      case regexpTag:
                      case stringTag:
                        return object == other + "";
                      case mapTag:
                        var convert = mapToArray;
                      case setTag:
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                        convert || (convert = setToArray);
                        if (object.size != other.size && !isPartial) {
                          return false;
                        }
                        var stacked = stack.get(object);
                        if (stacked) {
                          return stacked == other;
                        }
                        bitmask |= COMPARE_UNORDERED_FLAG;
                        stack.set(object, other);
                        var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                        stack["delete"](object);
                        return result2;
                      case symbolTag:
                        if (symbolValueOf) {
                          return symbolValueOf.call(object) == symbolValueOf.call(other);
                        }
                    }
                    return false;
                  }
                  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
                    if (objLength != othLength && !isPartial) {
                      return false;
                    }
                    var index = objLength;
                    while (index--) {
                      var key = objProps[index];
                      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                        return false;
                      }
                    }
                    var objStacked = stack.get(object);
                    var othStacked = stack.get(other);
                    if (objStacked && othStacked) {
                      return objStacked == other && othStacked == object;
                    }
                    var result2 = true;
                    stack.set(object, other);
                    stack.set(other, object);
                    var skipCtor = isPartial;
                    while (++index < objLength) {
                      key = objProps[index];
                      var objValue = object[key], othValue = other[key];
                      if (customizer) {
                        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                      }
                      if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                        result2 = false;
                        break;
                      }
                      skipCtor || (skipCtor = key == "constructor");
                    }
                    if (result2 && !skipCtor) {
                      var objCtor = object.constructor, othCtor = other.constructor;
                      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                        result2 = false;
                      }
                    }
                    stack["delete"](object);
                    stack["delete"](other);
                    return result2;
                  }
                  function flatRest(func) {
                    return setToString(overRest(func, undefined2, flatten), func + "");
                  }
                  function getAllKeys(object) {
                    return baseGetAllKeys(object, keys, getSymbols);
                  }
                  function getAllKeysIn(object) {
                    return baseGetAllKeys(object, keysIn, getSymbolsIn);
                  }
                  var getData = !metaMap ? noop : function(func) {
                    return metaMap.get(func);
                  };
                  function getFuncName(func) {
                    var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
                    while (length--) {
                      var data = array[length], otherFunc = data.func;
                      if (otherFunc == null || otherFunc == func) {
                        return data.name;
                      }
                    }
                    return result2;
                  }
                  function getHolder(func) {
                    var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
                    return object.placeholder;
                  }
                  function getIteratee() {
                    var result2 = lodash.iteratee || iteratee;
                    result2 = result2 === iteratee ? baseIteratee : result2;
                    return arguments.length ? result2(arguments[0], arguments[1]) : result2;
                  }
                  function getMapData(map2, key) {
                    var data = map2.__data__;
                    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
                  }
                  function getMatchData(object) {
                    var result2 = keys(object), length = result2.length;
                    while (length--) {
                      var key = result2[length], value = object[key];
                      result2[length] = [key, value, isStrictComparable(value)];
                    }
                    return result2;
                  }
                  function getNative(object, key) {
                    var value = getValue(object, key);
                    return baseIsNative(value) ? value : undefined2;
                  }
                  function getRawTag(value) {
                    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
                    try {
                      value[symToStringTag] = undefined2;
                      var unmasked = true;
                    } catch (e) {
                    }
                    var result2 = nativeObjectToString.call(value);
                    if (unmasked) {
                      if (isOwn) {
                        value[symToStringTag] = tag;
                      } else {
                        delete value[symToStringTag];
                      }
                    }
                    return result2;
                  }
                  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                    if (object == null) {
                      return [];
                    }
                    object = Object2(object);
                    return arrayFilter(nativeGetSymbols(object), function(symbol) {
                      return propertyIsEnumerable.call(object, symbol);
                    });
                  };
                  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
                    var result2 = [];
                    while (object) {
                      arrayPush(result2, getSymbols(object));
                      object = getPrototype(object);
                    }
                    return result2;
                  };
                  var getTag = baseGetTag;
                  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
                    getTag = function(value) {
                      var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
                      if (ctorString) {
                        switch (ctorString) {
                          case dataViewCtorString:
                            return dataViewTag;
                          case mapCtorString:
                            return mapTag;
                          case promiseCtorString:
                            return promiseTag;
                          case setCtorString:
                            return setTag;
                          case weakMapCtorString:
                            return weakMapTag;
                        }
                      }
                      return result2;
                    };
                  }
                  function getView(start, end, transforms) {
                    var index = -1, length = transforms.length;
                    while (++index < length) {
                      var data = transforms[index], size2 = data.size;
                      switch (data.type) {
                        case "drop":
                          start += size2;
                          break;
                        case "dropRight":
                          end -= size2;
                          break;
                        case "take":
                          end = nativeMin(end, start + size2);
                          break;
                        case "takeRight":
                          start = nativeMax(start, end - size2);
                          break;
                      }
                    }
                    return { "start": start, "end": end };
                  }
                  function getWrapDetails(source) {
                    var match = source.match(reWrapDetails);
                    return match ? match[1].split(reSplitDetails) : [];
                  }
                  function hasPath(object, path, hasFunc) {
                    path = castPath(path, object);
                    var index = -1, length = path.length, result2 = false;
                    while (++index < length) {
                      var key = toKey(path[index]);
                      if (!(result2 = object != null && hasFunc(object, key))) {
                        break;
                      }
                      object = object[key];
                    }
                    if (result2 || ++index != length) {
                      return result2;
                    }
                    length = object == null ? 0 : object.length;
                    return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
                  }
                  function initCloneArray(array) {
                    var length = array.length, result2 = new array.constructor(length);
                    if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                      result2.index = array.index;
                      result2.input = array.input;
                    }
                    return result2;
                  }
                  function initCloneObject(object) {
                    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
                  }
                  function initCloneByTag(object, tag, isDeep) {
                    var Ctor = object.constructor;
                    switch (tag) {
                      case arrayBufferTag:
                        return cloneArrayBuffer(object);
                      case boolTag:
                      case dateTag:
                        return new Ctor(+object);
                      case dataViewTag:
                        return cloneDataView(object, isDeep);
                      case float32Tag:
                      case float64Tag:
                      case int8Tag:
                      case int16Tag:
                      case int32Tag:
                      case uint8Tag:
                      case uint8ClampedTag:
                      case uint16Tag:
                      case uint32Tag:
                        return cloneTypedArray(object, isDeep);
                      case mapTag:
                        return new Ctor();
                      case numberTag:
                      case stringTag:
                        return new Ctor(object);
                      case regexpTag:
                        return cloneRegExp(object);
                      case setTag:
                        return new Ctor();
                      case symbolTag:
                        return cloneSymbol(object);
                    }
                  }
                  function insertWrapDetails(source, details) {
                    var length = details.length;
                    if (!length) {
                      return source;
                    }
                    var lastIndex = length - 1;
                    details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
                    details = details.join(length > 2 ? ", " : " ");
                    return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
                  }
                  function isFlattenable(value) {
                    return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
                  }
                  function isIndex(value, length) {
                    var type = typeof value;
                    length = length == null ? MAX_SAFE_INTEGER : length;
                    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
                  }
                  function isIterateeCall(value, index, object) {
                    if (!isObject2(object)) {
                      return false;
                    }
                    var type = typeof index;
                    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
                      return eq(object[index], value);
                    }
                    return false;
                  }
                  function isKey(value, object) {
                    if (isArray2(value)) {
                      return false;
                    }
                    var type = typeof value;
                    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
                      return true;
                    }
                    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
                  }
                  function isKeyable(value) {
                    var type = typeof value;
                    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
                  }
                  function isLaziable(func) {
                    var funcName = getFuncName(func), other = lodash[funcName];
                    if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
                      return false;
                    }
                    if (func === other) {
                      return true;
                    }
                    var data = getData(other);
                    return !!data && func === data[0];
                  }
                  function isMasked(func) {
                    return !!maskSrcKey && maskSrcKey in func;
                  }
                  var isMaskable = coreJsData ? isFunction : stubFalse;
                  function isPrototype(value) {
                    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
                    return value === proto;
                  }
                  function isStrictComparable(value) {
                    return value === value && !isObject2(value);
                  }
                  function matchesStrictComparable(key, srcValue) {
                    return function(object) {
                      if (object == null) {
                        return false;
                      }
                      return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
                    };
                  }
                  function memoizeCapped(func) {
                    var result2 = memoize(func, function(key) {
                      if (cache.size === MAX_MEMOIZE_SIZE) {
                        cache.clear();
                      }
                      return key;
                    });
                    var cache = result2.cache;
                    return result2;
                  }
                  function mergeData(data, source) {
                    var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
                    var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
                    if (!(isCommon || isCombo)) {
                      return data;
                    }
                    if (srcBitmask & WRAP_BIND_FLAG) {
                      data[2] = source[2];
                      newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                    }
                    var value = source[3];
                    if (value) {
                      var partials = data[3];
                      data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                      data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                    }
                    value = source[5];
                    if (value) {
                      partials = data[5];
                      data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                      data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                    }
                    value = source[7];
                    if (value) {
                      data[7] = value;
                    }
                    if (srcBitmask & WRAP_ARY_FLAG) {
                      data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                    }
                    if (data[9] == null) {
                      data[9] = source[9];
                    }
                    data[0] = source[0];
                    data[1] = newBitmask;
                    return data;
                  }
                  function nativeKeysIn(object) {
                    var result2 = [];
                    if (object != null) {
                      for (var key in Object2(object)) {
                        result2.push(key);
                      }
                    }
                    return result2;
                  }
                  function objectToString(value) {
                    return nativeObjectToString.call(value);
                  }
                  function overRest(func, start, transform3) {
                    start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
                    return function() {
                      var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
                      while (++index < length) {
                        array[index] = args[start + index];
                      }
                      index = -1;
                      var otherArgs = Array2(start + 1);
                      while (++index < start) {
                        otherArgs[index] = args[index];
                      }
                      otherArgs[start] = transform3(array);
                      return apply(func, this, otherArgs);
                    };
                  }
                  function parent(object, path) {
                    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                  }
                  function reorder(array, indexes) {
                    var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
                    while (length--) {
                      var index = indexes[length];
                      array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
                    }
                    return array;
                  }
                  function safeGet(object, key) {
                    if (key === "constructor" && typeof object[key] === "function") {
                      return;
                    }
                    if (key == "__proto__") {
                      return;
                    }
                    return object[key];
                  }
                  var setData = shortOut(baseSetData);
                  var setTimeout2 = ctxSetTimeout || function(func, wait) {
                    return root.setTimeout(func, wait);
                  };
                  var setToString = shortOut(baseSetToString);
                  function setWrapToString(wrapper, reference, bitmask) {
                    var source = reference + "";
                    return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                  }
                  function shortOut(func) {
                    var count = 0, lastCalled = 0;
                    return function() {
                      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                      lastCalled = stamp;
                      if (remaining > 0) {
                        if (++count >= HOT_COUNT) {
                          return arguments[0];
                        }
                      } else {
                        count = 0;
                      }
                      return func.apply(undefined2, arguments);
                    };
                  }
                  function shuffleSelf(array, size2) {
                    var index = -1, length = array.length, lastIndex = length - 1;
                    size2 = size2 === undefined2 ? length : size2;
                    while (++index < size2) {
                      var rand = baseRandom(index, lastIndex), value = array[rand];
                      array[rand] = array[index];
                      array[index] = value;
                    }
                    array.length = size2;
                    return array;
                  }
                  var stringToPath = memoizeCapped(function(string) {
                    var result2 = [];
                    if (string.charCodeAt(0) === 46) {
                      result2.push("");
                    }
                    string.replace(rePropName, function(match, number, quote, subString) {
                      result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
                    });
                    return result2;
                  });
                  function toKey(value) {
                    if (typeof value == "string" || isSymbol2(value)) {
                      return value;
                    }
                    var result2 = value + "";
                    return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
                  }
                  function toSource(func) {
                    if (func != null) {
                      try {
                        return funcToString.call(func);
                      } catch (e) {
                      }
                      try {
                        return func + "";
                      } catch (e) {
                      }
                    }
                    return "";
                  }
                  function updateWrapDetails(details, bitmask) {
                    arrayEach(wrapFlags, function(pair) {
                      var value = "_." + pair[0];
                      if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                        details.push(value);
                      }
                    });
                    return details.sort();
                  }
                  function wrapperClone(wrapper) {
                    if (wrapper instanceof LazyWrapper) {
                      return wrapper.clone();
                    }
                    var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                    result2.__actions__ = copyArray(wrapper.__actions__);
                    result2.__index__ = wrapper.__index__;
                    result2.__values__ = wrapper.__values__;
                    return result2;
                  }
                  function chunk(array, size2, guard) {
                    if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
                      size2 = 1;
                    } else {
                      size2 = nativeMax(toInteger(size2), 0);
                    }
                    var length = array == null ? 0 : array.length;
                    if (!length || size2 < 1) {
                      return [];
                    }
                    var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
                    while (index < length) {
                      result2[resIndex++] = baseSlice(array, index, index += size2);
                    }
                    return result2;
                  }
                  function compact(array) {
                    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
                    while (++index < length) {
                      var value = array[index];
                      if (value) {
                        result2[resIndex++] = value;
                      }
                    }
                    return result2;
                  }
                  function concat() {
                    var length = arguments.length;
                    if (!length) {
                      return [];
                    }
                    var args = Array2(length - 1), array = arguments[0], index = length;
                    while (index--) {
                      args[index - 1] = arguments[index];
                    }
                    return arrayPush(isArray2(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                  }
                  var difference = baseRest(function(array, values2) {
                    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
                  });
                  var differenceBy = baseRest(function(array, values2) {
                    var iteratee2 = last2(values2);
                    if (isArrayLikeObject(iteratee2)) {
                      iteratee2 = undefined2;
                    }
                    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
                  });
                  var differenceWith = baseRest(function(array, values2) {
                    var comparator = last2(values2);
                    if (isArrayLikeObject(comparator)) {
                      comparator = undefined2;
                    }
                    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
                  });
                  function drop(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    return baseSlice(array, n < 0 ? 0 : n, length);
                  }
                  function dropRight(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    n = length - n;
                    return baseSlice(array, 0, n < 0 ? 0 : n);
                  }
                  function dropRightWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
                  }
                  function dropWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
                  }
                  function fill(array, value, start, end) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return [];
                    }
                    if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
                      start = 0;
                      end = length;
                    }
                    return baseFill(array, value, start, end);
                  }
                  function findIndex(array, predicate, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return -1;
                    }
                    var index = fromIndex == null ? 0 : toInteger(fromIndex);
                    if (index < 0) {
                      index = nativeMax(length + index, 0);
                    }
                    return baseFindIndex(array, getIteratee(predicate, 3), index);
                  }
                  function findLastIndex(array, predicate, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return -1;
                    }
                    var index = length - 1;
                    if (fromIndex !== undefined2) {
                      index = toInteger(fromIndex);
                      index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                    }
                    return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                  }
                  function flatten(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseFlatten(array, 1) : [];
                  }
                  function flattenDeep(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseFlatten(array, INFINITY) : [];
                  }
                  function flattenDepth(array, depth) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return [];
                    }
                    depth = depth === undefined2 ? 1 : toInteger(depth);
                    return baseFlatten(array, depth);
                  }
                  function fromPairs(pairs) {
                    var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
                    while (++index < length) {
                      var pair = pairs[index];
                      result2[pair[0]] = pair[1];
                    }
                    return result2;
                  }
                  function head(array) {
                    return array && array.length ? array[0] : undefined2;
                  }
                  function indexOf(array, value, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return -1;
                    }
                    var index = fromIndex == null ? 0 : toInteger(fromIndex);
                    if (index < 0) {
                      index = nativeMax(length + index, 0);
                    }
                    return baseIndexOf(array, value, index);
                  }
                  function initial(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseSlice(array, 0, -1) : [];
                  }
                  var intersection = baseRest(function(arrays) {
                    var mapped = arrayMap(arrays, castArrayLikeObject);
                    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
                  });
                  var intersectionBy = baseRest(function(arrays) {
                    var iteratee2 = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                    if (iteratee2 === last2(mapped)) {
                      iteratee2 = undefined2;
                    } else {
                      mapped.pop();
                    }
                    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
                  });
                  var intersectionWith = baseRest(function(arrays) {
                    var comparator = last2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    if (comparator) {
                      mapped.pop();
                    }
                    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
                  });
                  function join(array, separator) {
                    return array == null ? "" : nativeJoin.call(array, separator);
                  }
                  function last2(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? array[length - 1] : undefined2;
                  }
                  function lastIndexOf(array, value, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return -1;
                    }
                    var index = length;
                    if (fromIndex !== undefined2) {
                      index = toInteger(fromIndex);
                      index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                    }
                    return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
                  }
                  function nth(array, n) {
                    return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
                  }
                  var pull = baseRest(pullAll);
                  function pullAll(array, values2) {
                    return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
                  }
                  function pullAllBy(array, values2, iteratee2) {
                    return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
                  }
                  function pullAllWith(array, values2, comparator) {
                    return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
                  }
                  var pullAt = flatRest(function(array, indexes) {
                    var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
                    basePullAt(array, arrayMap(indexes, function(index) {
                      return isIndex(index, length) ? +index : index;
                    }).sort(compareAscending));
                    return result2;
                  });
                  function remove(array, predicate) {
                    var result2 = [];
                    if (!(array && array.length)) {
                      return result2;
                    }
                    var index = -1, indexes = [], length = array.length;
                    predicate = getIteratee(predicate, 3);
                    while (++index < length) {
                      var value = array[index];
                      if (predicate(value, index, array)) {
                        result2.push(value);
                        indexes.push(index);
                      }
                    }
                    basePullAt(array, indexes);
                    return result2;
                  }
                  function reverse(array) {
                    return array == null ? array : nativeReverse.call(array);
                  }
                  function slice(array, start, end) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return [];
                    }
                    if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                      start = 0;
                      end = length;
                    } else {
                      start = start == null ? 0 : toInteger(start);
                      end = end === undefined2 ? length : toInteger(end);
                    }
                    return baseSlice(array, start, end);
                  }
                  function sortedIndex(array, value) {
                    return baseSortedIndex(array, value);
                  }
                  function sortedIndexBy(array, value, iteratee2) {
                    return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
                  }
                  function sortedIndexOf(array, value) {
                    var length = array == null ? 0 : array.length;
                    if (length) {
                      var index = baseSortedIndex(array, value);
                      if (index < length && eq(array[index], value)) {
                        return index;
                      }
                    }
                    return -1;
                  }
                  function sortedLastIndex(array, value) {
                    return baseSortedIndex(array, value, true);
                  }
                  function sortedLastIndexBy(array, value, iteratee2) {
                    return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
                  }
                  function sortedLastIndexOf(array, value) {
                    var length = array == null ? 0 : array.length;
                    if (length) {
                      var index = baseSortedIndex(array, value, true) - 1;
                      if (eq(array[index], value)) {
                        return index;
                      }
                    }
                    return -1;
                  }
                  function sortedUniq(array) {
                    return array && array.length ? baseSortedUniq(array) : [];
                  }
                  function sortedUniqBy(array, iteratee2) {
                    return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
                  }
                  function tail(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseSlice(array, 1, length) : [];
                  }
                  function take(array, n, guard) {
                    if (!(array && array.length)) {
                      return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    return baseSlice(array, 0, n < 0 ? 0 : n);
                  }
                  function takeRight(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                      return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    n = length - n;
                    return baseSlice(array, n < 0 ? 0 : n, length);
                  }
                  function takeRightWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
                  }
                  function takeWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
                  }
                  var union = baseRest(function(arrays) {
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                  });
                  var unionBy = baseRest(function(arrays) {
                    var iteratee2 = last2(arrays);
                    if (isArrayLikeObject(iteratee2)) {
                      iteratee2 = undefined2;
                    }
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
                  });
                  var unionWith = baseRest(function(arrays) {
                    var comparator = last2(arrays);
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
                  });
                  function uniq(array) {
                    return array && array.length ? baseUniq(array) : [];
                  }
                  function uniqBy(array, iteratee2) {
                    return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
                  }
                  function uniqWith(array, comparator) {
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    return array && array.length ? baseUniq(array, undefined2, comparator) : [];
                  }
                  function unzip(array) {
                    if (!(array && array.length)) {
                      return [];
                    }
                    var length = 0;
                    array = arrayFilter(array, function(group) {
                      if (isArrayLikeObject(group)) {
                        length = nativeMax(group.length, length);
                        return true;
                      }
                    });
                    return baseTimes(length, function(index) {
                      return arrayMap(array, baseProperty(index));
                    });
                  }
                  function unzipWith(array, iteratee2) {
                    if (!(array && array.length)) {
                      return [];
                    }
                    var result2 = unzip(array);
                    if (iteratee2 == null) {
                      return result2;
                    }
                    return arrayMap(result2, function(group) {
                      return apply(iteratee2, undefined2, group);
                    });
                  }
                  var without = baseRest(function(array, values2) {
                    return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
                  });
                  var xor = baseRest(function(arrays) {
                    return baseXor(arrayFilter(arrays, isArrayLikeObject));
                  });
                  var xorBy = baseRest(function(arrays) {
                    var iteratee2 = last2(arrays);
                    if (isArrayLikeObject(iteratee2)) {
                      iteratee2 = undefined2;
                    }
                    return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
                  });
                  var xorWith = baseRest(function(arrays) {
                    var comparator = last2(arrays);
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
                  });
                  var zip = baseRest(unzip);
                  function zipObject(props, values2) {
                    return baseZipObject(props || [], values2 || [], assignValue);
                  }
                  function zipObjectDeep(props, values2) {
                    return baseZipObject(props || [], values2 || [], baseSet);
                  }
                  var zipWith = baseRest(function(arrays) {
                    var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
                    iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
                    return unzipWith(arrays, iteratee2);
                  });
                  function chain(value) {
                    var result2 = lodash(value);
                    result2.__chain__ = true;
                    return result2;
                  }
                  function tap(value, interceptor) {
                    interceptor(value);
                    return value;
                  }
                  function thru(value, interceptor) {
                    return interceptor(value);
                  }
                  var wrapperAt = flatRest(function(paths) {
                    var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                      return baseAt(object, paths);
                    };
                    if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
                      return this.thru(interceptor);
                    }
                    value = value.slice(start, +start + (length ? 1 : 0));
                    value.__actions__.push({
                      "func": thru,
                      "args": [interceptor],
                      "thisArg": undefined2
                    });
                    return new LodashWrapper(value, this.__chain__).thru(function(array) {
                      if (length && !array.length) {
                        array.push(undefined2);
                      }
                      return array;
                    });
                  });
                  function wrapperChain() {
                    return chain(this);
                  }
                  function wrapperCommit() {
                    return new LodashWrapper(this.value(), this.__chain__);
                  }
                  function wrapperNext() {
                    if (this.__values__ === undefined2) {
                      this.__values__ = toArray(this.value());
                    }
                    var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
                    return { "done": done, "value": value };
                  }
                  function wrapperToIterator() {
                    return this;
                  }
                  function wrapperPlant(value) {
                    var result2, parent2 = this;
                    while (parent2 instanceof baseLodash) {
                      var clone2 = wrapperClone(parent2);
                      clone2.__index__ = 0;
                      clone2.__values__ = undefined2;
                      if (result2) {
                        previous.__wrapped__ = clone2;
                      } else {
                        result2 = clone2;
                      }
                      var previous = clone2;
                      parent2 = parent2.__wrapped__;
                    }
                    previous.__wrapped__ = value;
                    return result2;
                  }
                  function wrapperReverse() {
                    var value = this.__wrapped__;
                    if (value instanceof LazyWrapper) {
                      var wrapped = value;
                      if (this.__actions__.length) {
                        wrapped = new LazyWrapper(this);
                      }
                      wrapped = wrapped.reverse();
                      wrapped.__actions__.push({
                        "func": thru,
                        "args": [reverse],
                        "thisArg": undefined2
                      });
                      return new LodashWrapper(wrapped, this.__chain__);
                    }
                    return this.thru(reverse);
                  }
                  function wrapperValue() {
                    return baseWrapperValue(this.__wrapped__, this.__actions__);
                  }
                  var countBy = createAggregator(function(result2, value, key) {
                    if (hasOwnProperty.call(result2, key)) {
                      ++result2[key];
                    } else {
                      baseAssignValue(result2, key, 1);
                    }
                  });
                  function every(collection, predicate, guard) {
                    var func = isArray2(collection) ? arrayEvery : baseEvery;
                    if (guard && isIterateeCall(collection, predicate, guard)) {
                      predicate = undefined2;
                    }
                    return func(collection, getIteratee(predicate, 3));
                  }
                  function filter(collection, predicate) {
                    var func = isArray2(collection) ? arrayFilter : baseFilter;
                    return func(collection, getIteratee(predicate, 3));
                  }
                  var find = createFind(findIndex);
                  var findLast = createFind(findLastIndex);
                  function flatMap(collection, iteratee2) {
                    return baseFlatten(map(collection, iteratee2), 1);
                  }
                  function flatMapDeep(collection, iteratee2) {
                    return baseFlatten(map(collection, iteratee2), INFINITY);
                  }
                  function flatMapDepth(collection, iteratee2, depth) {
                    depth = depth === undefined2 ? 1 : toInteger(depth);
                    return baseFlatten(map(collection, iteratee2), depth);
                  }
                  function forEach(collection, iteratee2) {
                    var func = isArray2(collection) ? arrayEach : baseEach;
                    return func(collection, getIteratee(iteratee2, 3));
                  }
                  function forEachRight(collection, iteratee2) {
                    var func = isArray2(collection) ? arrayEachRight : baseEachRight;
                    return func(collection, getIteratee(iteratee2, 3));
                  }
                  var groupBy = createAggregator(function(result2, value, key) {
                    if (hasOwnProperty.call(result2, key)) {
                      result2[key].push(value);
                    } else {
                      baseAssignValue(result2, key, [value]);
                    }
                  });
                  function includes(collection, value, fromIndex, guard) {
                    collection = isArrayLike(collection) ? collection : values(collection);
                    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
                    var length = collection.length;
                    if (fromIndex < 0) {
                      fromIndex = nativeMax(length + fromIndex, 0);
                    }
                    return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
                  }
                  var invokeMap = baseRest(function(collection, path, args) {
                    var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
                    baseEach(collection, function(value) {
                      result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                    });
                    return result2;
                  });
                  var keyBy = createAggregator(function(result2, value, key) {
                    baseAssignValue(result2, key, value);
                  });
                  function map(collection, iteratee2) {
                    var func = isArray2(collection) ? arrayMap : baseMap;
                    return func(collection, getIteratee(iteratee2, 3));
                  }
                  function orderBy(collection, iteratees, orders, guard) {
                    if (collection == null) {
                      return [];
                    }
                    if (!isArray2(iteratees)) {
                      iteratees = iteratees == null ? [] : [iteratees];
                    }
                    orders = guard ? undefined2 : orders;
                    if (!isArray2(orders)) {
                      orders = orders == null ? [] : [orders];
                    }
                    return baseOrderBy(collection, iteratees, orders);
                  }
                  var partition = createAggregator(function(result2, value, key) {
                    result2[key ? 0 : 1].push(value);
                  }, function() {
                    return [[], []];
                  });
                  function reduce(collection, iteratee2, accumulator) {
                    var func = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
                    return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
                  }
                  function reduceRight(collection, iteratee2, accumulator) {
                    var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
                    return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
                  }
                  function reject(collection, predicate) {
                    var func = isArray2(collection) ? arrayFilter : baseFilter;
                    return func(collection, negate(getIteratee(predicate, 3)));
                  }
                  function sample(collection) {
                    var func = isArray2(collection) ? arraySample : baseSample;
                    return func(collection);
                  }
                  function sampleSize(collection, n, guard) {
                    if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
                      n = 1;
                    } else {
                      n = toInteger(n);
                    }
                    var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
                    return func(collection, n);
                  }
                  function shuffle(collection) {
                    var func = isArray2(collection) ? arrayShuffle : baseShuffle;
                    return func(collection);
                  }
                  function size(collection) {
                    if (collection == null) {
                      return 0;
                    }
                    if (isArrayLike(collection)) {
                      return isString2(collection) ? stringSize(collection) : collection.length;
                    }
                    var tag = getTag(collection);
                    if (tag == mapTag || tag == setTag) {
                      return collection.size;
                    }
                    return baseKeys(collection).length;
                  }
                  function some(collection, predicate, guard) {
                    var func = isArray2(collection) ? arraySome : baseSome;
                    if (guard && isIterateeCall(collection, predicate, guard)) {
                      predicate = undefined2;
                    }
                    return func(collection, getIteratee(predicate, 3));
                  }
                  var sortBy = baseRest(function(collection, iteratees) {
                    if (collection == null) {
                      return [];
                    }
                    var length = iteratees.length;
                    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                      iteratees = [];
                    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                      iteratees = [iteratees[0]];
                    }
                    return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                  });
                  var now = ctxNow || function() {
                    return root.Date.now();
                  };
                  function after(n, func) {
                    if (typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    n = toInteger(n);
                    return function() {
                      if (--n < 1) {
                        return func.apply(this, arguments);
                      }
                    };
                  }
                  function ary(func, n, guard) {
                    n = guard ? undefined2 : n;
                    n = func && n == null ? func.length : n;
                    return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
                  }
                  function before(n, func) {
                    var result2;
                    if (typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    n = toInteger(n);
                    return function() {
                      if (--n > 0) {
                        result2 = func.apply(this, arguments);
                      }
                      if (n <= 1) {
                        func = undefined2;
                      }
                      return result2;
                    };
                  }
                  var bind = baseRest(function(func, thisArg, partials) {
                    var bitmask = WRAP_BIND_FLAG;
                    if (partials.length) {
                      var holders = replaceHolders(partials, getHolder(bind));
                      bitmask |= WRAP_PARTIAL_FLAG;
                    }
                    return createWrap(func, bitmask, thisArg, partials, holders);
                  });
                  var bindKey = baseRest(function(object, key, partials) {
                    var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                    if (partials.length) {
                      var holders = replaceHolders(partials, getHolder(bindKey));
                      bitmask |= WRAP_PARTIAL_FLAG;
                    }
                    return createWrap(key, bitmask, object, partials, holders);
                  });
                  function curry(func, arity, guard) {
                    arity = guard ? undefined2 : arity;
                    var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
                    result2.placeholder = curry.placeholder;
                    return result2;
                  }
                  function curryRight(func, arity, guard) {
                    arity = guard ? undefined2 : arity;
                    var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
                    result2.placeholder = curryRight.placeholder;
                    return result2;
                  }
                  function debounce(func, wait, options) {
                    var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
                    if (typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    wait = toNumber(wait) || 0;
                    if (isObject2(options)) {
                      leading = !!options.leading;
                      maxing = "maxWait" in options;
                      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                      trailing = "trailing" in options ? !!options.trailing : trailing;
                    }
                    function invokeFunc(time) {
                      var args = lastArgs, thisArg = lastThis;
                      lastArgs = lastThis = undefined2;
                      lastInvokeTime = time;
                      result2 = func.apply(thisArg, args);
                      return result2;
                    }
                    function leadingEdge(time) {
                      lastInvokeTime = time;
                      timerId = setTimeout2(timerExpired, wait);
                      return leading ? invokeFunc(time) : result2;
                    }
                    function remainingWait(time) {
                      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
                    }
                    function shouldInvoke(time) {
                      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                      return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
                    }
                    function timerExpired() {
                      var time = now();
                      if (shouldInvoke(time)) {
                        return trailingEdge(time);
                      }
                      timerId = setTimeout2(timerExpired, remainingWait(time));
                    }
                    function trailingEdge(time) {
                      timerId = undefined2;
                      if (trailing && lastArgs) {
                        return invokeFunc(time);
                      }
                      lastArgs = lastThis = undefined2;
                      return result2;
                    }
                    function cancel() {
                      if (timerId !== undefined2) {
                        clearTimeout(timerId);
                      }
                      lastInvokeTime = 0;
                      lastArgs = lastCallTime = lastThis = timerId = undefined2;
                    }
                    function flush() {
                      return timerId === undefined2 ? result2 : trailingEdge(now());
                    }
                    function debounced() {
                      var time = now(), isInvoking = shouldInvoke(time);
                      lastArgs = arguments;
                      lastThis = this;
                      lastCallTime = time;
                      if (isInvoking) {
                        if (timerId === undefined2) {
                          return leadingEdge(lastCallTime);
                        }
                        if (maxing) {
                          clearTimeout(timerId);
                          timerId = setTimeout2(timerExpired, wait);
                          return invokeFunc(lastCallTime);
                        }
                      }
                      if (timerId === undefined2) {
                        timerId = setTimeout2(timerExpired, wait);
                      }
                      return result2;
                    }
                    debounced.cancel = cancel;
                    debounced.flush = flush;
                    return debounced;
                  }
                  var defer = baseRest(function(func, args) {
                    return baseDelay(func, 1, args);
                  });
                  var delay = baseRest(function(func, wait, args) {
                    return baseDelay(func, toNumber(wait) || 0, args);
                  });
                  function flip(func) {
                    return createWrap(func, WRAP_FLIP_FLAG);
                  }
                  function memoize(func, resolver) {
                    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    var memoized = function() {
                      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                      if (cache.has(key)) {
                        return cache.get(key);
                      }
                      var result2 = func.apply(this, args);
                      memoized.cache = cache.set(key, result2) || cache;
                      return result2;
                    };
                    memoized.cache = new (memoize.Cache || MapCache)();
                    return memoized;
                  }
                  memoize.Cache = MapCache;
                  function negate(predicate) {
                    if (typeof predicate != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return function() {
                      var args = arguments;
                      switch (args.length) {
                        case 0:
                          return !predicate.call(this);
                        case 1:
                          return !predicate.call(this, args[0]);
                        case 2:
                          return !predicate.call(this, args[0], args[1]);
                        case 3:
                          return !predicate.call(this, args[0], args[1], args[2]);
                      }
                      return !predicate.apply(this, args);
                    };
                  }
                  function once(func) {
                    return before(2, func);
                  }
                  var overArgs = castRest(function(func, transforms) {
                    transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
                    var funcsLength = transforms.length;
                    return baseRest(function(args) {
                      var index = -1, length = nativeMin(args.length, funcsLength);
                      while (++index < length) {
                        args[index] = transforms[index].call(this, args[index]);
                      }
                      return apply(func, this, args);
                    });
                  });
                  var partial = baseRest(function(func, partials) {
                    var holders = replaceHolders(partials, getHolder(partial));
                    return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
                  });
                  var partialRight = baseRest(function(func, partials) {
                    var holders = replaceHolders(partials, getHolder(partialRight));
                    return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
                  });
                  var rearg = flatRest(function(func, indexes) {
                    return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
                  });
                  function rest(func, start) {
                    if (typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    start = start === undefined2 ? start : toInteger(start);
                    return baseRest(func, start);
                  }
                  function spread(func, start) {
                    if (typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    start = start == null ? 0 : nativeMax(toInteger(start), 0);
                    return baseRest(function(args) {
                      var array = args[start], otherArgs = castSlice(args, 0, start);
                      if (array) {
                        arrayPush(otherArgs, array);
                      }
                      return apply(func, this, otherArgs);
                    });
                  }
                  function throttle(func, wait, options) {
                    var leading = true, trailing = true;
                    if (typeof func != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    if (isObject2(options)) {
                      leading = "leading" in options ? !!options.leading : leading;
                      trailing = "trailing" in options ? !!options.trailing : trailing;
                    }
                    return debounce(func, wait, {
                      "leading": leading,
                      "maxWait": wait,
                      "trailing": trailing
                    });
                  }
                  function unary(func) {
                    return ary(func, 1);
                  }
                  function wrap(value, wrapper) {
                    return partial(castFunction(wrapper), value);
                  }
                  function castArray() {
                    if (!arguments.length) {
                      return [];
                    }
                    var value = arguments[0];
                    return isArray2(value) ? value : [value];
                  }
                  function clone(value) {
                    return baseClone(value, CLONE_SYMBOLS_FLAG);
                  }
                  function cloneWith(value, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                  }
                  function cloneDeep(value) {
                    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                  }
                  function cloneDeepWith(value, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                  }
                  function conformsTo(object, source) {
                    return source == null || baseConformsTo(object, source, keys(source));
                  }
                  function eq(value, other) {
                    return value === other || value !== value && other !== other;
                  }
                  var gt = createRelationalOperation(baseGt);
                  var gte = createRelationalOperation(function(value, other) {
                    return value >= other;
                  });
                  var isArguments = baseIsArguments(function() {
                    return arguments;
                  }()) ? baseIsArguments : function(value) {
                    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
                  };
                  var isArray2 = Array2.isArray;
                  var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
                  function isArrayLike(value) {
                    return value != null && isLength(value.length) && !isFunction(value);
                  }
                  function isArrayLikeObject(value) {
                    return isObjectLike(value) && isArrayLike(value);
                  }
                  function isBoolean(value) {
                    return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
                  }
                  var isBuffer = nativeIsBuffer || stubFalse;
                  var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
                  function isElement(value) {
                    return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                  }
                  function isEmpty(value) {
                    if (value == null) {
                      return true;
                    }
                    if (isArrayLike(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                      return !value.length;
                    }
                    var tag = getTag(value);
                    if (tag == mapTag || tag == setTag) {
                      return !value.size;
                    }
                    if (isPrototype(value)) {
                      return !baseKeys(value).length;
                    }
                    for (var key in value) {
                      if (hasOwnProperty.call(value, key)) {
                        return false;
                      }
                    }
                    return true;
                  }
                  function isEqual(value, other) {
                    return baseIsEqual(value, other);
                  }
                  function isEqualWith(value, other, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    var result2 = customizer ? customizer(value, other) : undefined2;
                    return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
                  }
                  function isError(value) {
                    if (!isObjectLike(value)) {
                      return false;
                    }
                    var tag = baseGetTag(value);
                    return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
                  }
                  function isFinite(value) {
                    return typeof value == "number" && nativeIsFinite(value);
                  }
                  function isFunction(value) {
                    if (!isObject2(value)) {
                      return false;
                    }
                    var tag = baseGetTag(value);
                    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                  }
                  function isInteger(value) {
                    return typeof value == "number" && value == toInteger(value);
                  }
                  function isLength(value) {
                    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                  }
                  function isObject2(value) {
                    var type = typeof value;
                    return value != null && (type == "object" || type == "function");
                  }
                  function isObjectLike(value) {
                    return value != null && typeof value == "object";
                  }
                  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
                  function isMatch(object, source) {
                    return object === source || baseIsMatch(object, source, getMatchData(source));
                  }
                  function isMatchWith(object, source, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return baseIsMatch(object, source, getMatchData(source), customizer);
                  }
                  function isNaN(value) {
                    return isNumber(value) && value != +value;
                  }
                  function isNative(value) {
                    if (isMaskable(value)) {
                      throw new Error2(CORE_ERROR_TEXT);
                    }
                    return baseIsNative(value);
                  }
                  function isNull(value) {
                    return value === null;
                  }
                  function isNil(value) {
                    return value == null;
                  }
                  function isNumber(value) {
                    return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
                  }
                  function isPlainObject(value) {
                    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                      return false;
                    }
                    var proto = getPrototype(value);
                    if (proto === null) {
                      return true;
                    }
                    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
                    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
                  }
                  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
                  function isSafeInteger(value) {
                    return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                  }
                  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
                  function isString2(value) {
                    return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
                  }
                  function isSymbol2(value) {
                    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
                  }
                  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
                  function isUndefined(value) {
                    return value === undefined2;
                  }
                  function isWeakMap(value) {
                    return isObjectLike(value) && getTag(value) == weakMapTag;
                  }
                  function isWeakSet(value) {
                    return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                  }
                  var lt = createRelationalOperation(baseLt);
                  var lte = createRelationalOperation(function(value, other) {
                    return value <= other;
                  });
                  function toArray(value) {
                    if (!value) {
                      return [];
                    }
                    if (isArrayLike(value)) {
                      return isString2(value) ? stringToArray(value) : copyArray(value);
                    }
                    if (symIterator && value[symIterator]) {
                      return iteratorToArray(value[symIterator]());
                    }
                    var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
                    return func(value);
                  }
                  function toFinite(value) {
                    if (!value) {
                      return value === 0 ? value : 0;
                    }
                    value = toNumber(value);
                    if (value === INFINITY || value === -INFINITY) {
                      var sign = value < 0 ? -1 : 1;
                      return sign * MAX_INTEGER;
                    }
                    return value === value ? value : 0;
                  }
                  function toInteger(value) {
                    var result2 = toFinite(value), remainder = result2 % 1;
                    return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
                  }
                  function toLength(value) {
                    return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                  }
                  function toNumber(value) {
                    if (typeof value == "number") {
                      return value;
                    }
                    if (isSymbol2(value)) {
                      return NAN;
                    }
                    if (isObject2(value)) {
                      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                      value = isObject2(other) ? other + "" : other;
                    }
                    if (typeof value != "string") {
                      return value === 0 ? value : +value;
                    }
                    value = value.replace(reTrim, "");
                    var isBinary = reIsBinary.test(value);
                    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
                  }
                  function toPlainObject(value) {
                    return copyObject(value, keysIn(value));
                  }
                  function toSafeInteger(value) {
                    return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
                  }
                  function toString(value) {
                    return value == null ? "" : baseToString(value);
                  }
                  var assign = createAssigner(function(object, source) {
                    if (isPrototype(source) || isArrayLike(source)) {
                      copyObject(source, keys(source), object);
                      return;
                    }
                    for (var key in source) {
                      if (hasOwnProperty.call(source, key)) {
                        assignValue(object, key, source[key]);
                      }
                    }
                  });
                  var assignIn = createAssigner(function(object, source) {
                    copyObject(source, keysIn(source), object);
                  });
                  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
                    copyObject(source, keysIn(source), object, customizer);
                  });
                  var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
                    copyObject(source, keys(source), object, customizer);
                  });
                  var at = flatRest(baseAt);
                  function create(prototype, properties) {
                    var result2 = baseCreate(prototype);
                    return properties == null ? result2 : baseAssign(result2, properties);
                  }
                  var defaults = baseRest(function(object, sources) {
                    object = Object2(object);
                    var index = -1;
                    var length = sources.length;
                    var guard = length > 2 ? sources[2] : undefined2;
                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                      length = 1;
                    }
                    while (++index < length) {
                      var source = sources[index];
                      var props = keysIn(source);
                      var propsIndex = -1;
                      var propsLength = props.length;
                      while (++propsIndex < propsLength) {
                        var key = props[propsIndex];
                        var value = object[key];
                        if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                          object[key] = source[key];
                        }
                      }
                    }
                    return object;
                  });
                  var defaultsDeep = baseRest(function(args) {
                    args.push(undefined2, customDefaultsMerge);
                    return apply(mergeWith, undefined2, args);
                  });
                  function findKey(object, predicate) {
                    return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                  }
                  function findLastKey(object, predicate) {
                    return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                  }
                  function forIn(object, iteratee2) {
                    return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
                  }
                  function forInRight(object, iteratee2) {
                    return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
                  }
                  function forOwn(object, iteratee2) {
                    return object && baseForOwn(object, getIteratee(iteratee2, 3));
                  }
                  function forOwnRight(object, iteratee2) {
                    return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
                  }
                  function functions(object) {
                    return object == null ? [] : baseFunctions(object, keys(object));
                  }
                  function functionsIn(object) {
                    return object == null ? [] : baseFunctions(object, keysIn(object));
                  }
                  function get(object, path, defaultValue) {
                    var result2 = object == null ? undefined2 : baseGet(object, path);
                    return result2 === undefined2 ? defaultValue : result2;
                  }
                  function has(object, path) {
                    return object != null && hasPath(object, path, baseHas);
                  }
                  function hasIn(object, path) {
                    return object != null && hasPath(object, path, baseHasIn);
                  }
                  var invert = createInverter(function(result2, value, key) {
                    if (value != null && typeof value.toString != "function") {
                      value = nativeObjectToString.call(value);
                    }
                    result2[value] = key;
                  }, constant(identity));
                  var invertBy = createInverter(function(result2, value, key) {
                    if (value != null && typeof value.toString != "function") {
                      value = nativeObjectToString.call(value);
                    }
                    if (hasOwnProperty.call(result2, value)) {
                      result2[value].push(key);
                    } else {
                      result2[value] = [key];
                    }
                  }, getIteratee);
                  var invoke = baseRest(baseInvoke);
                  function keys(object) {
                    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                  }
                  function keysIn(object) {
                    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                  }
                  function mapKeys(object, iteratee2) {
                    var result2 = {};
                    iteratee2 = getIteratee(iteratee2, 3);
                    baseForOwn(object, function(value, key, object2) {
                      baseAssignValue(result2, iteratee2(value, key, object2), value);
                    });
                    return result2;
                  }
                  function mapValues(object, iteratee2) {
                    var result2 = {};
                    iteratee2 = getIteratee(iteratee2, 3);
                    baseForOwn(object, function(value, key, object2) {
                      baseAssignValue(result2, key, iteratee2(value, key, object2));
                    });
                    return result2;
                  }
                  var merge = createAssigner(function(object, source, srcIndex) {
                    baseMerge(object, source, srcIndex);
                  });
                  var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
                    baseMerge(object, source, srcIndex, customizer);
                  });
                  var omit = flatRest(function(object, paths) {
                    var result2 = {};
                    if (object == null) {
                      return result2;
                    }
                    var isDeep = false;
                    paths = arrayMap(paths, function(path) {
                      path = castPath(path, object);
                      isDeep || (isDeep = path.length > 1);
                      return path;
                    });
                    copyObject(object, getAllKeysIn(object), result2);
                    if (isDeep) {
                      result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                    }
                    var length = paths.length;
                    while (length--) {
                      baseUnset(result2, paths[length]);
                    }
                    return result2;
                  });
                  function omitBy(object, predicate) {
                    return pickBy(object, negate(getIteratee(predicate)));
                  }
                  var pick = flatRest(function(object, paths) {
                    return object == null ? {} : basePick(object, paths);
                  });
                  function pickBy(object, predicate) {
                    if (object == null) {
                      return {};
                    }
                    var props = arrayMap(getAllKeysIn(object), function(prop) {
                      return [prop];
                    });
                    predicate = getIteratee(predicate);
                    return basePickBy(object, props, function(value, path) {
                      return predicate(value, path[0]);
                    });
                  }
                  function result(object, path, defaultValue) {
                    path = castPath(path, object);
                    var index = -1, length = path.length;
                    if (!length) {
                      length = 1;
                      object = undefined2;
                    }
                    while (++index < length) {
                      var value = object == null ? undefined2 : object[toKey(path[index])];
                      if (value === undefined2) {
                        index = length;
                        value = defaultValue;
                      }
                      object = isFunction(value) ? value.call(object) : value;
                    }
                    return object;
                  }
                  function set(object, path, value) {
                    return object == null ? object : baseSet(object, path, value);
                  }
                  function setWith(object, path, value, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return object == null ? object : baseSet(object, path, value, customizer);
                  }
                  var toPairs = createToPairs(keys);
                  var toPairsIn = createToPairs(keysIn);
                  function transform2(object, iteratee2, accumulator) {
                    var isArr = isArray2(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
                    iteratee2 = getIteratee(iteratee2, 4);
                    if (accumulator == null) {
                      var Ctor = object && object.constructor;
                      if (isArrLike) {
                        accumulator = isArr ? new Ctor() : [];
                      } else if (isObject2(object)) {
                        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                      } else {
                        accumulator = {};
                      }
                    }
                    (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
                      return iteratee2(accumulator, value, index, object2);
                    });
                    return accumulator;
                  }
                  function unset(object, path) {
                    return object == null ? true : baseUnset(object, path);
                  }
                  function update(object, path, updater) {
                    return object == null ? object : baseUpdate(object, path, castFunction(updater));
                  }
                  function updateWith(object, path, updater, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                  }
                  function values(object) {
                    return object == null ? [] : baseValues(object, keys(object));
                  }
                  function valuesIn(object) {
                    return object == null ? [] : baseValues(object, keysIn(object));
                  }
                  function clamp(number, lower, upper) {
                    if (upper === undefined2) {
                      upper = lower;
                      lower = undefined2;
                    }
                    if (upper !== undefined2) {
                      upper = toNumber(upper);
                      upper = upper === upper ? upper : 0;
                    }
                    if (lower !== undefined2) {
                      lower = toNumber(lower);
                      lower = lower === lower ? lower : 0;
                    }
                    return baseClamp(toNumber(number), lower, upper);
                  }
                  function inRange(number, start, end) {
                    start = toFinite(start);
                    if (end === undefined2) {
                      end = start;
                      start = 0;
                    } else {
                      end = toFinite(end);
                    }
                    number = toNumber(number);
                    return baseInRange(number, start, end);
                  }
                  function random(lower, upper, floating) {
                    if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
                      upper = floating = undefined2;
                    }
                    if (floating === undefined2) {
                      if (typeof upper == "boolean") {
                        floating = upper;
                        upper = undefined2;
                      } else if (typeof lower == "boolean") {
                        floating = lower;
                        lower = undefined2;
                      }
                    }
                    if (lower === undefined2 && upper === undefined2) {
                      lower = 0;
                      upper = 1;
                    } else {
                      lower = toFinite(lower);
                      if (upper === undefined2) {
                        upper = lower;
                        lower = 0;
                      } else {
                        upper = toFinite(upper);
                      }
                    }
                    if (lower > upper) {
                      var temp = lower;
                      lower = upper;
                      upper = temp;
                    }
                    if (floating || lower % 1 || upper % 1) {
                      var rand = nativeRandom();
                      return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
                    }
                    return baseRandom(lower, upper);
                  }
                  var camelCase = createCompounder(function(result2, word, index) {
                    word = word.toLowerCase();
                    return result2 + (index ? capitalize2(word) : word);
                  });
                  function capitalize2(string) {
                    return upperFirst(toString(string).toLowerCase());
                  }
                  function deburr(string) {
                    string = toString(string);
                    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
                  }
                  function endsWith(string, target, position) {
                    string = toString(string);
                    target = baseToString(target);
                    var length = string.length;
                    position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
                    var end = position;
                    position -= target.length;
                    return position >= 0 && string.slice(position, end) == target;
                  }
                  function escape(string) {
                    string = toString(string);
                    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
                  }
                  function escapeRegExp(string) {
                    string = toString(string);
                    return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
                  }
                  var kebabCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? "-" : "") + word.toLowerCase();
                  });
                  var lowerCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? " " : "") + word.toLowerCase();
                  });
                  var lowerFirst = createCaseFirst("toLowerCase");
                  function pad(string, length, chars) {
                    string = toString(string);
                    length = toInteger(length);
                    var strLength = length ? stringSize(string) : 0;
                    if (!length || strLength >= length) {
                      return string;
                    }
                    var mid = (length - strLength) / 2;
                    return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
                  }
                  function padEnd(string, length, chars) {
                    string = toString(string);
                    length = toInteger(length);
                    var strLength = length ? stringSize(string) : 0;
                    return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
                  }
                  function padStart(string, length, chars) {
                    string = toString(string);
                    length = toInteger(length);
                    var strLength = length ? stringSize(string) : 0;
                    return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
                  }
                  function parseInt2(string, radix, guard) {
                    if (guard || radix == null) {
                      radix = 0;
                    } else if (radix) {
                      radix = +radix;
                    }
                    return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
                  }
                  function repeat(string, n, guard) {
                    if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
                      n = 1;
                    } else {
                      n = toInteger(n);
                    }
                    return baseRepeat(toString(string), n);
                  }
                  function replace() {
                    var args = arguments, string = toString(args[0]);
                    return args.length < 3 ? string : string.replace(args[1], args[2]);
                  }
                  var snakeCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? "_" : "") + word.toLowerCase();
                  });
                  function split(string, separator, limit) {
                    if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
                      separator = limit = undefined2;
                    }
                    limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
                    if (!limit) {
                      return [];
                    }
                    string = toString(string);
                    if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
                      separator = baseToString(separator);
                      if (!separator && hasUnicode(string)) {
                        return castSlice(stringToArray(string), 0, limit);
                      }
                    }
                    return string.split(separator, limit);
                  }
                  var startCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? " " : "") + upperFirst(word);
                  });
                  function startsWith2(string, target, position) {
                    string = toString(string);
                    position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
                    target = baseToString(target);
                    return string.slice(position, position + target.length) == target;
                  }
                  function template(string, options, guard) {
                    var settings = lodash.templateSettings;
                    if (guard && isIterateeCall(string, options, guard)) {
                      options = undefined2;
                    }
                    string = toString(string);
                    options = assignInWith({}, options, settings, customDefaultsAssignIn);
                    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
                    var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
                    var reDelimiters = RegExp2(
                      (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
                      "g"
                    );
                    var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
                    string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                      interpolateValue || (interpolateValue = esTemplateValue);
                      source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                      if (escapeValue) {
                        isEscaping = true;
                        source += "' +\n__e(" + escapeValue + ") +\n'";
                      }
                      if (evaluateValue) {
                        isEvaluating = true;
                        source += "';\n" + evaluateValue + ";\n__p += '";
                      }
                      if (interpolateValue) {
                        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                      }
                      index = offset + match.length;
                      return match;
                    });
                    source += "';\n";
                    var variable = hasOwnProperty.call(options, "variable") && options.variable;
                    if (!variable) {
                      source = "with (obj) {\n" + source + "\n}\n";
                    }
                    source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
                    source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
                    var result2 = attempt(function() {
                      return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
                    });
                    result2.source = source;
                    if (isError(result2)) {
                      throw result2;
                    }
                    return result2;
                  }
                  function toLower(value) {
                    return toString(value).toLowerCase();
                  }
                  function toUpper(value) {
                    return toString(value).toUpperCase();
                  }
                  function trim(string, chars, guard) {
                    string = toString(string);
                    if (string && (guard || chars === undefined2)) {
                      return string.replace(reTrim, "");
                    }
                    if (!string || !(chars = baseToString(chars))) {
                      return string;
                    }
                    var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
                    return castSlice(strSymbols, start, end).join("");
                  }
                  function trimEnd(string, chars, guard) {
                    string = toString(string);
                    if (string && (guard || chars === undefined2)) {
                      return string.replace(reTrimEnd, "");
                    }
                    if (!string || !(chars = baseToString(chars))) {
                      return string;
                    }
                    var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
                    return castSlice(strSymbols, 0, end).join("");
                  }
                  function trimStart(string, chars, guard) {
                    string = toString(string);
                    if (string && (guard || chars === undefined2)) {
                      return string.replace(reTrimStart, "");
                    }
                    if (!string || !(chars = baseToString(chars))) {
                      return string;
                    }
                    var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
                    return castSlice(strSymbols, start).join("");
                  }
                  function truncate(string, options) {
                    var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
                    if (isObject2(options)) {
                      var separator = "separator" in options ? options.separator : separator;
                      length = "length" in options ? toInteger(options.length) : length;
                      omission = "omission" in options ? baseToString(options.omission) : omission;
                    }
                    string = toString(string);
                    var strLength = string.length;
                    if (hasUnicode(string)) {
                      var strSymbols = stringToArray(string);
                      strLength = strSymbols.length;
                    }
                    if (length >= strLength) {
                      return string;
                    }
                    var end = length - stringSize(omission);
                    if (end < 1) {
                      return omission;
                    }
                    var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
                    if (separator === undefined2) {
                      return result2 + omission;
                    }
                    if (strSymbols) {
                      end += result2.length - end;
                    }
                    if (isRegExp(separator)) {
                      if (string.slice(end).search(separator)) {
                        var match, substring = result2;
                        if (!separator.global) {
                          separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                        }
                        separator.lastIndex = 0;
                        while (match = separator.exec(substring)) {
                          var newEnd = match.index;
                        }
                        result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
                      }
                    } else if (string.indexOf(baseToString(separator), end) != end) {
                      var index = result2.lastIndexOf(separator);
                      if (index > -1) {
                        result2 = result2.slice(0, index);
                      }
                    }
                    return result2 + omission;
                  }
                  function unescape(string) {
                    string = toString(string);
                    return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
                  }
                  var upperCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? " " : "") + word.toUpperCase();
                  });
                  var upperFirst = createCaseFirst("toUpperCase");
                  function words(string, pattern, guard) {
                    string = toString(string);
                    pattern = guard ? undefined2 : pattern;
                    if (pattern === undefined2) {
                      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                    }
                    return string.match(pattern) || [];
                  }
                  var attempt = baseRest(function(func, args) {
                    try {
                      return apply(func, undefined2, args);
                    } catch (e) {
                      return isError(e) ? e : new Error2(e);
                    }
                  });
                  var bindAll = flatRest(function(object, methodNames) {
                    arrayEach(methodNames, function(key) {
                      key = toKey(key);
                      baseAssignValue(object, key, bind(object[key], object));
                    });
                    return object;
                  });
                  function cond(pairs) {
                    var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
                    pairs = !length ? [] : arrayMap(pairs, function(pair) {
                      if (typeof pair[1] != "function") {
                        throw new TypeError(FUNC_ERROR_TEXT);
                      }
                      return [toIteratee(pair[0]), pair[1]];
                    });
                    return baseRest(function(args) {
                      var index = -1;
                      while (++index < length) {
                        var pair = pairs[index];
                        if (apply(pair[0], this, args)) {
                          return apply(pair[1], this, args);
                        }
                      }
                    });
                  }
                  function conforms(source) {
                    return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                  }
                  function constant(value) {
                    return function() {
                      return value;
                    };
                  }
                  function defaultTo(value, defaultValue) {
                    return value == null || value !== value ? defaultValue : value;
                  }
                  var flow = createFlow();
                  var flowRight = createFlow(true);
                  function identity(value) {
                    return value;
                  }
                  function iteratee(func) {
                    return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
                  }
                  function matches(source) {
                    return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                  }
                  function matchesProperty(path, srcValue) {
                    return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                  }
                  var method = baseRest(function(path, args) {
                    return function(object) {
                      return baseInvoke(object, path, args);
                    };
                  });
                  var methodOf = baseRest(function(object, args) {
                    return function(path) {
                      return baseInvoke(object, path, args);
                    };
                  });
                  function mixin(object, source, options) {
                    var props = keys(source), methodNames = baseFunctions(source, props);
                    if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
                      options = source;
                      source = object;
                      object = this;
                      methodNames = baseFunctions(source, keys(source));
                    }
                    var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
                    arrayEach(methodNames, function(methodName) {
                      var func = source[methodName];
                      object[methodName] = func;
                      if (isFunc) {
                        object.prototype[methodName] = function() {
                          var chainAll = this.__chain__;
                          if (chain2 || chainAll) {
                            var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                            actions.push({ "func": func, "args": arguments, "thisArg": object });
                            result2.__chain__ = chainAll;
                            return result2;
                          }
                          return func.apply(object, arrayPush([this.value()], arguments));
                        };
                      }
                    });
                    return object;
                  }
                  function noConflict() {
                    if (root._ === this) {
                      root._ = oldDash;
                    }
                    return this;
                  }
                  function noop() {
                  }
                  function nthArg(n) {
                    n = toInteger(n);
                    return baseRest(function(args) {
                      return baseNth(args, n);
                    });
                  }
                  var over = createOver(arrayMap);
                  var overEvery = createOver(arrayEvery);
                  var overSome = createOver(arraySome);
                  function property(path) {
                    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                  }
                  function propertyOf(object) {
                    return function(path) {
                      return object == null ? undefined2 : baseGet(object, path);
                    };
                  }
                  var range = createRange();
                  var rangeRight = createRange(true);
                  function stubArray() {
                    return [];
                  }
                  function stubFalse() {
                    return false;
                  }
                  function stubObject() {
                    return {};
                  }
                  function stubString() {
                    return "";
                  }
                  function stubTrue() {
                    return true;
                  }
                  function times(n, iteratee2) {
                    n = toInteger(n);
                    if (n < 1 || n > MAX_SAFE_INTEGER) {
                      return [];
                    }
                    var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
                    iteratee2 = getIteratee(iteratee2);
                    n -= MAX_ARRAY_LENGTH;
                    var result2 = baseTimes(length, iteratee2);
                    while (++index < n) {
                      iteratee2(index);
                    }
                    return result2;
                  }
                  function toPath(value) {
                    if (isArray2(value)) {
                      return arrayMap(value, toKey);
                    }
                    return isSymbol2(value) ? [value] : copyArray(stringToPath(toString(value)));
                  }
                  function uniqueId(prefix) {
                    var id = ++idCounter;
                    return toString(prefix) + id;
                  }
                  var add = createMathOperation(function(augend, addend) {
                    return augend + addend;
                  }, 0);
                  var ceil = createRound("ceil");
                  var divide = createMathOperation(function(dividend, divisor) {
                    return dividend / divisor;
                  }, 1);
                  var floor = createRound("floor");
                  function max(array) {
                    return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
                  }
                  function maxBy(array, iteratee2) {
                    return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
                  }
                  function mean(array) {
                    return baseMean(array, identity);
                  }
                  function meanBy(array, iteratee2) {
                    return baseMean(array, getIteratee(iteratee2, 2));
                  }
                  function min(array) {
                    return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
                  }
                  function minBy(array, iteratee2) {
                    return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
                  }
                  var multiply = createMathOperation(function(multiplier, multiplicand) {
                    return multiplier * multiplicand;
                  }, 1);
                  var round = createRound("round");
                  var subtract = createMathOperation(function(minuend, subtrahend) {
                    return minuend - subtrahend;
                  }, 0);
                  function sum(array) {
                    return array && array.length ? baseSum(array, identity) : 0;
                  }
                  function sumBy(array, iteratee2) {
                    return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
                  }
                  lodash.after = after;
                  lodash.ary = ary;
                  lodash.assign = assign;
                  lodash.assignIn = assignIn;
                  lodash.assignInWith = assignInWith;
                  lodash.assignWith = assignWith;
                  lodash.at = at;
                  lodash.before = before;
                  lodash.bind = bind;
                  lodash.bindAll = bindAll;
                  lodash.bindKey = bindKey;
                  lodash.castArray = castArray;
                  lodash.chain = chain;
                  lodash.chunk = chunk;
                  lodash.compact = compact;
                  lodash.concat = concat;
                  lodash.cond = cond;
                  lodash.conforms = conforms;
                  lodash.constant = constant;
                  lodash.countBy = countBy;
                  lodash.create = create;
                  lodash.curry = curry;
                  lodash.curryRight = curryRight;
                  lodash.debounce = debounce;
                  lodash.defaults = defaults;
                  lodash.defaultsDeep = defaultsDeep;
                  lodash.defer = defer;
                  lodash.delay = delay;
                  lodash.difference = difference;
                  lodash.differenceBy = differenceBy;
                  lodash.differenceWith = differenceWith;
                  lodash.drop = drop;
                  lodash.dropRight = dropRight;
                  lodash.dropRightWhile = dropRightWhile;
                  lodash.dropWhile = dropWhile;
                  lodash.fill = fill;
                  lodash.filter = filter;
                  lodash.flatMap = flatMap;
                  lodash.flatMapDeep = flatMapDeep;
                  lodash.flatMapDepth = flatMapDepth;
                  lodash.flatten = flatten;
                  lodash.flattenDeep = flattenDeep;
                  lodash.flattenDepth = flattenDepth;
                  lodash.flip = flip;
                  lodash.flow = flow;
                  lodash.flowRight = flowRight;
                  lodash.fromPairs = fromPairs;
                  lodash.functions = functions;
                  lodash.functionsIn = functionsIn;
                  lodash.groupBy = groupBy;
                  lodash.initial = initial;
                  lodash.intersection = intersection;
                  lodash.intersectionBy = intersectionBy;
                  lodash.intersectionWith = intersectionWith;
                  lodash.invert = invert;
                  lodash.invertBy = invertBy;
                  lodash.invokeMap = invokeMap;
                  lodash.iteratee = iteratee;
                  lodash.keyBy = keyBy;
                  lodash.keys = keys;
                  lodash.keysIn = keysIn;
                  lodash.map = map;
                  lodash.mapKeys = mapKeys;
                  lodash.mapValues = mapValues;
                  lodash.matches = matches;
                  lodash.matchesProperty = matchesProperty;
                  lodash.memoize = memoize;
                  lodash.merge = merge;
                  lodash.mergeWith = mergeWith;
                  lodash.method = method;
                  lodash.methodOf = methodOf;
                  lodash.mixin = mixin;
                  lodash.negate = negate;
                  lodash.nthArg = nthArg;
                  lodash.omit = omit;
                  lodash.omitBy = omitBy;
                  lodash.once = once;
                  lodash.orderBy = orderBy;
                  lodash.over = over;
                  lodash.overArgs = overArgs;
                  lodash.overEvery = overEvery;
                  lodash.overSome = overSome;
                  lodash.partial = partial;
                  lodash.partialRight = partialRight;
                  lodash.partition = partition;
                  lodash.pick = pick;
                  lodash.pickBy = pickBy;
                  lodash.property = property;
                  lodash.propertyOf = propertyOf;
                  lodash.pull = pull;
                  lodash.pullAll = pullAll;
                  lodash.pullAllBy = pullAllBy;
                  lodash.pullAllWith = pullAllWith;
                  lodash.pullAt = pullAt;
                  lodash.range = range;
                  lodash.rangeRight = rangeRight;
                  lodash.rearg = rearg;
                  lodash.reject = reject;
                  lodash.remove = remove;
                  lodash.rest = rest;
                  lodash.reverse = reverse;
                  lodash.sampleSize = sampleSize;
                  lodash.set = set;
                  lodash.setWith = setWith;
                  lodash.shuffle = shuffle;
                  lodash.slice = slice;
                  lodash.sortBy = sortBy;
                  lodash.sortedUniq = sortedUniq;
                  lodash.sortedUniqBy = sortedUniqBy;
                  lodash.split = split;
                  lodash.spread = spread;
                  lodash.tail = tail;
                  lodash.take = take;
                  lodash.takeRight = takeRight;
                  lodash.takeRightWhile = takeRightWhile;
                  lodash.takeWhile = takeWhile;
                  lodash.tap = tap;
                  lodash.throttle = throttle;
                  lodash.thru = thru;
                  lodash.toArray = toArray;
                  lodash.toPairs = toPairs;
                  lodash.toPairsIn = toPairsIn;
                  lodash.toPath = toPath;
                  lodash.toPlainObject = toPlainObject;
                  lodash.transform = transform2;
                  lodash.unary = unary;
                  lodash.union = union;
                  lodash.unionBy = unionBy;
                  lodash.unionWith = unionWith;
                  lodash.uniq = uniq;
                  lodash.uniqBy = uniqBy;
                  lodash.uniqWith = uniqWith;
                  lodash.unset = unset;
                  lodash.unzip = unzip;
                  lodash.unzipWith = unzipWith;
                  lodash.update = update;
                  lodash.updateWith = updateWith;
                  lodash.values = values;
                  lodash.valuesIn = valuesIn;
                  lodash.without = without;
                  lodash.words = words;
                  lodash.wrap = wrap;
                  lodash.xor = xor;
                  lodash.xorBy = xorBy;
                  lodash.xorWith = xorWith;
                  lodash.zip = zip;
                  lodash.zipObject = zipObject;
                  lodash.zipObjectDeep = zipObjectDeep;
                  lodash.zipWith = zipWith;
                  lodash.entries = toPairs;
                  lodash.entriesIn = toPairsIn;
                  lodash.extend = assignIn;
                  lodash.extendWith = assignInWith;
                  mixin(lodash, lodash);
                  lodash.add = add;
                  lodash.attempt = attempt;
                  lodash.camelCase = camelCase;
                  lodash.capitalize = capitalize2;
                  lodash.ceil = ceil;
                  lodash.clamp = clamp;
                  lodash.clone = clone;
                  lodash.cloneDeep = cloneDeep;
                  lodash.cloneDeepWith = cloneDeepWith;
                  lodash.cloneWith = cloneWith;
                  lodash.conformsTo = conformsTo;
                  lodash.deburr = deburr;
                  lodash.defaultTo = defaultTo;
                  lodash.divide = divide;
                  lodash.endsWith = endsWith;
                  lodash.eq = eq;
                  lodash.escape = escape;
                  lodash.escapeRegExp = escapeRegExp;
                  lodash.every = every;
                  lodash.find = find;
                  lodash.findIndex = findIndex;
                  lodash.findKey = findKey;
                  lodash.findLast = findLast;
                  lodash.findLastIndex = findLastIndex;
                  lodash.findLastKey = findLastKey;
                  lodash.floor = floor;
                  lodash.forEach = forEach;
                  lodash.forEachRight = forEachRight;
                  lodash.forIn = forIn;
                  lodash.forInRight = forInRight;
                  lodash.forOwn = forOwn;
                  lodash.forOwnRight = forOwnRight;
                  lodash.get = get;
                  lodash.gt = gt;
                  lodash.gte = gte;
                  lodash.has = has;
                  lodash.hasIn = hasIn;
                  lodash.head = head;
                  lodash.identity = identity;
                  lodash.includes = includes;
                  lodash.indexOf = indexOf;
                  lodash.inRange = inRange;
                  lodash.invoke = invoke;
                  lodash.isArguments = isArguments;
                  lodash.isArray = isArray2;
                  lodash.isArrayBuffer = isArrayBuffer;
                  lodash.isArrayLike = isArrayLike;
                  lodash.isArrayLikeObject = isArrayLikeObject;
                  lodash.isBoolean = isBoolean;
                  lodash.isBuffer = isBuffer;
                  lodash.isDate = isDate;
                  lodash.isElement = isElement;
                  lodash.isEmpty = isEmpty;
                  lodash.isEqual = isEqual;
                  lodash.isEqualWith = isEqualWith;
                  lodash.isError = isError;
                  lodash.isFinite = isFinite;
                  lodash.isFunction = isFunction;
                  lodash.isInteger = isInteger;
                  lodash.isLength = isLength;
                  lodash.isMap = isMap;
                  lodash.isMatch = isMatch;
                  lodash.isMatchWith = isMatchWith;
                  lodash.isNaN = isNaN;
                  lodash.isNative = isNative;
                  lodash.isNil = isNil;
                  lodash.isNull = isNull;
                  lodash.isNumber = isNumber;
                  lodash.isObject = isObject2;
                  lodash.isObjectLike = isObjectLike;
                  lodash.isPlainObject = isPlainObject;
                  lodash.isRegExp = isRegExp;
                  lodash.isSafeInteger = isSafeInteger;
                  lodash.isSet = isSet;
                  lodash.isString = isString2;
                  lodash.isSymbol = isSymbol2;
                  lodash.isTypedArray = isTypedArray;
                  lodash.isUndefined = isUndefined;
                  lodash.isWeakMap = isWeakMap;
                  lodash.isWeakSet = isWeakSet;
                  lodash.join = join;
                  lodash.kebabCase = kebabCase;
                  lodash.last = last2;
                  lodash.lastIndexOf = lastIndexOf;
                  lodash.lowerCase = lowerCase;
                  lodash.lowerFirst = lowerFirst;
                  lodash.lt = lt;
                  lodash.lte = lte;
                  lodash.max = max;
                  lodash.maxBy = maxBy;
                  lodash.mean = mean;
                  lodash.meanBy = meanBy;
                  lodash.min = min;
                  lodash.minBy = minBy;
                  lodash.stubArray = stubArray;
                  lodash.stubFalse = stubFalse;
                  lodash.stubObject = stubObject;
                  lodash.stubString = stubString;
                  lodash.stubTrue = stubTrue;
                  lodash.multiply = multiply;
                  lodash.nth = nth;
                  lodash.noConflict = noConflict;
                  lodash.noop = noop;
                  lodash.now = now;
                  lodash.pad = pad;
                  lodash.padEnd = padEnd;
                  lodash.padStart = padStart;
                  lodash.parseInt = parseInt2;
                  lodash.random = random;
                  lodash.reduce = reduce;
                  lodash.reduceRight = reduceRight;
                  lodash.repeat = repeat;
                  lodash.replace = replace;
                  lodash.result = result;
                  lodash.round = round;
                  lodash.runInContext = runInContext2;
                  lodash.sample = sample;
                  lodash.size = size;
                  lodash.snakeCase = snakeCase;
                  lodash.some = some;
                  lodash.sortedIndex = sortedIndex;
                  lodash.sortedIndexBy = sortedIndexBy;
                  lodash.sortedIndexOf = sortedIndexOf;
                  lodash.sortedLastIndex = sortedLastIndex;
                  lodash.sortedLastIndexBy = sortedLastIndexBy;
                  lodash.sortedLastIndexOf = sortedLastIndexOf;
                  lodash.startCase = startCase;
                  lodash.startsWith = startsWith2;
                  lodash.subtract = subtract;
                  lodash.sum = sum;
                  lodash.sumBy = sumBy;
                  lodash.template = template;
                  lodash.times = times;
                  lodash.toFinite = toFinite;
                  lodash.toInteger = toInteger;
                  lodash.toLength = toLength;
                  lodash.toLower = toLower;
                  lodash.toNumber = toNumber;
                  lodash.toSafeInteger = toSafeInteger;
                  lodash.toString = toString;
                  lodash.toUpper = toUpper;
                  lodash.trim = trim;
                  lodash.trimEnd = trimEnd;
                  lodash.trimStart = trimStart;
                  lodash.truncate = truncate;
                  lodash.unescape = unescape;
                  lodash.uniqueId = uniqueId;
                  lodash.upperCase = upperCase;
                  lodash.upperFirst = upperFirst;
                  lodash.each = forEach;
                  lodash.eachRight = forEachRight;
                  lodash.first = head;
                  mixin(lodash, function() {
                    var source = {};
                    baseForOwn(lodash, function(func, methodName) {
                      if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                        source[methodName] = func;
                      }
                    });
                    return source;
                  }(), { "chain": false });
                  lodash.VERSION = VERSION;
                  arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
                    lodash[methodName].placeholder = lodash;
                  });
                  arrayEach(["drop", "take"], function(methodName, index) {
                    LazyWrapper.prototype[methodName] = function(n) {
                      n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
                      var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                      if (result2.__filtered__) {
                        result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
                      } else {
                        result2.__views__.push({
                          "size": nativeMin(n, MAX_ARRAY_LENGTH),
                          "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                        });
                      }
                      return result2;
                    };
                    LazyWrapper.prototype[methodName + "Right"] = function(n) {
                      return this.reverse()[methodName](n).reverse();
                    };
                  });
                  arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
                    var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
                    LazyWrapper.prototype[methodName] = function(iteratee2) {
                      var result2 = this.clone();
                      result2.__iteratees__.push({
                        "iteratee": getIteratee(iteratee2, 3),
                        "type": type
                      });
                      result2.__filtered__ = result2.__filtered__ || isFilter;
                      return result2;
                    };
                  });
                  arrayEach(["head", "last"], function(methodName, index) {
                    var takeName = "take" + (index ? "Right" : "");
                    LazyWrapper.prototype[methodName] = function() {
                      return this[takeName](1).value()[0];
                    };
                  });
                  arrayEach(["initial", "tail"], function(methodName, index) {
                    var dropName = "drop" + (index ? "" : "Right");
                    LazyWrapper.prototype[methodName] = function() {
                      return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                    };
                  });
                  LazyWrapper.prototype.compact = function() {
                    return this.filter(identity);
                  };
                  LazyWrapper.prototype.find = function(predicate) {
                    return this.filter(predicate).head();
                  };
                  LazyWrapper.prototype.findLast = function(predicate) {
                    return this.reverse().find(predicate);
                  };
                  LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
                    if (typeof path == "function") {
                      return new LazyWrapper(this);
                    }
                    return this.map(function(value) {
                      return baseInvoke(value, path, args);
                    });
                  });
                  LazyWrapper.prototype.reject = function(predicate) {
                    return this.filter(negate(getIteratee(predicate)));
                  };
                  LazyWrapper.prototype.slice = function(start, end) {
                    start = toInteger(start);
                    var result2 = this;
                    if (result2.__filtered__ && (start > 0 || end < 0)) {
                      return new LazyWrapper(result2);
                    }
                    if (start < 0) {
                      result2 = result2.takeRight(-start);
                    } else if (start) {
                      result2 = result2.drop(start);
                    }
                    if (end !== undefined2) {
                      end = toInteger(end);
                      result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
                    }
                    return result2;
                  };
                  LazyWrapper.prototype.takeRightWhile = function(predicate) {
                    return this.reverse().takeWhile(predicate).reverse();
                  };
                  LazyWrapper.prototype.toArray = function() {
                    return this.take(MAX_ARRAY_LENGTH);
                  };
                  baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                    var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
                    if (!lodashFunc) {
                      return;
                    }
                    lodash.prototype[methodName] = function() {
                      var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
                      var interceptor = function(value2) {
                        var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                        return isTaker && chainAll ? result3[0] : result3;
                      };
                      if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                        isLazy = useLazy = false;
                      }
                      var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                      if (!retUnwrapped && useLazy) {
                        value = onlyLazy ? value : new LazyWrapper(this);
                        var result2 = func.apply(value, args);
                        result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                        return new LodashWrapper(result2, chainAll);
                      }
                      if (isUnwrapped && onlyLazy) {
                        return func.apply(this, args);
                      }
                      result2 = this.thru(interceptor);
                      return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
                    };
                  });
                  arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
                    var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
                    lodash.prototype[methodName] = function() {
                      var args = arguments;
                      if (retUnwrapped && !this.__chain__) {
                        var value = this.value();
                        return func.apply(isArray2(value) ? value : [], args);
                      }
                      return this[chainName](function(value2) {
                        return func.apply(isArray2(value2) ? value2 : [], args);
                      });
                    };
                  });
                  baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                    var lodashFunc = lodash[methodName];
                    if (lodashFunc) {
                      var key = lodashFunc.name + "";
                      if (!hasOwnProperty.call(realNames, key)) {
                        realNames[key] = [];
                      }
                      realNames[key].push({ "name": methodName, "func": lodashFunc });
                    }
                  });
                  realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
                    "name": "wrapper",
                    "func": undefined2
                  }];
                  LazyWrapper.prototype.clone = lazyClone;
                  LazyWrapper.prototype.reverse = lazyReverse;
                  LazyWrapper.prototype.value = lazyValue;
                  lodash.prototype.at = wrapperAt;
                  lodash.prototype.chain = wrapperChain;
                  lodash.prototype.commit = wrapperCommit;
                  lodash.prototype.next = wrapperNext;
                  lodash.prototype.plant = wrapperPlant;
                  lodash.prototype.reverse = wrapperReverse;
                  lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
                  lodash.prototype.first = lodash.prototype.head;
                  if (symIterator) {
                    lodash.prototype[symIterator] = wrapperToIterator;
                  }
                  return lodash;
                };
                var _ = runInContext();
                if (true) {
                  root._ = _;
                  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
                    return _;
                  }).call(exports2, __webpack_require__, exports2, module3), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined2 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else {
                }
              }).call(this);
            }).call(this, __webpack_require__(27), __webpack_require__(28)(module2));
          },
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 12 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 13 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 15 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 16 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 17 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 20 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 21 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 23 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 25 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 27 */
          /***/
          function(module2, exports2) {
            var g;
            g = function() {
              return this;
            }();
            try {
              g = g || new Function("return this")();
            } catch (e) {
              if (typeof window === "object")
                g = window;
            }
            module2.exports = g;
          },
          /* 28 */
          /***/
          function(module2, exports2) {
            module2.exports = function(module3) {
              if (!module3.webpackPolyfill) {
                module3.deprecate = function() {
                };
                module3.paths = [];
                if (!module3.children)
                  module3.children = [];
                Object.defineProperty(module3, "loaded", {
                  enumerable: true,
                  get: function() {
                    return module3.l;
                  }
                });
                Object.defineProperty(module3, "id", {
                  enumerable: true,
                  get: function() {
                    return module3.i;
                  }
                });
                module3.webpackPolyfill = 1;
              }
              return module3;
            };
          },
          /* 29 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 30 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 31 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 32 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 33 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 34 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 35 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 36 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 37 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 38 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 39 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 40 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 41 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 42 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 43 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 44 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var components_namespaceObject = {};
            __webpack_require__.r(components_namespaceObject);
            __webpack_require__.d(components_namespaceObject, "vsButton", function() {
              return Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsButtonGroup", function() {
              return group;
            });
            __webpack_require__.d(components_namespaceObject, "vsAlert", function() {
              return vsAlert_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsInput", function() {
              return vsInput_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsCheckbox", function() {
              return vsCheckbox_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsSwitch", function() {
              return vsSwitch_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsSelect", function() {
              return vsSelect_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsOption", function() {
              return Option;
            });
            __webpack_require__.d(components_namespaceObject, "vsOptionGroup", function() {
              return OptionGroup;
            });
            __webpack_require__.d(components_namespaceObject, "vsAvatar", function() {
              return vsAvatar_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsAvatarGroup", function() {
              return Group;
            });
            __webpack_require__.d(components_namespaceObject, "vsRadio", function() {
              return vsRadio_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsTooltip", function() {
              return vsTooltip_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsDialog", function() {
              return vsDialog_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsPagination", function() {
              return vsPagination_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsTable", function() {
              return vsTable_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsTableTr", function() {
              return Tr;
            });
            __webpack_require__.d(components_namespaceObject, "vsTableTh", function() {
              return Th;
            });
            __webpack_require__.d(components_namespaceObject, "vsTableTd", function() {
              return Td;
            });
            __webpack_require__.d(components_namespaceObject, "vsNavbar", function() {
              return vsNavbar_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsNavbarItem", function() {
              return Item;
            });
            __webpack_require__.d(components_namespaceObject, "vsNavbarGroup", function() {
              return vsNavbar_Group;
            });
            __webpack_require__.d(components_namespaceObject, "vsSidebar", function() {
              return vsSidebar_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsSidebarItem", function() {
              return vsSidebar_Item;
            });
            __webpack_require__.d(components_namespaceObject, "vsSidebarGroup", function() {
              return vsSidebar_Group;
            });
            __webpack_require__.d(components_namespaceObject, "vsCard", function() {
              return vsCard_Base;
            });
            __webpack_require__.d(components_namespaceObject, "vsCardGroup", function() {
              return vsCard_Group;
            });
            var layout_namespaceObject = {};
            __webpack_require__.r(layout_namespaceObject);
            __webpack_require__.d(layout_namespaceObject, "vsRow", function() {
              return VsRow_VsRow;
            });
            __webpack_require__.d(layout_namespaceObject, "vsCol", function() {
              return VsCol_VsCol;
            });
            var style = __webpack_require__(11);
            var defineProperty = __webpack_require__(7);
            var defineProperty_default = __webpack_require__.n(defineProperty);
            var initializerDefineProperty = __webpack_require__(1);
            var initializerDefineProperty_default = __webpack_require__.n(initializerDefineProperty);
            var assertThisInitialized = __webpack_require__(2);
            var assertThisInitialized_default = __webpack_require__.n(assertThisInitialized);
            var inheritsLoose = __webpack_require__(3);
            var inheritsLoose_default = __webpack_require__.n(inheritsLoose);
            var applyDecoratedDescriptor = __webpack_require__(0);
            var applyDecoratedDescriptor_default = __webpack_require__.n(applyDecoratedDescriptor);
            var initializerWarningHelper = __webpack_require__(4);
            var external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_ = __webpack_require__(6);
            var external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default = __webpack_require__.n(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_);
            var reflectionIsSupported = typeof Reflect !== "undefined" && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;
            function copyReflectionMetadata(to, from) {
              forwardMetadata(to, from);
              Object.getOwnPropertyNames(from.prototype).forEach(function(key) {
                forwardMetadata(to.prototype, from.prototype, key);
              });
              Object.getOwnPropertyNames(from).forEach(function(key) {
                forwardMetadata(to, from, key);
              });
            }
            function forwardMetadata(to, from, propertyKey) {
              var metaKeys = propertyKey ? Reflect.getOwnMetadataKeys(from, propertyKey) : Reflect.getOwnMetadataKeys(from);
              metaKeys.forEach(function(metaKey) {
                var metadata = propertyKey ? Reflect.getOwnMetadata(metaKey, from, propertyKey) : Reflect.getOwnMetadata(metaKey, from);
                if (propertyKey) {
                  Reflect.defineMetadata(metaKey, metadata, to, propertyKey);
                } else {
                  Reflect.defineMetadata(metaKey, metadata, to);
                }
              });
            }
            var fakeArray = { __proto__: [] };
            var hasProto = fakeArray instanceof Array;
            function createDecorator(factory) {
              return function(target, key, index) {
                var Ctor = typeof target === "function" ? target : target.constructor;
                if (!Ctor.__decorators__) {
                  Ctor.__decorators__ = [];
                }
                if (typeof index !== "number") {
                  index = void 0;
                }
                Ctor.__decorators__.push(function(options) {
                  return factory(options, key, index);
                });
              };
            }
            function mixins() {
              var Ctors = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                Ctors[_i] = arguments[_i];
              }
              return external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a.extend({ mixins: Ctors });
            }
            function isPrimitive(value) {
              var type = typeof value;
              return value == null || type !== "object" && type !== "function";
            }
            function warn(message) {
              if (typeof console !== "undefined") {
                console.warn("[vue-class-component] " + message);
              }
            }
            function collectDataFromConstructor(vm, Component) {
              var originalInit = Component.prototype._init;
              Component.prototype._init = function() {
                var _this = this;
                var keys = Object.getOwnPropertyNames(vm);
                if (vm.$options.props) {
                  for (var key in vm.$options.props) {
                    if (!vm.hasOwnProperty(key)) {
                      keys.push(key);
                    }
                  }
                }
                keys.forEach(function(key2) {
                  if (key2.charAt(0) !== "_") {
                    Object.defineProperty(_this, key2, {
                      get: function() {
                        return vm[key2];
                      },
                      set: function(value) {
                        vm[key2] = value;
                      },
                      configurable: true
                    });
                  }
                });
              };
              var data = new Component();
              Component.prototype._init = originalInit;
              var plainData = {};
              Object.keys(data).forEach(function(key) {
                if (data[key] !== void 0) {
                  plainData[key] = data[key];
                }
              });
              if (false) {
              }
              return plainData;
            }
            var $internalHooks = [
              "data",
              "beforeCreate",
              "created",
              "beforeMount",
              "mounted",
              "beforeDestroy",
              "destroyed",
              "beforeUpdate",
              "updated",
              "activated",
              "deactivated",
              "render",
              "errorCaptured",
              "serverPrefetch"
              // 2.6
            ];
            function componentFactory(Component, options) {
              if (options === void 0) {
                options = {};
              }
              options.name = options.name || Component._componentTag || Component.name;
              var proto = Component.prototype;
              Object.getOwnPropertyNames(proto).forEach(function(key) {
                if (key === "constructor") {
                  return;
                }
                if ($internalHooks.indexOf(key) > -1) {
                  options[key] = proto[key];
                  return;
                }
                var descriptor = Object.getOwnPropertyDescriptor(proto, key);
                if (descriptor.value !== void 0) {
                  if (typeof descriptor.value === "function") {
                    (options.methods || (options.methods = {}))[key] = descriptor.value;
                  } else {
                    (options.mixins || (options.mixins = [])).push({
                      data: function() {
                        var _a;
                        return _a = {}, _a[key] = descriptor.value, _a;
                      }
                    });
                  }
                } else if (descriptor.get || descriptor.set) {
                  (options.computed || (options.computed = {}))[key] = {
                    get: descriptor.get,
                    set: descriptor.set
                  };
                }
              });
              (options.mixins || (options.mixins = [])).push({
                data: function() {
                  return collectDataFromConstructor(this, Component);
                }
              });
              var decorators = Component.__decorators__;
              if (decorators) {
                decorators.forEach(function(fn) {
                  return fn(options);
                });
                delete Component.__decorators__;
              }
              var superProto = Object.getPrototypeOf(Component.prototype);
              var Super = superProto instanceof external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a ? superProto.constructor : external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a;
              var Extended = Super.extend(options);
              forwardStaticMembers(Extended, Component, Super);
              if (reflectionIsSupported) {
                copyReflectionMetadata(Extended, Component);
              }
              return Extended;
            }
            var reservedPropertyNames = [
              // Unique id
              "cid",
              // Super Vue constructor
              "super",
              // Component options that will be used by the component
              "options",
              "superOptions",
              "extendOptions",
              "sealedOptions",
              // Private assets
              "component",
              "directive",
              "filter"
            ];
            var shouldIgnore = {
              prototype: true,
              arguments: true,
              callee: true,
              caller: true
            };
            function forwardStaticMembers(Extended, Original, Super) {
              Object.getOwnPropertyNames(Original).forEach(function(key) {
                if (shouldIgnore[key]) {
                  return;
                }
                var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);
                if (extendedDescriptor && !extendedDescriptor.configurable) {
                  return;
                }
                var descriptor = Object.getOwnPropertyDescriptor(Original, key);
                if (!hasProto) {
                  if (key === "cid") {
                    return;
                  }
                  var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);
                  if (!isPrimitive(descriptor.value) && superDescriptor && superDescriptor.value === descriptor.value) {
                    return;
                  }
                }
                if (false) {
                }
                Object.defineProperty(Extended, key, descriptor);
              });
            }
            function vue_class_component_esm_Component(options) {
              if (typeof options === "function") {
                return componentFactory(options);
              }
              return function(Component) {
                return componentFactory(Component, options);
              };
            }
            vue_class_component_esm_Component.registerHooks = function registerHooks(keys) {
              $internalHooks.push.apply($internalHooks, keys);
            };
            var vue_class_component_esm = vue_class_component_esm_Component;
            var reactiveInjectKey = "__reactiveInject__";
            function Inject(options) {
              return createDecorator(function(componentOptions, key) {
                if (typeof componentOptions.inject === "undefined") {
                  componentOptions.inject = {};
                }
                if (!Array.isArray(componentOptions.inject)) {
                  componentOptions.inject[key] = options || key;
                }
              });
            }
            function InjectReactive(options) {
              return createDecorator(function(componentOptions, key) {
                if (typeof componentOptions.inject === "undefined") {
                  componentOptions.inject = {};
                }
                if (!Array.isArray(componentOptions.inject)) {
                  var fromKey_1 = !!options ? options.from || options : key;
                  var defaultVal_1 = !!options && options.default || void 0;
                  if (!componentOptions.computed)
                    componentOptions.computed = {};
                  componentOptions.computed[key] = function() {
                    var obj = this[reactiveInjectKey];
                    return obj ? obj[fromKey_1] : defaultVal_1;
                  };
                  componentOptions.inject[reactiveInjectKey] = reactiveInjectKey;
                }
              });
            }
            function Provide(key) {
              return createDecorator(function(componentOptions, k) {
                var provide = componentOptions.provide;
                if (typeof provide !== "function" || !provide.managed) {
                  var original_1 = componentOptions.provide;
                  provide = componentOptions.provide = function() {
                    var rv = Object.create((typeof original_1 === "function" ? original_1.call(this) : original_1) || null);
                    for (var i in provide.managed)
                      rv[provide.managed[i]] = this[i];
                    return rv;
                  };
                  provide.managed = {};
                }
                provide.managed[k] = key || k;
              });
            }
            function ProvideReactive(key) {
              return createDecorator(function(componentOptions, k) {
                var provide = componentOptions.provide;
                if (typeof provide !== "function" || !provide.managed) {
                  var original_2 = componentOptions.provide;
                  provide = componentOptions.provide = function() {
                    var _this = this;
                    var rv = Object.create((typeof original_2 === "function" ? original_2.call(this) : original_2) || null);
                    rv[reactiveInjectKey] = {};
                    var _loop_1 = function(i2) {
                      rv[provide.managed[i2]] = this_1[i2];
                      Object.defineProperty(rv[reactiveInjectKey], provide.managed[i2], {
                        enumerable: true,
                        get: function() {
                          return _this[i2];
                        }
                      });
                    };
                    var this_1 = this;
                    for (var i in provide.managed) {
                      _loop_1(i);
                    }
                    return rv;
                  };
                  provide.managed = {};
                }
                provide.managed[k] = key || k;
              });
            }
            var reflectMetadataIsSupported = typeof Reflect !== "undefined" && typeof Reflect.getMetadata !== "undefined";
            function applyMetadata(options, target, key) {
              if (reflectMetadataIsSupported) {
                if (!Array.isArray(options) && typeof options !== "function" && typeof options.type === "undefined") {
                  options.type = Reflect.getMetadata("design:type", target, key);
                }
              }
            }
            function Model(event, options) {
              if (options === void 0) {
                options = {};
              }
              return function(target, key) {
                applyMetadata(options, target, key);
                createDecorator(function(componentOptions, k) {
                  ;
                  (componentOptions.props || (componentOptions.props = {}))[k] = options;
                  componentOptions.model = { prop: k, event: event || k };
                })(target, key);
              };
            }
            function Prop(options) {
              if (options === void 0) {
                options = {};
              }
              return function(target, key) {
                applyMetadata(options, target, key);
                createDecorator(function(componentOptions, k) {
                  ;
                  (componentOptions.props || (componentOptions.props = {}))[k] = options;
                })(target, key);
              };
            }
            function PropSync(propName, options) {
              if (options === void 0) {
                options = {};
              }
              return function(target, key) {
                applyMetadata(options, target, key);
                createDecorator(function(componentOptions, k) {
                  ;
                  (componentOptions.props || (componentOptions.props = {}))[propName] = options;
                  (componentOptions.computed || (componentOptions.computed = {}))[k] = {
                    get: function() {
                      return this[propName];
                    },
                    set: function(value) {
                      this.$emit("update:" + propName, value);
                    }
                  };
                })(target, key);
              };
            }
            function Watch(path, options) {
              if (options === void 0) {
                options = {};
              }
              var _a = options.deep, deep = _a === void 0 ? false : _a, _b = options.immediate, immediate = _b === void 0 ? false : _b;
              return createDecorator(function(componentOptions, handler) {
                if (typeof componentOptions.watch !== "object") {
                  componentOptions.watch = /* @__PURE__ */ Object.create(null);
                }
                var watch = componentOptions.watch;
                if (typeof watch[path] === "object" && !Array.isArray(watch[path])) {
                  watch[path] = [watch[path]];
                } else if (typeof watch[path] === "undefined") {
                  watch[path] = [];
                }
                watch[path].push({ handler, deep, immediate });
              });
            }
            var hyphenateRE = /\B([A-Z])/g;
            var hyphenate2 = function(str) {
              return str.replace(hyphenateRE, "-$1").toLowerCase();
            };
            function Emit(event) {
              return function(_target, key, descriptor) {
                key = hyphenate2(key);
                var original = descriptor.value;
                descriptor.value = function emitter() {
                  var _this = this;
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                  }
                  var emit = function(returnValue2) {
                    if (returnValue2 !== void 0)
                      args.unshift(returnValue2);
                    _this.$emit.apply(_this, [event || key].concat(args));
                  };
                  var returnValue = original.apply(this, args);
                  if (isPromise(returnValue)) {
                    returnValue.then(function(returnValue2) {
                      emit(returnValue2);
                    });
                  } else {
                    emit(returnValue);
                  }
                  return returnValue;
                };
              };
            }
            function Ref(refKey) {
              return createDecorator(function(options, key) {
                options.computed = options.computed || {};
                options.computed[key] = {
                  cache: false,
                  get: function() {
                    return this.$refs[refKey || key];
                  }
                };
              });
            }
            function isPromise(obj) {
              return obj instanceof Promise || obj && typeof obj.then === "function";
            }
            var createClass = __webpack_require__(5);
            var createClass_default = __webpack_require__.n(createClass);
            var isColor = function isColor2(color) {
              var vsColors = [
                "primary",
                "secondary",
                "success",
                "danger",
                "warning",
                "dark",
                "light",
                "warn",
                // social colors
                "facebook",
                "twitter",
                "youtube",
                "pinterest",
                "linkedin",
                "snapchat",
                "whatsapp",
                "tumblr",
                "reddit",
                "spotify",
                "amazon",
                "medium",
                "vimeo",
                "skype",
                "dribbble",
                "slack",
                "yahoo",
                "twitch",
                "discord",
                "telegram",
                "google-plus",
                "messenger"
              ];
              return vsColors.includes(color);
            };
            var setVar = function setVar2(propertyName, value, el) {
              if (!el) {
                document.documentElement.style.setProperty("--vs-" + propertyName, value);
              } else {
                if (el.nodeName !== "#comment") {
                  el.style.setProperty("--vs-" + propertyName, value);
                }
              }
            };
            var util_setColor = function setColor(colorName, color, el, addClass) {
              function hexToRgb(hex) {
                var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                hex = hex.replace(shorthandRegex, function(m, r, g, b) {
                  return r + r + g + g + b + b;
                });
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                  r: parseInt(result[1], 16),
                  // tslint:disable-next-line:object-literal-sort-keys
                  g: parseInt(result[2], 16),
                  b: parseInt(result[3], 16)
                } : null;
              }
              var isRGB = /^(rgb|rgba)/.test(color);
              var isRGBNumbers = /^(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d)$/.test(color);
              var isHEX = /^(#)/.test(color);
              var newColor;
              if (color == "dark" && el) {
                el.classList.add("vs-component-dark");
              }
              if (isRGB) {
                var arrayColor = color.replace(/[rgba()]/g, "").split(",");
                newColor = arrayColor[0] + "," + arrayColor[1] + "," + arrayColor[2];
                setVar(colorName, newColor, el);
                if (addClass) {
                  el.classList.add("vs-change-color");
                }
              } else if (isHEX) {
                var rgb = hexToRgb(color);
                newColor = rgb.r + "," + rgb.g + "," + rgb.b;
                setVar(colorName, newColor, el);
                if (addClass) {
                  el.classList.add("vs-change-color");
                }
              } else if (isColor(color)) {
                var style2 = window.getComputedStyle(document.body);
                newColor = style2.getPropertyValue("--vs-" + color);
                setVar(colorName, newColor, el);
                if (addClass) {
                  el.classList.add("vs-change-color");
                }
              } else if (isRGBNumbers) {
                setVar(colorName, color, el);
                if (addClass) {
                  el.classList.add("vs-change-color");
                }
              } else {
              }
            };
            var getColor = function getColor2(color) {
              function hexToRgb(hex) {
                var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                hex = hex.replace(shorthandRegex, function(m, r, g, b) {
                  return r + r + g + g + b + b;
                });
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                  r: parseInt(result[1], 16),
                  // tslint:disable-next-line:object-literal-sort-keys
                  g: parseInt(result[2], 16),
                  b: parseInt(result[3], 16)
                } : null;
              }
              var isRGB = /^(rgb|rgba)/.test(color);
              var isRGBNumbers = /^(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d),(0|255|25[0-4]|2[0-4]\d|1\d\d|0?\d?\d)$/.test(color);
              var isHEX = /^(#)/.test(color);
              var newColor;
              if (isRGB) {
                var arrayColor = color.replace(/[rgba()]/g, "").split(",");
                newColor = arrayColor[0] + "," + arrayColor[1] + "," + arrayColor[2];
              } else if (isHEX) {
                var rgb = hexToRgb(color);
                newColor = rgb.r + "," + rgb.g + "," + rgb.b;
              } else if (isColor(color)) {
                var style2 = window.getComputedStyle(document.body);
                newColor = style2.getPropertyValue("--vs-" + color);
              } else if (isRGBNumbers) {
                newColor = color;
              }
              return newColor;
            };
            var insertBody = function insertBody2(element, parent) {
              var target = parent ? parent : document.body;
              target.insertBefore(element, target.lastChild);
            };
            var removeBody = function removeBody2(element, parent) {
              var target = parent ? parent : document.body;
              target.removeChild(element);
            };
            var setCords = function setCords2(element, parent) {
              var cords = parent.getBoundingClientRect();
              var x = cords.x;
              var y = cords.y;
              var w = cords.width;
              var h = cords.height;
              var style2 = element.style;
              var scrollTop = window.pageYOffset;
              var elTop = element.clientHeight + cords.y + scrollTop;
              var rootTop = scrollTop + window.innerHeight;
              if (rootTop - elTop < 30) {
                style2.top = y + scrollTop - element.clientHeight - 4 + "px";
                style2.left = x + "px";
                style2.width = w + "px";
                element.classList.add("top");
                parent.classList.add("top");
              } else {
                style2.top = y + scrollTop + h - 4 + "px";
                style2.left = x + "px";
                style2.width = w + "px";
                element.classList.remove("top");
                parent.classList.remove("top");
              }
            };
            var setCordsPosition = function setCordsPosition2(element, parent, position) {
              var cords = parent.getBoundingClientRect();
              var x = cords.x;
              var y = cords.y;
              var w = cords.width;
              var h = cords.height;
              var style2 = element.style;
              var scrollTop = window.pageYOffset;
              var elTop = element.clientHeight + cords.y + scrollTop;
              var rootTop = scrollTop + window.innerHeight;
              if (x + w + 10 + element.getBoundingClientRect().width > window.innerWidth && position == "right") {
                position = "left";
                element.classList.remove("right");
                element.classList.add("left");
              }
              if (x - 10 < element.getBoundingClientRect().width && position == "left") {
                position = "top";
                element.classList.remove("left");
                element.classList.add("top");
              }
              if (rootTop - elTop < 30 || position == "top") {
                style2.top = y + scrollTop - element.clientHeight - 8 + "px";
                var left = x + (w - element.getBoundingClientRect().width) / 2;
                if (left + element.getBoundingClientRect().width < window.innerWidth) {
                  if (left > 0) {
                    style2.left = left + "px";
                  } else {
                    style2.left = "10px";
                    element.classList.add("notArrow");
                  }
                } else {
                  style2.left = "auto";
                  style2.right = "10px";
                  element.classList.add("notArrow");
                }
              } else if (position == "bottom") {
                style2.top = y + scrollTop + h + 8 + "px";
                var _left = x + (w - element.getBoundingClientRect().width) / 2;
                if (_left + element.getBoundingClientRect().width < window.innerWidth) {
                  if (_left > 0) {
                    style2.left = _left + "px";
                  } else {
                    style2.left = "10px";
                    element.classList.add("notArrow");
                  }
                } else {
                  style2.left = "auto";
                  style2.right = "10px";
                  element.classList.add("notArrow");
                }
              } else if (position == "left") {
                style2.top = y + scrollTop + (h - element.getBoundingClientRect().height) / 2 + "px";
                style2.left = x - element.getBoundingClientRect().width - 8 + "px";
              } else if (position == "right") {
                style2.top = y + scrollTop + (h - element.getBoundingClientRect().height) / 2 + "px";
                style2.left = x + w + 8 + "px";
              }
            };
            var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3, _temp;
            var component_VsComponent = (_dec = Prop({
              type: String,
              default: null
            }), _dec2 = Prop({
              type: Boolean,
              default: false
            }), _dec3 = Prop({
              type: Boolean,
              default: false
            }), _dec4 = Prop({
              type: Boolean,
              default: false
            }), _dec5 = Prop({
              type: Boolean,
              default: false
            }), _dec6 = Prop({
              type: Boolean,
              default: false
            }), _dec7 = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(_class = (_class2 = (_temp = _class3 = function(_Vue) {
              inheritsLoose_default()(VsComponent, _Vue);
              function VsComponent() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                _this.componentColor = null;
                _this.getColor = null;
                initializerDefineProperty_default()(_this, "color", _descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "danger", _descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "success", _descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "warn", _descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "dark", _descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "primary", _descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "active", _descriptor7, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsComponent.prototype;
              _proto.mounted = function mounted() {
                this.getColor = getColor(this.color);
              };
              createClass_default()(VsComponent, [{
                key: "isColorDark",
                // get getColor() {
                //   return getColor(this.color)
                // }
                get: function get() {
                  return this.color === "dark" || this.dark || this.componentColor === "dark";
                }
              }, {
                key: "isColor",
                get: function get() {
                  return !!this.color || !!this.primary || !!this.success || !!this.warn || !!this.danger || !!this.dark;
                }
              }]);
              return VsComponent;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), _class3.install = void 0, _class3.use = void 0, _temp), _descriptor = applyDecoratedDescriptor_default()(_class2.prototype, "color", [_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor2 = applyDecoratedDescriptor_default()(_class2.prototype, "danger", [_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor3 = applyDecoratedDescriptor_default()(_class2.prototype, "success", [_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor4 = applyDecoratedDescriptor_default()(_class2.prototype, "warn", [_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor5 = applyDecoratedDescriptor_default()(_class2.prototype, "dark", [_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor6 = applyDecoratedDescriptor_default()(_class2.prototype, "primary", [_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor7 = applyDecoratedDescriptor_default()(_class2.prototype, "active", [_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _class2)) || _class);
            var ripple_style = __webpack_require__(12);
            var ripple_ripple = function ripple(evt, color, solid) {
              if (color === void 0) {
                color = "";
              }
              if (solid === void 0) {
                solid = false;
              }
              var el = evt.currentTarget;
              var offset = el.getBoundingClientRect();
              var x = evt.clientX - offset.left;
              var y = evt.clientY - offset.top;
              var time = 0.6;
              if (el.clientWidth > 150) {
                time = 1.2;
              }
              var effectContent = document.createElement("div");
              effectContent.className = "vs-ripple-content";
              var effect = document.createElement("div");
              if (!color) {
                util_setColor("color", "#fff", effectContent);
              }
              effect.className = "vs-ripple";
              if (solid) {
                effect.classList.add("vs-ripple--solid");
              }
              effect.style.transition = "all " + time + "s ease";
              effect.style.left = x + "px";
              effect.style.top = y + "px";
              effectContent.appendChild(effect);
              el.appendChild(effectContent);
              effect.style.width = el.clientWidth * 2.5 + "px";
              effect.style.height = el.clientWidth * 2.5 + "px";
              effect.style.opacity = "1";
              var noTime = false;
              setTimeout(function() {
                noTime = true;
              }, 300);
              function removeEffect(evt2) {
                effect.style.transition = "all 0." + time * 600 + "s ease";
                setTimeout(function() {
                  effect.style.opacity = "0";
                  setTimeout(function() {
                    el.removeChild(effectContent);
                  }, time * 300);
                }, noTime ? 0 : time * 400);
                evt2.target.removeEventListener("mouseup", removeEffect);
                evt2.target.removeEventListener("mouseleave", removeEffect);
              }
              evt.target.addEventListener("mouseup", removeEffect);
              evt.target.addEventListener("mouseleave", removeEffect);
            };
            var rippleReverse = function rippleReverse2(evt) {
              var el = evt.currentTarget;
              var offset = el.getBoundingClientRect();
              var x = evt.clientX - offset.left;
              var y = evt.clientY - offset.top;
              var time = 0.6;
              if (el.clientWidth > 150) {
                time = 1.2;
              }
              var effectContent = document.createElement("div");
              effectContent.className = "vs-ripple-content";
              var effect = document.createElement("div");
              effect.className = "vs-ripple-invert";
              effect.style.left = x + "px";
              effect.style.top = y + "px";
              effect.style.width = el.clientWidth * 2.5 + "px";
              effect.style.height = el.clientWidth * 2.5 + "px";
              effect.style.opacity = "0";
              effectContent.appendChild(effect);
              el.appendChild(effectContent);
              setTimeout(function() {
                effect.style.width = "0px";
                effect.style.height = "0px";
                effect.style.opacity = "0.5";
              }, 1);
              var noTime = false;
              setTimeout(function() {
                noTime = true;
              }, 300);
              function removeEffect(evt2) {
                effect.style.transition = "all 0." + time * 600 + "s ease";
                setTimeout(function() {
                  effect.style.opacity = "0";
                  setTimeout(function() {
                    el.removeChild(effectContent);
                  }, time * 300);
                }, noTime ? 0 : time * 400);
                evt2.target.removeEventListener("mouseup", removeEffect);
                evt2.target.removeEventListener("mouseleave", removeEffect);
              }
              evt.target.addEventListener("mouseup", removeEffect);
              evt.target.addEventListener("mouseleave", removeEffect);
            };
            var rippleCut = function rippleCut2(evt) {
              var el = evt.currentTarget;
              var offset = el.getBoundingClientRect();
              var x = evt.clientX - offset.left;
              var y = evt.clientY - offset.top;
              var time = 0.6;
              if (el.clientWidth > 150) {
                time = 1.2;
              }
              var effectContent = document.createElement("div");
              effectContent.className = "vs-ripple-content";
              var effect = document.createElement("div");
              var effect2 = document.createElement("div");
              effect.className = "vs-ripple-cut-1";
              effect2.className = "vs-ripple-cut-2";
              effect.style.left = effect2.style.left = x + "px";
              effect.style.top = effect2.style.top = y + "px";
              effect.style.width = effect2.style.width = el.clientWidth * 2.5 + "px";
              effect.style.height = effect2.style.height = el.clientWidth * 2.5 + "px";
              effect.style.opacity = effect2.style.opacity = "1";
              effectContent.appendChild(effect);
              effectContent.appendChild(effect2);
              el.appendChild(effectContent);
              setTimeout(function() {
                effect.style.left = "-" + el.clientWidth * 1.3 + "px";
                effect.style.opacity = "1";
                effect2.style.left = el.clientWidth * 1.3 + "px";
                effect2.style.opacity = "1";
              }, 1);
              var noTime = false;
              setTimeout(function() {
                noTime = true;
              }, 300);
              function removeEffect(evt2) {
                effect.style.transition = "all 0." + time * 600 + "s ease";
                setTimeout(function() {
                  effect.style.opacity = "0";
                  setTimeout(function() {
                    el.removeChild(effectContent);
                  }, time * 300);
                }, noTime ? 0 : time * 400);
                evt2.target.removeEventListener("mouseup", removeEffect);
                evt2.target.removeEventListener("mouseleave", removeEffect);
              }
              evt.target.addEventListener("mouseup", removeEffect);
              evt.target.addEventListener("mouseleave", removeEffect);
            };
            var util_ripple = ripple_ripple;
            var VsButton_dec, VsButton_dec2, VsButton_dec3, VsButton_dec4, VsButton_dec5, VsButton_dec6, VsButton_dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, VsButton_class, VsButton_class2, VsButton_descriptor, VsButton_descriptor2, VsButton_descriptor3, VsButton_descriptor4, VsButton_descriptor5, VsButton_descriptor6, VsButton_descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, VsButton_temp;
            function ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function _objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsButton_VsButton = (VsButton_dec = Prop({
              type: String,
              default: ""
            }), VsButton_dec2 = Prop({
              type: Boolean,
              default: false
            }), VsButton_dec3 = Prop({
              type: Boolean,
              default: false
            }), VsButton_dec4 = Prop({
              type: Boolean,
              default: false
            }), VsButton_dec5 = Prop({
              type: Boolean,
              default: false
            }), VsButton_dec6 = Prop({
              type: Boolean,
              default: false
            }), VsButton_dec7 = Prop({
              type: Boolean,
              default: false
            }), _dec8 = Prop({
              type: Boolean,
              default: false
            }), _dec9 = Prop({
              type: Boolean,
              default: false
            }), _dec10 = Prop({
              type: Boolean,
              default: false
            }), _dec11 = Prop({
              type: Boolean,
              default: false
            }), _dec12 = Prop({
              type: Boolean,
              default: false
            }), _dec13 = Prop({
              type: String,
              default: null
            }), _dec14 = Prop({
              type: Boolean,
              default: false
            }), _dec15 = Prop({
              type: Boolean,
              default: false
            }), _dec16 = Prop({
              type: Boolean,
              default: false
            }), _dec17 = Prop({
              type: String,
              default: ""
            }), _dec18 = Prop({
              type: Boolean,
              default: false
            }), _dec19 = Prop({
              type: String,
              default: null
            }), _dec20 = Prop({
              type: String,
              default: null
            }), _dec21 = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(VsButton_class = (VsButton_class2 = (VsButton_temp = function(_VsComponent) {
              inheritsLoose_default()(VsButton, _VsComponent);
              function VsButton() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.Class = "";
                _this.prototype = void 0;
                initializerDefineProperty_default()(_this, "ripple", VsButton_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "activeDisabled", VsButton_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "flat", VsButton_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "border", VsButton_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "gradient", VsButton_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "relief", VsButton_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "transparent", VsButton_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "shadow", _descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "floating", _descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "icon", _descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "circle", _descriptor11, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", _descriptor12, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "size", _descriptor13, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", _descriptor14, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "upload", _descriptor15, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "block", _descriptor16, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "animationType", _descriptor17, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "animateInactive", _descriptor18, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "to", _descriptor19, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "href", _descriptor20, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "blank", _descriptor21, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsButton.prototype;
              _proto.render = function render(h) {
                var _style, _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _this2 = this;
                var defaultSlot = h("div", {
                  staticClass: "vs-button__content"
                }, this.$slots.default);
                var animateSlot = h("div", {
                  staticClass: "vs-button__animate",
                  class: ["vs-button__animate--" + this.animationType]
                }, this.$slots.animate);
                var loadingElement = h("div", {
                  staticClass: "vs-button__loading"
                });
                var btn = h("button", {
                  staticClass: "vs-button",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [
                    // `vs-button--${this.color.replace('#', '')}`,
                    "vs-button--" + this.componentColor,
                    "vs-button--size-" + this.size,
                    (_ref = {}, _ref["vs-button--fff"] = this.color === "#fff", _ref),
                    (_ref2 = {}, _ref2["vs-button--active"] = !!this.active, _ref2),
                    (_ref3 = {}, _ref3["vs-button--active-disabled"] = !!this.activeDisabled, _ref3),
                    (_ref4 = {}, _ref4["vs-button--icon"] = !!this.icon, _ref4),
                    (_ref5 = {}, _ref5["vs-button--circle"] = !!this.circle, _ref5),
                    (_ref6 = {}, _ref6["vs-button--square"] = !!this.square, _ref6),
                    (_ref7 = {}, _ref7["vs-button--loading"] = !!this.loading, _ref7),
                    (_ref8 = {}, _ref8["vs-button--upload"] = !!this.upload, _ref8),
                    (_ref9 = {}, _ref9["vs-button--block"] = !!this.block, _ref9),
                    (_ref10 = {}, _ref10["vs-button--animate"] = !!this.$slots.animate, _ref10),
                    (_ref11 = {}, _ref11["vs-button--animate-" + this.animationType] = !!this.animationType, _ref11),
                    (_ref12 = {}, _ref12["vs-button--animate-inactive"] = !!this.animateInactive, _ref12),
                    (_ref13 = {}, _ref13["vs-button--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref13),
                    (_ref14 = {}, _ref14["vs-button--danger"] = !!this.danger, _ref14),
                    (_ref15 = {}, _ref15["vs-button--warn"] = !!this.warn, _ref15),
                    (_ref16 = {}, _ref16["vs-button--success"] = !!this.success, _ref16),
                    (_ref17 = {}, _ref17["vs-button--dark"] = !!this.dark, _ref17),
                    (_ref18 = {}, _ref18["vs-button--default"] = !this.flat && !this.border && !this.gradient && !this.relief && !this.transparent && !this.shadow && !this.floating, _ref18),
                    (_ref19 = {}, _ref19["vs-button--flat"] = !!this.flat, _ref19),
                    (_ref20 = {}, _ref20["vs-button--border"] = !!this.border, _ref20),
                    (_ref21 = {}, _ref21["vs-button--gradient"] = !!this.gradient, _ref21),
                    (_ref22 = {}, _ref22["vs-button--relief"] = !!this.relief, _ref22),
                    (_ref23 = {}, _ref23["vs-button--transparent"] = !!this.transparent, _ref23),
                    (_ref24 = {}, _ref24["vs-button--shadow"] = !!this.shadow, _ref24),
                    (_ref25 = {}, _ref25["vs-button--floating"] = !!this.floating, _ref25)
                  ],
                  attrs: _objectSpread({}, this.$attrs),
                  on: _objectSpread({}, this.$listeners, {
                    mousedown: function mousedown(evt) {
                      if (_this2.ripple === "reverse") {
                        rippleReverse(evt);
                      } else if (_this2.ripple === "cut") {
                        rippleCut(evt);
                      } else {
                        if (_this2.flat) {
                          util_ripple(evt, (_this2.componentColor || _this2.color || "primary") && !_this2.active && document.activeElement !== _this2.$el ? "inherit" : null, _this2.flat && !_this2.active && document.activeElement !== _this2.$el);
                        } else {
                          util_ripple(evt, null, false);
                        }
                      }
                    },
                    click: function click(evt) {
                      if (_this2.to) {
                        _this2.$router.push(_this2.to);
                      } else if (_this2.href) {
                        window.open(_this2.href, _this2.blank && "_blank" || "_self");
                      }
                      _this2.$emit("click", evt);
                    }
                  })
                }, [defaultSlot, this.$slots.animate ? animateSlot : null, this.loading ? loadingElement : null]);
                return btn;
              };
              return VsButton;
            }(component_VsComponent), VsButton_temp), VsButton_descriptor = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "ripple", [VsButton_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsButton_descriptor2 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "activeDisabled", [VsButton_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsButton_descriptor3 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "flat", [VsButton_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsButton_descriptor4 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "border", [VsButton_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsButton_descriptor5 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "gradient", [VsButton_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsButton_descriptor6 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "relief", [VsButton_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsButton_descriptor7 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "transparent", [VsButton_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor8 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "shadow", [_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor9 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "floating", [_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor10 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "icon", [_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor11 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "circle", [_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor12 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "square", [_dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor13 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "size", [_dec13], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor14 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "loading", [_dec14], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor15 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "upload", [_dec15], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor16 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "block", [_dec16], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor17 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "animationType", [_dec17], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor18 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "animateInactive", [_dec18], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor19 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "to", [_dec19], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor20 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "href", [_dec20], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor21 = applyDecoratedDescriptor_default()(VsButton_class2.prototype, "blank", [_dec21], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsButton_class2)) || VsButton_class);
            VsButton_VsButton.install = function(vue) {
              vue.component("vs-button", VsButton_VsButton);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsButton_VsButton.install(window.Vue);
            }
            var Base = VsButton_VsButton;
            var group_style = __webpack_require__(13);
            var VsButtonGroup_class, VsButtonGroup_temp;
            var VsButtonGroup_VsButton = vue_class_component_esm(VsButtonGroup_class = (VsButtonGroup_temp = function(_VsComponent) {
              inheritsLoose_default()(VsButton, _VsComponent);
              function VsButton() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.Class = "";
                _this.prototype = void 0;
                return _this;
              }
              var _proto = VsButton.prototype;
              _proto.render = function render(h) {
                var btnGroup = h("div", {
                  staticClass: "vs-button-group"
                }, this.$slots.default);
                return btnGroup;
              };
              return VsButton;
            }(component_VsComponent), VsButtonGroup_temp)) || VsButtonGroup_class;
            VsButtonGroup_VsButton.install = function(vue) {
              vue.component("vs-button-group", VsButtonGroup_VsButton);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsButtonGroup_VsButton.install(window.Vue);
            }
            var group = VsButtonGroup_VsButton;
            var Base_style = __webpack_require__(14);
            var icons_icons = __webpack_require__(8);
            var close_dec, close_class, close_class2, close_descriptor, close_temp;
            var close_VsIconClose = (close_dec = Prop({
              type: String,
              default: null
            }), vue_class_component_esm(close_class = (close_class2 = (close_temp = function(_Vue) {
              inheritsLoose_default()(VsIconClose, _Vue);
              function VsIconClose() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "hover", close_descriptor, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsIconClose.prototype;
              _proto.render = function render(h) {
                var icon = h("i", {
                  staticClass: "vs-icon-close",
                  class: ["vs-icon-hover-" + this.hover],
                  ref: "icon"
                });
                return icon;
              };
              return VsIconClose;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), close_temp), close_descriptor = applyDecoratedDescriptor_default()(close_class2.prototype, "hover", [close_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), close_class2)) || close_class);
            var plus_dec, plus_class, plus_class2, plus_descriptor, plus_temp;
            function plus_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function plus_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  plus_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  plus_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var plus_VsIconClose = (plus_dec = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(plus_class = (plus_class2 = (plus_temp = function(_Vue) {
              inheritsLoose_default()(VsIconClose, _Vue);
              function VsIconClose() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "less", plus_descriptor, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsIconClose.prototype;
              _proto.render = function render(h) {
                var icon = h("i", {
                  staticClass: "vs-icon-plus",
                  class: {
                    less: this.less
                  },
                  ref: "icon",
                  on: plus_objectSpread({}, this.$listeners)
                });
                return icon;
              };
              return VsIconClose;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), plus_temp), plus_descriptor = applyDecoratedDescriptor_default()(plus_class2.prototype, "less", [plus_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), plus_class2)) || plus_class);
            var VsAlert_dec, VsAlert_dec2, VsAlert_dec3, VsAlert_dec4, VsAlert_dec5, VsAlert_dec6, VsAlert_dec7, VsAlert_dec8, VsAlert_dec9, VsAlert_dec10, VsAlert_dec11, VsAlert_dec12, VsAlert_dec13, VsAlert_class, VsAlert_class2, VsAlert_descriptor, VsAlert_descriptor2, VsAlert_descriptor3, VsAlert_descriptor4, VsAlert_descriptor5, VsAlert_descriptor6, VsAlert_descriptor7, VsAlert_descriptor8, VsAlert_descriptor9, VsAlert_descriptor10, VsAlert_descriptor11, VsAlert_temp;
            var VsAlert_VsAlert = (VsAlert_dec = Prop({
              type: Boolean,
              default: false
            }), VsAlert_dec2 = Prop({
              type: Boolean,
              default: false
            }), VsAlert_dec3 = Prop({
              type: Boolean,
              default: false
            }), VsAlert_dec4 = Prop({
              type: Boolean,
              default: false
            }), VsAlert_dec5 = Prop({
              type: Boolean,
              default: false
            }), VsAlert_dec6 = Prop({
              type: Boolean,
              default: false
            }), VsAlert_dec7 = Prop({
              default: true
            }), VsAlert_dec8 = Prop({
              type: Boolean,
              default: null
            }), VsAlert_dec9 = Prop({
              type: Boolean,
              default: false
            }), VsAlert_dec10 = Prop({
              type: [Number, String],
              default: 0
            }), VsAlert_dec11 = Prop({
              type: [Number, String],
              default: 0
            }), VsAlert_dec12 = Watch("page"), VsAlert_dec13 = Watch("hiddenContent"), vue_class_component_esm(VsAlert_class = (VsAlert_class2 = (VsAlert_temp = function(_VsComponent) {
              inheritsLoose_default()(VsAlert, _VsComponent);
              function VsAlert() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "solid", VsAlert_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "border", VsAlert_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "shadow", VsAlert_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "gradient", VsAlert_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "flat", VsAlert_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "relief", VsAlert_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "value", VsAlert_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "hiddenContent", VsAlert_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "closable", VsAlert_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "progress", VsAlert_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "page", VsAlert_descriptor11, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsAlert.prototype;
              _proto.handleWatchPage = function handleWatchPage() {
                var _this2 = this;
                var content = this.$refs.content;
                content.style.minHeight = content.scrollHeight + "px";
                this.$nextTick(function() {
                  var el = _this2.$el;
                  el.style.height = _this2.$el.scrollHeight - 1 + "px";
                });
              };
              _proto.mounted = function mounted() {
                if (this.$el && this.$refs.content) {
                  var el = this.$el;
                  el.style.height = this.$el.scrollHeight - 1 + "px";
                  var content = this.$refs.content;
                  content.style.minHeight = content.scrollHeight + "px";
                }
              };
              _proto.handleHiddenContent = function handleHiddenContent(val) {
                var _this3 = this;
                if (!this.value) {
                  return;
                }
                var el = this.$el;
                var content = this.$refs.content;
                if (!val) {
                  el.style.height = "auto";
                  setTimeout(function() {
                    el.style.height = _this3.$el.scrollHeight - 1 + "px";
                  }, 250);
                } else {
                  el.style.height = this.$el.scrollHeight - content.scrollHeight + "px";
                }
              };
              _proto.beforeEnter = function beforeEnter(el) {
                el.style.height = 0;
              };
              _proto.enter = function enter(el, done) {
                var h = el.scrollHeight;
                el.style.height = h - 1 + "px";
                done();
              };
              _proto.leave = function leave(el, done) {
                el.style.minHeight = "0px";
                el.style.height = "0px";
              };
              _proto.handleClickClose = function handleClickClose() {
                this.$emit("input", !this.value);
              };
              _proto.handleClickHidden = function handleClickHidden() {
                this.$emit("update:hiddenContent", !this.hiddenContent);
              };
              _proto.handleClickPrevPage = function handleClickPrevPage() {
                if (this.page > 1) {
                  this.$emit("update:page", Number(this.page) - 1);
                }
              };
              _proto.handleClickNextPage = function handleClickNextPage() {
                if (this.page < this.getTotalPages) {
                  this.$emit("update:page", Number(this.page) + 1);
                }
              };
              _proto.render = function render(h) {
                var _style, _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12;
                var icon = h("div", {
                  staticClass: "vs-alert__icon",
                  ref: "icon"
                }, [this.$slots.icon]);
                var contentText = h("div", {
                  staticClass: "vs-alert__content__text",
                  ref: "text"
                }, [this.$slots.default].concat(this.getPages));
                var content = h("transition", {
                  on: {
                    beforeEnter: this.beforeEnter,
                    enter: this.enter,
                    leave: this.leave
                  }
                }, [!this.hiddenContent && h("div", {
                  staticClass: "vs-alert__content",
                  ref: "content"
                }, [contentText])]);
                var title = h("div", {
                  staticClass: "vs-alert__title",
                  class: {
                    "vs-alert__title--clickHidden": typeof this.hiddenContent === "boolean"
                  },
                  on: {
                    click: this.handleClickHidden
                  }
                }, [this.$slots.title, !this.closable && typeof this.hiddenContent === "boolean" && h(plus_VsIconClose, {
                  props: {
                    less: !this.hiddenContent
                  },
                  on: {
                    click: this.handleClickHidden
                  }
                })]);
                var closeBtn = h("button", {
                  staticClass: "vs-alert__close",
                  on: {
                    click: this.handleClickClose
                  }
                }, [h(close_VsIconClose, {
                  props: {
                    hover: "less"
                  }
                })]);
                var pagination = h("div", {
                  staticClass: "vs-alert__pagination"
                }, [h("button", {
                  on: {
                    click: this.handleClickPrevPage
                  }
                }, "<"), h("span", this.page + " / " + this.getTotalPages), h("button", {
                  on: {
                    click: this.handleClickNextPage
                  }
                }, ">")]);
                var footer = h("div", {
                  staticClass: "vs-alert__footer"
                }, [this.$slots.footer]);
                var progress = h("div", {
                  staticClass: "vs-alert__progress"
                }, [h("div", {
                  staticClass: "vs-alert__progress__bar",
                  style: {
                    width: this.progress + "%"
                  }
                })]);
                var render2 = h("div", {
                  staticClass: "vs-alert",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [(_ref = {}, _ref["vs-alert--solid"] = !!this.solid, _ref), (_ref2 = {}, _ref2["vs-alert--border"] = !!this.border, _ref2), (_ref3 = {}, _ref3["vs-alert--shadow"] = !!this.shadow, _ref3), (_ref4 = {}, _ref4["vs-alert--gradient"] = !!this.gradient, _ref4), (_ref5 = {}, _ref5["vs-alert--flat"] = !!this.flat, _ref5), (_ref6 = {}, _ref6["vs-alert--relief"] = !!this.relief, _ref6), (_ref7 = {}, _ref7["vs-alert--pages"] = this.getPages.length > 0, _ref7), (_ref8 = {}, _ref8["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref8), (_ref9 = {}, _ref9["vs-component--danger"] = !!this.danger, _ref9), (_ref10 = {}, _ref10["vs-component--warn"] = !!this.warn, _ref10), (_ref11 = {}, _ref11["vs-component--success"] = !!this.success, _ref11), (_ref12 = {}, _ref12["vs-component--dark"] = !!this.dark, _ref12)]
                }, [this.$slots.icon && icon, this.$slots.title && title, content, this.closable && closeBtn, this.$slots.footer && footer, !!this.progress && progress, this.getTotalPages > 0 && pagination]);
                return h("transition", {
                  on: {
                    beforeEnter: this.beforeEnter,
                    enter: this.enter,
                    leave: this.leave
                  }
                }, [this.value && render2]);
              };
              createClass_default()(VsAlert, [{
                key: "getTotalPages",
                get: function get() {
                  var keys = Object.keys(this.$slots).filter(function(item) {
                    return item.indexOf("page") !== -1;
                  });
                  return keys.length;
                }
              }, {
                key: "getPages",
                get: function get() {
                  var _this4 = this;
                  var keys = Object.keys(this.$slots).filter(function(item) {
                    return item.indexOf("page") !== -1;
                  });
                  var values = [];
                  keys.forEach(function(item) {
                    values.push(_this4.page == item.split("-")[1] && _this4.$slots[item]);
                  });
                  return values;
                }
              }]);
              return VsAlert;
            }(component_VsComponent), VsAlert_temp), VsAlert_descriptor = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "solid", [VsAlert_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor2 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "border", [VsAlert_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor3 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "shadow", [VsAlert_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor4 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "gradient", [VsAlert_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor5 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "flat", [VsAlert_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor6 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "relief", [VsAlert_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor7 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "value", [VsAlert_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor8 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "hiddenContent", [VsAlert_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor9 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "closable", [VsAlert_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor10 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "progress", [VsAlert_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAlert_descriptor11 = applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "page", [VsAlert_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "handleWatchPage", [VsAlert_dec12], Object.getOwnPropertyDescriptor(VsAlert_class2.prototype, "handleWatchPage"), VsAlert_class2.prototype), applyDecoratedDescriptor_default()(VsAlert_class2.prototype, "handleHiddenContent", [VsAlert_dec13], Object.getOwnPropertyDescriptor(VsAlert_class2.prototype, "handleHiddenContent"), VsAlert_class2.prototype), VsAlert_class2)) || VsAlert_class);
            VsAlert_VsAlert.install = function(vue) {
              vue.component("vs-alert", VsAlert_VsAlert);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsAlert_VsAlert.install(window.Vue);
            }
            var vsAlert_Base = VsAlert_VsAlert;
            var vsInput_Base_style = __webpack_require__(15);
            var VsInput_dec, VsInput_dec2, VsInput_dec3, VsInput_dec4, VsInput_dec5, VsInput_dec6, VsInput_dec7, VsInput_dec8, VsInput_dec9, VsInput_dec10, VsInput_dec11, VsInput_dec12, VsInput_dec13, VsInput_dec14, VsInput_dec15, VsInput_class, VsInput_class2, VsInput_descriptor, VsInput_descriptor2, VsInput_descriptor3, VsInput_descriptor4, VsInput_descriptor5, VsInput_descriptor6, VsInput_descriptor7, VsInput_descriptor8, VsInput_descriptor9, VsInput_descriptor10, VsInput_descriptor11, VsInput_descriptor12, VsInput_descriptor13, VsInput_descriptor14, VsInput_descriptor15, VsInput_temp;
            function VsInput_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsInput_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsInput_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsInput_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsInput_VsInput = (VsInput_dec = Prop({
              default: ""
            }), VsInput_dec2 = Prop({
              default: ""
            }), VsInput_dec3 = Prop({
              default: ""
            }), VsInput_dec4 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec5 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec6 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec7 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec8 = Prop({
              type: String,
              default: null
            }), VsInput_dec9 = Prop({
              type: String,
              default: null
            }), VsInput_dec10 = Prop({
              type: Number,
              default: 0
            }), VsInput_dec11 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec12 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec13 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec14 = Prop({
              type: Boolean,
              default: false
            }), VsInput_dec15 = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(VsInput_class = (VsInput_class2 = (VsInput_temp = function(_VsComponent) {
              inheritsLoose_default()(VsInput, _VsComponent);
              function VsInput() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.isVisiblePassword = false;
                initializerDefineProperty_default()(_this, "value", VsInput_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "labelPlaceholder", VsInput_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "label", VsInput_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "block", VsInput_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "iconAfter", VsInput_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "visiblePassword", VsInput_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsInput_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "color", VsInput_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "state", VsInput_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "progress", VsInput_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "border", VsInput_descriptor11, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "shadow", VsInput_descriptor12, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "transparent", VsInput_descriptor13, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "textWhite", VsInput_descriptor14, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsInput_descriptor15, assertThisInitialized_default()(_this));
                _this._uid = void 0;
                return _this;
              }
              var _proto = VsInput.prototype;
              _proto.beforeEnter = function beforeEnter(el) {
                el.style.height = 0;
              };
              _proto.enter = function enter(el, done) {
                var h = el.scrollHeight;
                el.style.height = h - 1 + "px";
                done();
              };
              _proto.leave = function leave(el, done) {
                el.style.minHeight = "0px";
                el.style.height = "0px";
              };
              _proto.getMessage = function getMessage(type) {
                return this.$createElement("transition", {
                  on: {
                    beforeEnter: this.beforeEnter,
                    enter: this.enter,
                    leave: this.leave
                  }
                }, [!!this.$slots["message-" + type] && this.$createElement("div", {
                  staticClass: "vs-input__message",
                  class: ["vs-input__message--" + type]
                }, [this.$slots["message-" + type]])]);
              };
              _proto.render = function render(h) {
                var _ref, _ref2, _this2 = this, _ref3, _ref4, _style, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11;
                var input = h("input", {
                  staticClass: "vs-input",
                  domProps: {
                    value: this.value
                  },
                  class: [(_ref = {}, _ref["vs-input--has-icon"] = !!this.$slots.icon, _ref), (_ref2 = {}, _ref2["vs-input--has-icon--after"] = !!this.iconAfter, _ref2)],
                  on: VsInput_objectSpread({}, this.$listeners, {
                    input: function input2(evt) {
                      _this2.$emit("input", evt.target.value);
                    }
                  }),
                  attrs: VsInput_objectSpread({}, this.$attrs, {
                    placeholder: "",
                    id: this.getId,
                    type: this.visiblePassword ? "text" : this.$attrs.type
                  })
                });
                var label = h("label", {
                  attrs: {
                    for: this.getId
                  },
                  class: ["vs-input__label", {
                    "vs-input__label--placeholder": this.labelPlaceholder
                  }, {
                    "vs-input__label--hidden": this.value !== "" || this.$attrs.type == "date" || this.$attrs.type == "time"
                  }, {
                    "vs-input__label--label": this.label
                  }]
                }, [this.label || this.$attrs.placeholder || this.labelPlaceholder]);
                var placeholder = h("label", {
                  attrs: {
                    for: this.getId
                  },
                  class: ["vs-input__label", {
                    "vs-input__label--hidden": this.value !== ""
                  }]
                }, [this.$attrs.placeholder]);
                var icon = h("span", {
                  staticClass: "vs-input__icon",
                  class: [{
                    "vs-input__icon--after": this.iconAfter
                  }, {
                    "vs-input__icon--click": !!this.$listeners["click-icon"]
                  }],
                  on: {
                    click: function click(evt) {
                      _this2.$emit("click-icon", evt.target.value);
                    }
                  }
                }, [this.$slots.icon]);
                var messageSuccess = this.getMessage("success");
                var messageDanger = this.getMessage("danger");
                var messageWarn = this.getMessage("warn");
                var messagePrimary = this.getMessage("primary");
                var progressBar = h("div", {
                  staticClass: "vs-input__progress",
                  class: [{
                    "vs-input__progress--danger": this.progress < 33
                  }, {
                    "vs-input__progress--warn": this.progress < 66 && this.progress > 33
                  }, {
                    "vs-input__progress--success": this.progress > 66
                  }]
                }, [h("div", {
                  staticClass: "vs-input__progress__bar",
                  style: {
                    width: this.progress + "%"
                  }
                })]);
                var loading = h("div", {
                  staticClass: "vs-input__loading"
                });
                var effects = h("div", {
                  staticClass: "vs-input__affects"
                }, [h("div", {
                  staticClass: "vs-input__affects__1"
                }), h("div", {
                  staticClass: "vs-input__affects__2"
                }), h("div", {
                  staticClass: "vs-input__affects__3"
                }), h("div", {
                  staticClass: "vs-input__affects__4"
                })]);
                var inputContent = h("div", {
                  staticClass: "vs-input-content",
                  class: [(_ref3 = {}, _ref3["vs-input-content--has-color"] = this.hasColor, _ref3), (_ref4 = {}, _ref4["vs-input-content--has-label"] = this.label || this.labelPlaceholder, _ref4)]
                }, [input, this.label && placeholder, label, this.$slots.icon && icon, this.loading && loading, effects]);
                return h("div", {
                  staticClass: "vs-input-parent",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: ["vs-input-parent--state-" + this.state, {
                    "vs-input-parent--border": !!this.border
                  }, {
                    "vs-input-parent--shadow": !!this.shadow
                  }, (_ref5 = {}, _ref5["vs-input-content--has-label"] = this.label || this.labelPlaceholder, _ref5), {
                    block: this.block
                  }, {
                    transparent: this.transparent
                  }, {
                    textWhite: this.textWhite
                  }, {
                    square: this.square
                  }, (_ref6 = {}, _ref6["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref6), (_ref7 = {}, _ref7["vs-component--danger"] = !!this.danger, _ref7), (_ref8 = {}, _ref8["vs-component--warn"] = !!this.warn, _ref8), (_ref9 = {}, _ref9["vs-component--success"] = !!this.success, _ref9), (_ref10 = {}, _ref10["vs-component--dark"] = !!this.dark, _ref10), (_ref11 = {}, _ref11["vs-component--is-color"] = !!this.isColor, _ref11)]
                }, [inputContent, this.progress > 0 && progressBar, messageSuccess, messageDanger, messageWarn, messagePrimary]);
              };
              createClass_default()(VsInput, [{
                key: "getId",
                get: function get() {
                  return "vs-input--" + (this.$attrs.id || this._uid);
                }
              }, {
                key: "hasColor",
                get: function get() {
                  return this.color || this.primary || this.danger || this.success || this.dark || this.warn;
                }
              }]);
              return VsInput;
            }(component_VsComponent), VsInput_temp), VsInput_descriptor = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "value", [VsInput_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor2 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "labelPlaceholder", [VsInput_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor3 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "label", [VsInput_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor4 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "block", [VsInput_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor5 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "iconAfter", [VsInput_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor6 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "visiblePassword", [VsInput_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor7 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "loading", [VsInput_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor8 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "color", [VsInput_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor9 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "state", [VsInput_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor10 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "progress", [VsInput_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor11 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "border", [VsInput_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor12 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "shadow", [VsInput_dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor13 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "transparent", [VsInput_dec13], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor14 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "textWhite", [VsInput_dec14], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_descriptor15 = applyDecoratedDescriptor_default()(VsInput_class2.prototype, "square", [VsInput_dec15], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsInput_class2)) || VsInput_class);
            VsInput_VsInput.install = function(vue) {
              vue.component("vs-input", VsInput_VsInput);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsInput_VsInput.install(window.Vue);
            }
            var vsInput_Base = VsInput_VsInput;
            var vsCheckbox_Base_style = __webpack_require__(9);
            var check_dec, check_class, check_class2, check_descriptor, check_temp;
            function check_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function check_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  check_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  check_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var check_VsIconClose = (check_dec = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(check_class = (check_class2 = (check_temp = function(_Vue) {
              inheritsLoose_default()(VsIconClose, _Vue);
              function VsIconClose() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "indeterminate", check_descriptor, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsIconClose.prototype;
              _proto.render = function render(h) {
                var icon = h("i", {
                  staticClass: "vs-icon-check",
                  on: check_objectSpread({}, this.$listeners),
                  class: [{
                    indeterminate: this.indeterminate
                  }]
                }, [h("span", {}, [h("div", {
                  staticClass: "line1"
                }), h("div", {
                  staticClass: "line2"
                })])]);
                return icon;
              };
              return VsIconClose;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), check_temp), check_descriptor = applyDecoratedDescriptor_default()(check_class2.prototype, "indeterminate", [check_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), check_class2)) || check_class);
            var VsCheckbox_dec, VsCheckbox_dec2, VsCheckbox_dec3, VsCheckbox_dec4, VsCheckbox_dec5, VsCheckbox_dec6, VsCheckbox_dec7, VsCheckbox_dec8, VsCheckbox_dec9, VsCheckbox_dec10, VsCheckbox_class, VsCheckbox_class2, VsCheckbox_descriptor, VsCheckbox_descriptor2, VsCheckbox_descriptor3, VsCheckbox_descriptor4, VsCheckbox_descriptor5, VsCheckbox_descriptor6, VsCheckbox_descriptor7, VsCheckbox_descriptor8, VsCheckbox_descriptor9, VsCheckbox_temp;
            function VsCheckbox_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsCheckbox_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsCheckbox_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsCheckbox_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsCheckbox_VsCheckbox = (VsCheckbox_dec = Prop({
              default: ""
            }), VsCheckbox_dec2 = Prop({
              default: ""
            }), VsCheckbox_dec3 = Prop({
              default: ""
            }), VsCheckbox_dec4 = Prop({
              type: Boolean,
              default: false
            }), VsCheckbox_dec5 = Prop({
              type: Boolean,
              default: false
            }), VsCheckbox_dec6 = Prop({
              type: Boolean,
              default: false
            }), VsCheckbox_dec7 = Prop({
              type: Boolean,
              default: false
            }), VsCheckbox_dec8 = Prop({
              type: Boolean,
              default: false
            }), VsCheckbox_dec9 = Prop({
              type: Boolean,
              default: false
            }), VsCheckbox_dec10 = Watch("indeterminate"), vue_class_component_esm(VsCheckbox_class = (VsCheckbox_class2 = (VsCheckbox_temp = function(_VsComponent) {
              inheritsLoose_default()(VsCheckbox, _VsComponent);
              function VsCheckbox() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this._uid = void 0;
                initializerDefineProperty_default()(_this, "value", VsCheckbox_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "val", VsCheckbox_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notValue", VsCheckbox_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "indeterminate", VsCheckbox_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "lineThrough", VsCheckbox_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "checked", VsCheckbox_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "checkedForce", VsCheckbox_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsCheckbox_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "labelBefore", VsCheckbox_descriptor9, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsCheckbox.prototype;
              _proto.handleIndeterminate = function handleIndeterminate(val) {
                if (val) {
                  this.$emit("input", true);
                } else {
                  this.$emit("input", false);
                }
              };
              _proto.mounted = function mounted() {
                if (this.checked && typeof this.value == "boolean") {
                  this.$emit("input", true);
                }
              };
              _proto.render = function render(h) {
                var _this2 = this, _style, _ref, _ref2, _ref3, _ref4, _ref5;
                var InputCheckbox = h("input", {
                  staticClass: "vs-checkbox",
                  attrs: VsCheckbox_objectSpread({}, this.$attrs, {
                    type: "checkbox",
                    id: this._uid
                  }),
                  domProps: {
                    checked: this.checkedForce || this.isChecked
                  },
                  on: VsCheckbox_objectSpread({}, this.$listeners, {
                    input: function input(evt) {
                      if (typeof _this2.value == "boolean") {
                        _this2.$emit("input", !_this2.value);
                      } else if (typeof _this2.value == "object" && _this2.value !== null) {
                        var array = _this2.value;
                        var containValue = array.indexOf(_this2.val) === -1 && JSON.stringify(array).indexOf(JSON.stringify(_this2.val)) === -1;
                        var indexVal = 0;
                        array.forEach(function(item, index) {
                          if (JSON.stringify(item) == JSON.stringify(_this2.val)) {
                            indexVal = index;
                          }
                        });
                        if (containValue) {
                          array.push(_this2.val);
                        } else {
                          array.splice(indexVal, 1);
                        }
                        _this2.$emit("input", array);
                      } else {
                        if (_this2.val !== _this2.value) {
                          _this2.$emit("input", _this2.val);
                        } else {
                          _this2.$emit("input", _this2.notValue || null);
                        }
                      }
                      _this2.$emit("mousedown", evt);
                    },
                    blur: function blur(evt) {
                      _this2.$emit("blur", evt);
                    }
                  })
                });
                var checkbox = h("div", {
                  staticClass: "vs-checkbox-mask"
                }, [!this.$slots.icon && h(check_VsIconClose, {
                  props: {
                    indeterminate: this.indeterminate
                  }
                }), this.$slots.icon]);
                var label = h("label", {
                  staticClass: "vs-checkbox-label",
                  class: [{
                    lineThrough: this.lineThrough
                  }],
                  attrs: {
                    for: this._uid
                  }
                }, [this.$slots.default]);
                var conCheckbox = h("div", {
                  staticClass: "vs-checkbox-con"
                }, [InputCheckbox, checkbox]);
                return h("div", {
                  staticClass: "vs-checkbox-content",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    "vs-checkbox--checked": this.isChecked
                  }, {
                    "vs-checkbox--disabled": this.$attrs.hasOwnProperty("disabled")
                  }, {
                    "vs-checkbox--loading": this.loading
                  }, {
                    "vs-checkbox--label-before": this.labelBefore
                  }, (_ref = {}, _ref["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5)]
                }, [conCheckbox, this.$slots.default && label]);
              };
              createClass_default()(VsCheckbox, [{
                key: "isChecked",
                get: function get() {
                  var _this3 = this;
                  var isChecked = false;
                  if (this.value) {
                    if (typeof this.value == "boolean") {
                      isChecked = this.value;
                    } else if (typeof this.value == "object" && this.value !== null) {
                      var array = this.value;
                      var containValue = array.indexOf(this.val) === -1 && JSON.stringify(array).indexOf(JSON.stringify(this.val)) === -1;
                      var indexVal = 0;
                      array.forEach(function(item, index) {
                        if (JSON.stringify(item) == JSON.stringify(_this3.val)) {
                          indexVal = index;
                        }
                      });
                      if (containValue) {
                        return false;
                      } else {
                        return true;
                      }
                    }
                  } else {
                    isChecked = false;
                  }
                  return isChecked;
                }
              }]);
              return VsCheckbox;
            }(component_VsComponent), VsCheckbox_temp), VsCheckbox_descriptor = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "value", [VsCheckbox_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor2 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "val", [VsCheckbox_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor3 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "notValue", [VsCheckbox_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor4 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "indeterminate", [VsCheckbox_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor5 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "lineThrough", [VsCheckbox_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor6 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "checked", [VsCheckbox_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor7 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "checkedForce", [VsCheckbox_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor8 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "loading", [VsCheckbox_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCheckbox_descriptor9 = applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "labelBefore", [VsCheckbox_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsCheckbox_class2.prototype, "handleIndeterminate", [VsCheckbox_dec10], Object.getOwnPropertyDescriptor(VsCheckbox_class2.prototype, "handleIndeterminate"), VsCheckbox_class2.prototype), VsCheckbox_class2)) || VsCheckbox_class);
            VsCheckbox_VsCheckbox.install = function(vue) {
              vue.component("vs-checkbox", VsCheckbox_VsCheckbox);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsCheckbox_VsCheckbox.install(window.Vue);
            }
            var vsCheckbox_Base = VsCheckbox_VsCheckbox;
            var vsSwitch_Base_style = __webpack_require__(16);
            var VsSwitch_dec, VsSwitch_dec2, VsSwitch_dec3, VsSwitch_dec4, VsSwitch_dec5, VsSwitch_dec6, VsSwitch_dec7, VsSwitch_class, VsSwitch_class2, VsSwitch_descriptor, VsSwitch_descriptor2, VsSwitch_descriptor3, VsSwitch_descriptor4, VsSwitch_descriptor5, VsSwitch_descriptor6, VsSwitch_descriptor7, VsSwitch_temp;
            function VsSwitch_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsSwitch_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsSwitch_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsSwitch_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsSwitch_VsSwitch = (VsSwitch_dec = Prop({
              default: ""
            }), VsSwitch_dec2 = Prop({
              default: ""
            }), VsSwitch_dec3 = Prop({
              default: ""
            }), VsSwitch_dec4 = Prop({
              type: Boolean,
              default: false
            }), VsSwitch_dec5 = Prop({
              type: Boolean,
              default: false
            }), VsSwitch_dec6 = Prop({
              type: Boolean,
              default: false
            }), VsSwitch_dec7 = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(VsSwitch_class = (VsSwitch_class2 = (VsSwitch_temp = function(_VsComponent) {
              inheritsLoose_default()(VsSwitch, _VsComponent);
              function VsSwitch() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "value", VsSwitch_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "val", VsSwitch_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notValue", VsSwitch_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsSwitch_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsSwitch_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "indeterminate", VsSwitch_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "icon", VsSwitch_descriptor7, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsSwitch.prototype;
              _proto.render = function render(h) {
                var _this2 = this, _style, _ref, _ref2, _ref3, _ref4, _ref5;
                var circle = h("div", {
                  class: ["vs-switch__circle"]
                }, [this.$slots.circle]);
                var textOn = h("div", {
                  ref: "on",
                  class: ["vs-switch__text", "on"]
                }, [this.$slots.on || this.$slots.default]);
                var textOff = h("div", {
                  ref: "off",
                  class: ["vs-switch__text", "off"]
                }, [this.$slots.off || this.$slots.default]);
                var background = h("div", {
                  class: ["vs-switch__background"]
                });
                var input = h("input", {
                  attrs: VsSwitch_objectSpread({}, this.$attrs, {
                    type: "checkbox"
                  }),
                  domProps: {
                    checked: this.isChecked
                  },
                  on: VsSwitch_objectSpread({}, this.$listeners, {
                    input: function input2(evt) {
                      if (typeof _this2.value == "boolean") {
                        _this2.$emit("input", !_this2.value);
                      } else if (typeof _this2.value == "object" && _this2.value !== null) {
                        var array = _this2.value;
                        var containValue = array.indexOf(_this2.val) === -1 && JSON.stringify(array).indexOf(JSON.stringify(_this2.val)) === -1;
                        var indexVal = 0;
                        array.forEach(function(item, index) {
                          if (JSON.stringify(item) == JSON.stringify(_this2.val)) {
                            indexVal = index;
                          }
                        });
                        if (containValue) {
                          array.push(_this2.val);
                        } else {
                          array.splice(indexVal, 1);
                        }
                        _this2.$emit("input", array);
                      } else {
                        if (_this2.val !== _this2.value) {
                          _this2.$emit("input", _this2.val);
                        } else {
                          _this2.$emit("input", _this2.notValue || null);
                        }
                      }
                      _this2.$emit("change", evt);
                    }
                  }),
                  class: ["vs-switch__input"]
                });
                return h("div", {
                  staticClass: "vs-switch",
                  attrs: {
                    type: "checkbox"
                  },
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    "vs-switch--loading": this.loading,
                    "vs-switch--square": this.square,
                    "vs-switch--indeterminate": this.indeterminate,
                    "vs-switch--icon": this.icon
                  }, (_ref = {}, _ref["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5)]
                }, [
                  input,
                  circle,
                  textOn,
                  textOff,
                  // !this.active && textOff,
                  background
                ]);
              };
              createClass_default()(VsSwitch, [{
                key: "isChecked",
                get: function get() {
                  var _this3 = this;
                  var isChecked = false;
                  if (this.value) {
                    if (typeof this.value == "boolean") {
                      isChecked = this.value;
                    } else if (typeof this.value == "object" && this.value !== null) {
                      var array = this.value;
                      var containValue = array.indexOf(this.val) === -1 && JSON.stringify(array).indexOf(JSON.stringify(this.val)) === -1;
                      var indexVal = 0;
                      array.forEach(function(item, index) {
                        if (JSON.stringify(item) == JSON.stringify(_this3.val)) {
                          indexVal = index;
                        }
                      });
                      if (containValue) {
                        return false;
                      } else {
                        return true;
                      }
                    }
                  } else {
                    isChecked = false;
                  }
                  return isChecked;
                }
              }]);
              return VsSwitch;
            }(component_VsComponent), VsSwitch_temp), VsSwitch_descriptor = applyDecoratedDescriptor_default()(VsSwitch_class2.prototype, "value", [VsSwitch_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSwitch_descriptor2 = applyDecoratedDescriptor_default()(VsSwitch_class2.prototype, "val", [VsSwitch_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSwitch_descriptor3 = applyDecoratedDescriptor_default()(VsSwitch_class2.prototype, "notValue", [VsSwitch_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSwitch_descriptor4 = applyDecoratedDescriptor_default()(VsSwitch_class2.prototype, "loading", [VsSwitch_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSwitch_descriptor5 = applyDecoratedDescriptor_default()(VsSwitch_class2.prototype, "square", [VsSwitch_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSwitch_descriptor6 = applyDecoratedDescriptor_default()(VsSwitch_class2.prototype, "indeterminate", [VsSwitch_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSwitch_descriptor7 = applyDecoratedDescriptor_default()(VsSwitch_class2.prototype, "icon", [VsSwitch_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSwitch_class2)) || VsSwitch_class);
            VsSwitch_VsSwitch.install = function(vue) {
              vue.component("vs-switch", VsSwitch_VsSwitch);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsSwitch_VsSwitch.install(window.Vue);
            }
            var vsSwitch_Base = VsSwitch_VsSwitch;
            var vsSelect_Base_style = __webpack_require__(17);
            var arrow_dec, arrow_class, arrow_class2, arrow_descriptor, arrow_temp;
            function arrow_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function arrow_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  arrow_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  arrow_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var arrow_VsIconClose = (arrow_dec = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(arrow_class = (arrow_class2 = (arrow_temp = function(_Vue) {
              inheritsLoose_default()(VsIconClose, _Vue);
              function VsIconClose() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "less", arrow_descriptor, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsIconClose.prototype;
              _proto.render = function render(h) {
                var icon = h("i", {
                  staticClass: "vs-icon-arrow",
                  class: {
                    less: this.less
                  },
                  ref: "icon",
                  on: arrow_objectSpread({}, this.$listeners)
                });
                return icon;
              };
              return VsIconClose;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), arrow_temp), arrow_descriptor = applyDecoratedDescriptor_default()(arrow_class2.prototype, "less", [arrow_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), arrow_class2)) || arrow_class);
            var VsSelect_dec, VsSelect_dec2, VsSelect_dec3, VsSelect_dec4, VsSelect_dec5, VsSelect_dec6, VsSelect_dec7, VsSelect_dec8, VsSelect_dec9, VsSelect_dec10, VsSelect_dec11, VsSelect_dec12, VsSelect_dec13, VsSelect_dec14, VsSelect_class, VsSelect_class2, VsSelect_descriptor, VsSelect_descriptor2, VsSelect_descriptor3, VsSelect_descriptor4, VsSelect_descriptor5, VsSelect_descriptor6, VsSelect_descriptor7, VsSelect_descriptor8, VsSelect_descriptor9, VsSelect_descriptor10, VsSelect_descriptor11, VsSelect_temp;
            function VsSelect_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsSelect_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsSelect_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsSelect_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsSelect_VsSelect = (VsSelect_dec = Prop({}), VsSelect_dec2 = Prop({
              type: Boolean,
              default: false
            }), VsSelect_dec3 = Prop({
              type: Boolean,
              default: false
            }), VsSelect_dec4 = Prop({
              type: String,
              default: ""
            }), VsSelect_dec5 = Prop({
              type: String,
              default: ""
            }), VsSelect_dec6 = Prop({
              type: String,
              default: ""
            }), VsSelect_dec7 = Prop({
              type: Boolean,
              default: false
            }), VsSelect_dec8 = Prop({
              type: Boolean,
              default: false
            }), VsSelect_dec9 = Prop({
              type: Boolean,
              default: false
            }), VsSelect_dec10 = Prop({
              type: String,
              default: null
            }), VsSelect_dec11 = Prop({
              type: Boolean,
              default: false
            }), VsSelect_dec12 = Watch("textFilter"), VsSelect_dec13 = Watch("value"), VsSelect_dec14 = Watch("activeOptions"), vue_class_component_esm(VsSelect_class = (VsSelect_class2 = (VsSelect_temp = function(_VsComponent) {
              inheritsLoose_default()(VsSelect, _VsComponent);
              function VsSelect() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "value", VsSelect_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "multiple", VsSelect_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "filter", VsSelect_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "placeholder", VsSelect_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "labelPlaceholder", VsSelect_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "label", VsSelect_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "disabled", VsSelect_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "collapseChips", VsSelect_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsSelect_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "state", VsSelect_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "block", VsSelect_descriptor11, assertThisInitialized_default()(_this));
                _this.renderSelect = false;
                _this.activeOptions = false;
                _this.valueLabel = null;
                _this.hoverOption = -1;
                _this.uids = [];
                _this.childOptions = [];
                _this.targetSelect = false;
                _this.targetSelectInput = false;
                _this.targetClose = false;
                _this.activeFilter = false;
                _this.textFilter = null;
                _this.childVisibles = 0;
                _this._uid = void 0;
                _this.isSelect = true;
                return _this;
              }
              var _proto = VsSelect.prototype;
              _proto.insertOptions = function insertOptions() {
                var options = this.$refs.options;
                insertBody(options, document.body);
                setCords(options, this.$refs.select);
              };
              _proto.clickOption = function clickOption(value, label) {
                var _this2 = this;
                if (this.multiple) {
                  var oldVal = [].concat(this.value);
                  if (oldVal.indexOf(value) == -1) {
                    oldVal.push(value);
                  } else {
                    oldVal.splice(oldVal.indexOf(value), 1);
                  }
                  this.$emit("input", oldVal);
                } else {
                  this.$emit("input", value);
                  this.valueLabel = label;
                }
                setTimeout(function() {
                  if (_this2.multiple && _this2.activeOptions) {
                    _this2.$refs.chips.focus();
                  }
                }, 10);
                if (!this.multiple) {
                  this.handleBlur();
                }
              };
              _proto.setHover = function setHover() {
                var _this3 = this;
                var index = -1;
                this.childOptions.forEach(function(item, i) {
                  if (item.value == _this3.value) {
                    index = i;
                  }
                });
                this.hoverOption = index;
              };
              _proto.getValue = function getValue() {
                var _this4 = this;
                var options = this.childOptions;
                var filterOptions = options.filter(function(option) {
                  return typeof _this4.value == "number" ? _this4.value == option.value : _this4.value.indexOf(option.value) !== -1;
                });
                var label = [];
                filterOptions.forEach(function(item) {
                  label.push({
                    label: item.label,
                    value: item.value
                  });
                });
                label.sort(function(a, b) {
                  return _this4.value.indexOf(a.value) - _this4.value.indexOf(b.value);
                });
                this.valueLabel = label;
              };
              _proto.handleBlur = function handleBlur() {
                var _this5 = this;
                this.$nextTick(function() {
                  _this5.activeOptions = false;
                });
                this.$emit("blur");
                this.setHover();
                window.removeEventListener("click", this.handleWindowClick);
                if (this.activeOptions) {
                  this.textFilter = "";
                  if (!this.multiple) {
                    this.activeFilter = false;
                  }
                }
              };
              _proto.blur = function blur(evt) {
                if (!this.multiple) {
                  this.handleBlur();
                } else {
                  if (!evt.relatedTarget) {
                    this.handleBlur();
                  } else if (!this.targetSelectInput || !this.targetSelect && !this.activeOptions) {
                    this.handleBlur();
                  }
                }
                if (this.filter) {
                  this.activeFilter = false;
                }
              };
              _proto.handleKeydown = function handleKeydown(evt) {
                var _this6 = this;
                var options = this.$refs.options;
                for (var index = 0; index < 300; index++) {
                  setTimeout(function() {
                    setCords(options, _this6.$refs.select);
                  }, index);
                }
                if (evt.code == "ArrowDown") {
                  evt.preventDefault();
                  if (this.hoverOption < this.childOptions.length - 1) {
                    this.hoverOption++;
                  } else {
                    this.hoverOption = 0;
                  }
                } else if (evt.code == "ArrowUp") {
                  evt.preventDefault();
                  if (this.hoverOption > 0) {
                    this.hoverOption--;
                  } else {
                    this.hoverOption = this.childOptions.length - 1;
                  }
                } else if (evt.code == "Enter") {
                  evt.preventDefault();
                  if (this.hoverOption !== -1) {
                    if (!this.childOptions[this.hoverOption].disabled) {
                      this.clickOption(this.childOptions[this.hoverOption].value, this.childOptions[this.hoverOption].label);
                      if (!this.multiple) {
                        this.handleBlur();
                        this.$refs.input.blur();
                      }
                    }
                  }
                }
                if (this.hoverOption !== -1) {
                  this.$refs.content.scrollTop = this.childOptions[this.hoverOption].$el.offsetTop - 66;
                }
              };
              _proto.handleWindowClick = function handleWindowClick(evt) {
                var _this7 = this;
                if (!this.targetSelectInput) {
                  this.handleBlur();
                }
                if (this.filter && !this.activeOptions) {
                  this.activeFilter = false;
                }
                if (evt.target == this.$refs.input && this.activeOptions && !this.filter) {
                  this.handleBlur();
                  setTimeout(function() {
                    _this7.$refs.input.blur();
                  }, 100);
                }
              };
              _proto.handleResize = function handleResize() {
                var _this8 = this;
                var options = this.$refs.options;
                if (!options) {
                  return;
                }
                this.$nextTick(function() {
                  setCords(options, _this8.$refs.select);
                });
                for (var index = 0; index < 300; index++) {
                  setTimeout(function() {
                    setCords(options, _this8.$refs.select);
                  }, index);
                }
              };
              _proto.handleScroll = function handleScroll() {
                var options = this.$refs.options;
                if (options) {
                  setCords(options, this.$refs.select);
                }
              };
              _proto.beforeEnter = function beforeEnter(el) {
                el.style.height = 0;
              };
              _proto.enter = function enter(el, done) {
                var h = el.scrollHeight;
                el.style.height = h - 1 + "px";
                done();
              };
              _proto.leave = function leave(el, done) {
                el.style.minHeight = "0px";
                el.style.height = "0px";
              };
              _proto.getMessage = function getMessage(type) {
                return this.$createElement("transition", {
                  on: {
                    beforeEnter: this.beforeEnter,
                    enter: this.enter,
                    leave: this.leave
                  }
                }, [!!this.$slots["message-" + type] && this.$createElement("div", {
                  staticClass: "vs-select__message",
                  class: ["vs-select__message--" + type]
                }, [this.$slots["message-" + type]])]);
              };
              _proto.handleTextFilter = function handleTextFilter(val) {
                if (val) {
                  if (this.$refs.placeholder) {
                    this.$refs.placeholder.style.transition = "0s";
                  }
                } else {
                  if (this.$refs.placeholder) {
                    this.$refs.placeholder.style.transition = "";
                  }
                }
              };
              _proto.handleValue = function handleValue(val) {
                var _this9 = this;
                this.getValue();
                setTimeout(function() {
                  _this9.$emit("change", val);
                }, 10);
                if (this.multiple) {
                  this.$nextTick(function() {
                    var h = _this9.$refs.chips.scrollHeight;
                    _this9.$refs.input.style.height = h + "px";
                    var options = _this9.$refs.options;
                    if (_this9.activeOptions) {
                      _this9.$nextTick(function() {
                        setCords(options, _this9.$refs.select);
                      });
                    }
                  });
                }
                if (val) {
                  if (this.$refs.placeholder) {
                    this.$refs.placeholder.style.transition = "0s";
                  }
                } else {
                  if (this.$refs.placeholder) {
                    this.$refs.placeholder.style.transition = "";
                  }
                }
              };
              _proto.handleActive = function handleActive(val) {
                var _this10 = this;
                this.$nextTick(function() {
                  if (val) {
                    _this10.insertOptions();
                  }
                });
                this.uids = [];
              };
              _proto.mounted = function mounted() {
                this.getValue();
                this.renderSelect = true;
                window.addEventListener("resize", this.handleResize);
                window.addEventListener("scroll", this.handleScroll);
              };
              _proto.beforeDestroy = function beforeDestroy() {
                this.handleBlur();
                window.removeEventListener("resize", this.handleResize);
                window.removeEventListener("scroll", this.handleScroll);
              };
              _proto.render = function render(h) {
                var _style, _ref, _ref2, _ref3, _ref4, _ref5, _this11 = this, _style2, _ref6, _ref7, _ref8, _ref9, _ref10;
                var options = h("transition", {
                  props: {
                    name: "vs-select"
                  }
                }, [this.activeOptions && h("div", {
                  staticClass: "vs-select__options",
                  ref: "options",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    isColorDark: this.isColorDark
                  }, (_ref = {}, _ref["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5)],
                  on: {
                    mouseleave: function mouseleave() {
                      _this11.targetSelect = false;
                      _this11.targetSelectInput = false;
                    },
                    mouseenter: function mouseenter() {
                      _this11.targetSelect = true;
                      _this11.targetSelectInput = true;
                    }
                  }
                }, [h("div", {
                  staticClass: "vs-select__options__content",
                  ref: "content"
                }, [this.notData && h("div", {
                  staticClass: "vs-select__options__content__not-data"
                }, [this.$slots.notData || "No data available"]), this.$slots.default])])]);
                var input = h("input", {
                  attrs: {
                    readonly: !this.filter && true,
                    id: !this.multiple && this._uid
                  },
                  staticClass: "vs-select__input",
                  ref: "input",
                  domProps: {
                    value: this.activeFilter ? this.textFilter : this.getValueLabel
                  },
                  class: [{
                    multiple: this.multiple,
                    simple: !this.multiple && !this.filter
                  }],
                  on: VsSelect_objectSpread({}, this.$listeners, {
                    keydown: this.handleKeydown,
                    focus: function focus(evt) {
                      _this11.activeOptions = true;
                      _this11.$emit("focus", evt);
                      if (_this11.filter) {
                        _this11.activeFilter = true;
                      }
                      window.addEventListener("mousedown", _this11.handleWindowClick);
                    },
                    // blur: this.blur,
                    input: function input2(evt) {
                      _this11.textFilter = evt.target.value;
                    }
                  })
                }, this.$slots.default);
                var chips = h("button", {
                  staticClass: "vs-select__chips",
                  ref: "chips",
                  on: {
                    keydown: this.handleKeydown,
                    focus: function focus(evt) {
                      if (!_this11.targetClose) {
                        _this11.activeOptions = true;
                        _this11.$emit("focus", evt);
                      }
                      if (_this11.filter && _this11.multiple) {
                        _this11.$refs.chips_input.focus();
                      }
                    },
                    blur: this.blur
                  }
                }, [].concat(this.getChips, [this.filter && h("input", {
                  staticClass: "vs-select__chips__input",
                  ref: "chips_input",
                  attrs: {
                    placeholder: this.placeholder,
                    id: this._uid
                  },
                  domProps: {
                    value: this.textFilter
                  },
                  on: {
                    // keydown: this.handleKeydown,
                    focus: function focus(evt) {
                      if (!_this11.targetClose) {
                        _this11.activeOptions = true;
                        _this11.$emit("focus", evt);
                      }
                    },
                    blur: this.blur,
                    input: function input2(evt) {
                      _this11.textFilter = evt.target.value;
                    }
                  }
                })]));
                var icon = h(arrow_VsIconClose, {
                  on: {
                    click: function click() {
                      if (_this11.activeOptions) {
                        _this11.activeOptions = false;
                      } else {
                        _this11.$refs.input.focus();
                      }
                    }
                  }
                });
                var label = h("label", {
                  staticClass: "vs-select__label",
                  attrs: {
                    for: this._uid
                  },
                  class: {
                    "vs-select__label--placeholder": this.labelPlaceholder,
                    "vs-select__label--label": this.label,
                    "vs-select__label--hidden": this.value
                  }
                }, [this.labelPlaceholder || this.label]);
                var placeholder = h("label", {
                  staticClass: "vs-select__label",
                  ref: "placeholder",
                  attrs: {
                    for: this._uid
                  },
                  class: {
                    "vs-select__label--hidden": this.value || this.textFilter
                  }
                }, [this.placeholder]);
                var loading = h("div", {
                  staticClass: "vs-select__loading"
                });
                var messageSuccess = this.getMessage("success");
                var messageDanger = this.getMessage("danger");
                var messageWarn = this.getMessage("warn");
                var messagePrimary = this.getMessage("primary");
                var selectContent = h("div", {
                  staticClass: "vs-select",
                  ref: "select",
                  class: ["vs-select--state-" + this.state, {
                    "vs-select--disabled": this.disabled,
                    "activeOptions": this.activeOptions,
                    "loading": this.loading
                  }],
                  on: {
                    mouseleave: function mouseleave(evt) {
                      if (evt.relatedTarget !== _this11.$refs.options) {
                        _this11.targetSelectInput = false;
                        _this11.targetSelect = false;
                      }
                    },
                    mouseenter: function mouseenter() {
                      _this11.targetSelectInput = true;
                    }
                  }
                }, [input, (!this.multiple || this.label) && label, !this.multiple && !this.labelPlaceholder && placeholder, this.multiple && chips, options, this.loading && loading, icon]);
                return h("div", {
                  staticClass: "vs-select-content",
                  style: (_style2 = {}, _style2["--vs-color"] = this.color ? this.getColor : "", _style2),
                  class: [{
                    block: this.block
                  }, (_ref6 = {}, _ref6["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref6), (_ref7 = {}, _ref7["vs-component--danger"] = !!this.danger, _ref7), (_ref8 = {}, _ref8["vs-component--warn"] = !!this.warn, _ref8), (_ref9 = {}, _ref9["vs-component--success"] = !!this.success, _ref9), (_ref10 = {}, _ref10["vs-component--dark"] = !!this.dark, _ref10)]
                }, [selectContent, messageSuccess, messageDanger, messageWarn, messagePrimary]);
              };
              createClass_default()(VsSelect, [{
                key: "getValueLabel",
                get: function get() {
                  var valueLabel = this.valueLabel;
                  var labels = [];
                  if (Array.isArray(valueLabel)) {
                    valueLabel.forEach(function(item) {
                      labels.push(item.label);
                    });
                  } else {
                    labels = valueLabel;
                  }
                  return labels;
                }
              }, {
                key: "getChips",
                get: function get() {
                  var _this12 = this;
                  var chip = function chip2(item, isCollapse) {
                    return _this12.$createElement("span", {
                      staticClass: "vs-select__chips__chip",
                      attrs: {
                        "data-value": item.value
                      },
                      class: [{
                        isCollapse
                      }]
                    }, [item.label, !isCollapse && _this12.$createElement("span", {
                      staticClass: "vs-select__chips__chip__close",
                      on: {
                        click: function click() {
                          setTimeout(function() {
                            _this12.targetClose = false;
                          }, 100);
                          if (!_this12.activeOptions) {
                            _this12.$refs.chips.blur();
                            if (_this12.filter) {
                              _this12.$refs.chips_input.blur();
                            }
                          }
                          _this12.clickOption(item.value, item.label);
                        },
                        mouseleave: function mouseleave() {
                          _this12.targetClose = false;
                        },
                        mouseenter: function mouseenter() {
                          _this12.targetClose = true;
                        }
                      }
                    }, [_this12.$createElement(close_VsIconClose, {
                      props: {
                        hover: "less"
                      }
                    })])]);
                  };
                  var chips = [];
                  if (Array.isArray(this.valueLabel)) {
                    this.valueLabel.forEach(function(item) {
                      chips.push(chip(item, false));
                    });
                  }
                  if (this.collapseChips) {
                    chips = [chips[0], chips.length > 1 && chip({
                      label: "+" + (chips.length - 1),
                      value: null
                    }, true)];
                  }
                  return chips;
                }
              }, {
                key: "notData",
                get: function get() {
                  var childOptions = [];
                  this.$slots.default.forEach(function(option) {
                    if (option.tag) {
                      if (!option.componentInstance.hiddenOption) {
                        childOptions.push(option);
                      }
                    }
                  });
                  childOptions = childOptions.filter(function(item) {
                    if (item.optionGroup) {
                      return !item.componentInstance.hiddenOptionGroup;
                    }
                    return true;
                  });
                  return childOptions.length == 0;
                }
              }]);
              return VsSelect;
            }(component_VsComponent), VsSelect_temp), VsSelect_descriptor = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "value", [VsSelect_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor2 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "multiple", [VsSelect_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor3 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "filter", [VsSelect_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor4 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "placeholder", [VsSelect_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor5 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "labelPlaceholder", [VsSelect_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor6 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "label", [VsSelect_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor7 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "disabled", [VsSelect_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor8 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "collapseChips", [VsSelect_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor9 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "loading", [VsSelect_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor10 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "state", [VsSelect_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelect_descriptor11 = applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "block", [VsSelect_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "handleTextFilter", [VsSelect_dec12], Object.getOwnPropertyDescriptor(VsSelect_class2.prototype, "handleTextFilter"), VsSelect_class2.prototype), applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "handleValue", [VsSelect_dec13], Object.getOwnPropertyDescriptor(VsSelect_class2.prototype, "handleValue"), VsSelect_class2.prototype), applyDecoratedDescriptor_default()(VsSelect_class2.prototype, "handleActive", [VsSelect_dec14], Object.getOwnPropertyDescriptor(VsSelect_class2.prototype, "handleActive"), VsSelect_class2.prototype), VsSelect_class2)) || VsSelect_class);
            VsSelect_VsSelect.install = function(vue) {
              vue.component("vs-select", VsSelect_VsSelect);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsSelect_VsSelect.install(window.Vue);
            }
            var vsSelect_Base = VsSelect_VsSelect;
            var Option_style = __webpack_require__(18);
            var vsCheckbox_dec, vsCheckbox_dec2, vsCheckbox_dec3, vsCheckbox_dec4, vsCheckbox_dec5, vsCheckbox_dec6, vsCheckbox_dec7, vsCheckbox_dec8, vsCheckbox_dec9, vsCheckbox_dec10, vsCheckbox_class, vsCheckbox_class2, vsCheckbox_descriptor, vsCheckbox_descriptor2, vsCheckbox_descriptor3, vsCheckbox_descriptor4, vsCheckbox_descriptor5, vsCheckbox_descriptor6, vsCheckbox_descriptor7, vsCheckbox_descriptor8, vsCheckbox_descriptor9, vsCheckbox_temp;
            function vsCheckbox_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function vsCheckbox_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  vsCheckbox_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  vsCheckbox_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var vsCheckbox_VsCheckbox = (vsCheckbox_dec = Prop({
              default: ""
            }), vsCheckbox_dec2 = Prop({
              default: ""
            }), vsCheckbox_dec3 = Prop({
              default: ""
            }), vsCheckbox_dec4 = Prop({
              type: Boolean,
              default: false
            }), vsCheckbox_dec5 = Prop({
              type: Boolean,
              default: false
            }), vsCheckbox_dec6 = Prop({
              type: Boolean,
              default: false
            }), vsCheckbox_dec7 = Prop({
              type: Boolean,
              default: false
            }), vsCheckbox_dec8 = Prop({
              type: Boolean,
              default: false
            }), vsCheckbox_dec9 = Prop({
              type: Boolean,
              default: false
            }), vsCheckbox_dec10 = Watch("indeterminate"), vue_class_component_esm(vsCheckbox_class = (vsCheckbox_class2 = (vsCheckbox_temp = function(_VsComponent) {
              inheritsLoose_default()(VsCheckbox, _VsComponent);
              function VsCheckbox() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this._uid = void 0;
                initializerDefineProperty_default()(_this, "value", vsCheckbox_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "val", vsCheckbox_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notValue", vsCheckbox_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "indeterminate", vsCheckbox_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "lineThrough", vsCheckbox_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "checked", vsCheckbox_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "checkedForce", vsCheckbox_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", vsCheckbox_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "labelBefore", vsCheckbox_descriptor9, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsCheckbox.prototype;
              _proto.handleIndeterminate = function handleIndeterminate(val) {
                if (val) {
                  this.$emit("input", true);
                } else {
                  this.$emit("input", false);
                }
              };
              _proto.mounted = function mounted() {
                if (this.checked && typeof this.value == "boolean") {
                  this.$emit("input", true);
                }
              };
              _proto.render = function render(h) {
                var _this2 = this, _style, _ref, _ref2, _ref3, _ref4, _ref5;
                var InputCheckbox = h("input", {
                  staticClass: "vs-checkbox",
                  attrs: vsCheckbox_objectSpread({}, this.$attrs, {
                    type: "checkbox",
                    id: this._uid
                  }),
                  domProps: {
                    checked: this.checkedForce || this.isChecked
                  },
                  on: vsCheckbox_objectSpread({}, this.$listeners, {
                    input: function input(evt) {
                      if (typeof _this2.value == "boolean") {
                        _this2.$emit("input", !_this2.value);
                      } else if (typeof _this2.value == "object" && _this2.value !== null) {
                        var array = _this2.value;
                        var containValue = array.indexOf(_this2.val) === -1 && JSON.stringify(array).indexOf(JSON.stringify(_this2.val)) === -1;
                        var indexVal = 0;
                        array.forEach(function(item, index) {
                          if (JSON.stringify(item) == JSON.stringify(_this2.val)) {
                            indexVal = index;
                          }
                        });
                        if (containValue) {
                          array.push(_this2.val);
                        } else {
                          array.splice(indexVal, 1);
                        }
                        _this2.$emit("input", array);
                      } else {
                        if (_this2.val !== _this2.value) {
                          _this2.$emit("input", _this2.val);
                        } else {
                          _this2.$emit("input", _this2.notValue || null);
                        }
                      }
                      _this2.$emit("mousedown", evt);
                    },
                    blur: function blur(evt) {
                      _this2.$emit("blur", evt);
                    }
                  })
                });
                var checkbox = h("div", {
                  staticClass: "vs-checkbox-mask"
                }, [!this.$slots.icon && h(check_VsIconClose, {
                  props: {
                    indeterminate: this.indeterminate
                  }
                }), this.$slots.icon]);
                var label = h("label", {
                  staticClass: "vs-checkbox-label",
                  class: [{
                    lineThrough: this.lineThrough
                  }],
                  attrs: {
                    for: this._uid
                  }
                }, [this.$slots.default]);
                var conCheckbox = h("div", {
                  staticClass: "vs-checkbox-con"
                }, [InputCheckbox, checkbox]);
                return h("div", {
                  staticClass: "vs-checkbox-content",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    "vs-checkbox--checked": this.isChecked
                  }, {
                    "vs-checkbox--disabled": this.$attrs.hasOwnProperty("disabled")
                  }, {
                    "vs-checkbox--loading": this.loading
                  }, {
                    "vs-checkbox--label-before": this.labelBefore
                  }, (_ref = {}, _ref["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5)]
                }, [conCheckbox, this.$slots.default && label]);
              };
              createClass_default()(VsCheckbox, [{
                key: "isChecked",
                get: function get() {
                  var _this3 = this;
                  var isChecked = false;
                  if (this.value) {
                    if (typeof this.value == "boolean") {
                      isChecked = this.value;
                    } else if (typeof this.value == "object" && this.value !== null) {
                      var array = this.value;
                      var containValue = array.indexOf(this.val) === -1 && JSON.stringify(array).indexOf(JSON.stringify(this.val)) === -1;
                      var indexVal = 0;
                      array.forEach(function(item, index) {
                        if (JSON.stringify(item) == JSON.stringify(_this3.val)) {
                          indexVal = index;
                        }
                      });
                      if (containValue) {
                        return false;
                      } else {
                        return true;
                      }
                    }
                  } else {
                    isChecked = false;
                  }
                  return isChecked;
                }
              }]);
              return VsCheckbox;
            }(component_VsComponent), vsCheckbox_temp), vsCheckbox_descriptor = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "value", [vsCheckbox_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor2 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "val", [vsCheckbox_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor3 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "notValue", [vsCheckbox_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor4 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "indeterminate", [vsCheckbox_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor5 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "lineThrough", [vsCheckbox_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor6 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "checked", [vsCheckbox_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor7 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "checkedForce", [vsCheckbox_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor8 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "loading", [vsCheckbox_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), vsCheckbox_descriptor9 = applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "labelBefore", [vsCheckbox_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(vsCheckbox_class2.prototype, "handleIndeterminate", [vsCheckbox_dec10], Object.getOwnPropertyDescriptor(vsCheckbox_class2.prototype, "handleIndeterminate"), vsCheckbox_class2.prototype), vsCheckbox_class2)) || vsCheckbox_class);
            var VsSelectOption_dec, VsSelectOption_dec2, VsSelectOption_dec3, VsSelectOption_dec4, VsSelectOption_class, VsSelectOption_class2, VsSelectOption_descriptor, VsSelectOption_descriptor2, VsSelectOption_descriptor3, VsSelectOption_temp;
            function VsSelectOption_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsSelectOption_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsSelectOption_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsSelectOption_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsSelectOption_VsSelectOption = (VsSelectOption_dec = Prop({}), VsSelectOption_dec2 = Prop({
              type: Boolean,
              default: false
            }), VsSelectOption_dec3 = Prop({}), VsSelectOption_dec4 = Watch("$parent.textFilter"), vue_class_component_esm(VsSelectOption_class = (VsSelectOption_class2 = (VsSelectOption_temp = function(_VsComponent) {
              inheritsLoose_default()(VsSelectOption, _VsComponent);
              function VsSelectOption() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "value", VsSelectOption_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "disabled", VsSelectOption_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "label", VsSelectOption_descriptor3, assertThisInitialized_default()(_this));
                _this.activeOption = false;
                _this.hiddenOption = false;
                _this._uid = void 0;
                _this.myIndex = void 0;
                return _this;
              }
              var _proto = VsSelectOption.prototype;
              _proto.handleTextFilter = function handleTextFilter(val) {
                if (val) {
                  if (this.label.toLowerCase().indexOf(val.toLowerCase()) === -1) {
                    this.hiddenOption = true;
                  } else {
                    this.hiddenOption = false;
                  }
                } else {
                  this.hiddenOption = false;
                }
              };
              _proto.getParent = function getParent() {
                return this.$parent.isSelect && this.$parent || this.$parent.$parent.isSelect && this.$parent.$parent;
              };
              _proto.mounted = function mounted() {
                if (!this.getParent().renderSelect) {
                  this.getParent().childOptions.push(this);
                }
                this.getParent().uids.push(this._uid);
                this.activeOption = this.isActive;
                this.getParent().setHover();
              };
              _proto.render = function render(h) {
                var _this2 = this;
                var checkbox = h(vsCheckbox_VsCheckbox, {
                  props: {
                    checkedForce: this.isActive
                  }
                }, [this.$slots.default]);
                return h("button", {
                  attrs: {
                    disabled: this.disabled
                  },
                  staticClass: "vs-select__option",
                  class: [{
                    activeOption: this.isActive,
                    isHover: this.isHover,
                    isMultiple: this.isMultiple,
                    hiddenOption: this.hiddenOption
                  }],
                  on: VsSelectOption_objectSpread({}, this.$listeners, {
                    mousedown: function mousedown() {
                      console.log(_this2.value);
                      _this2.$parent.clickOption(_this2.value, _this2.label);
                    },
                    blur: function blur() {
                      if (!_this2.$parent.targetSelect && !_this2.$parent.targetClose) {
                        _this2.$parent.activeOptions = false;
                      }
                    }
                  })
                }, [this.isMultiple && checkbox, !this.isMultiple && this.$slots.default]);
              };
              createClass_default()(VsSelectOption, [{
                key: "isActive",
                get: function get() {
                  return typeof this.getParent().value == "number" ? this.getParent().value == this.value : this.getParent().value.indexOf(this.value) !== -1;
                }
              }, {
                key: "isHover",
                get: function get() {
                  return this.getParent().uids.indexOf(this._uid) == this.getParent().hoverOption;
                }
              }, {
                key: "isMultiple",
                get: function get() {
                  return this.getParent().multiple;
                }
              }]);
              return VsSelectOption;
            }(component_VsComponent), VsSelectOption_temp), VsSelectOption_descriptor = applyDecoratedDescriptor_default()(VsSelectOption_class2.prototype, "value", [VsSelectOption_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelectOption_descriptor2 = applyDecoratedDescriptor_default()(VsSelectOption_class2.prototype, "disabled", [VsSelectOption_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSelectOption_descriptor3 = applyDecoratedDescriptor_default()(VsSelectOption_class2.prototype, "label", [VsSelectOption_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsSelectOption_class2.prototype, "handleTextFilter", [VsSelectOption_dec4], Object.getOwnPropertyDescriptor(VsSelectOption_class2.prototype, "handleTextFilter"), VsSelectOption_class2.prototype), VsSelectOption_class2)) || VsSelectOption_class);
            VsSelectOption_VsSelectOption.install = function(vue) {
              vue.component("vs-option", VsSelectOption_VsSelectOption);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsSelectOption_VsSelectOption.install(window.Vue);
            }
            var Option = VsSelectOption_VsSelectOption;
            var OptionGroup_style = __webpack_require__(19);
            var vsOptionGroup_dec, vsOptionGroup_class, vsOptionGroup_class2, vsOptionGroup_temp;
            var vsOptionGroup_VsOptionGroup = (vsOptionGroup_dec = Watch("$parent.textFilter"), vue_class_component_esm(vsOptionGroup_class = (vsOptionGroup_class2 = (vsOptionGroup_temp = function(_VsComponent) {
              inheritsLoose_default()(VsOptionGroup, _VsComponent);
              function VsOptionGroup() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.optionGroup = true;
                _this.textFilter = null;
                _this.hiddenOptionGroup = false;
                return _this;
              }
              var _proto = VsOptionGroup.prototype;
              _proto.clickOption = function clickOption(value, label) {
                this.$parent.clickOption(value, label);
              };
              _proto.handleTextFilter = function handleTextFilter(val) {
                if (val) {
                  if (this.labels.toLowerCase().indexOf(val.toLowerCase()) === -1) {
                    this.hiddenOptionGroup = true;
                  } else {
                    this.hiddenOptionGroup = false;
                  }
                } else {
                  this.hiddenOptionGroup = false;
                }
                this.textFilter = val;
              };
              _proto.render = function render(h) {
                return h("div", {
                  staticClass: "vs-select__option-group",
                  class: [{
                    hiddenOptionGroup: this.hiddenOptionGroup
                  }]
                }, [h("h5", {}, this.$slots.title), this.$slots.default]);
              };
              createClass_default()(VsOptionGroup, [{
                key: "labels",
                get: function get() {
                  var labels = "";
                  this.$slots.default.forEach(function(item) {
                    if (item.tag) {
                      labels += item.componentInstance.label;
                    }
                  });
                  return labels;
                }
              }]);
              return VsOptionGroup;
            }(component_VsComponent), vsOptionGroup_temp), applyDecoratedDescriptor_default()(vsOptionGroup_class2.prototype, "handleTextFilter", [vsOptionGroup_dec], Object.getOwnPropertyDescriptor(vsOptionGroup_class2.prototype, "handleTextFilter"), vsOptionGroup_class2.prototype), vsOptionGroup_class2)) || vsOptionGroup_class);
            vsOptionGroup_VsOptionGroup.install = function(vue) {
              vue.component("vs-option-group", vsOptionGroup_VsOptionGroup);
            };
            if (typeof window !== "undefined" && window.Vue) {
              vsOptionGroup_VsOptionGroup.install(window.Vue);
            }
            var OptionGroup = vsOptionGroup_VsOptionGroup;
            var vsAvatar_Base_style = __webpack_require__(20);
            var VsAvatar_dec, VsAvatar_dec2, VsAvatar_dec3, VsAvatar_dec4, VsAvatar_dec5, VsAvatar_dec6, VsAvatar_dec7, VsAvatar_dec8, VsAvatar_dec9, VsAvatar_dec10, VsAvatar_dec11, VsAvatar_dec12, VsAvatar_dec13, VsAvatar_class, VsAvatar_class2, VsAvatar_descriptor, VsAvatar_descriptor2, VsAvatar_descriptor3, VsAvatar_descriptor4, VsAvatar_descriptor5, VsAvatar_descriptor6, VsAvatar_descriptor7, VsAvatar_descriptor8, VsAvatar_descriptor9, VsAvatar_descriptor10, VsAvatar_descriptor11, VsAvatar_temp;
            function VsAvatar_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsAvatar_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsAvatar_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsAvatar_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsAvatar_VsAvatar = (VsAvatar_dec = Prop({
              default: null
            }), VsAvatar_dec2 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec3 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec4 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec5 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec6 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec7 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec8 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec9 = Prop({
              default: false,
              type: Boolean
            }), VsAvatar_dec10 = Prop({
              default: "",
              type: String
            }), VsAvatar_dec11 = Prop({
              default: "",
              type: String
            }), VsAvatar_dec12 = Watch("$slots.text"), VsAvatar_dec13 = Watch("badgeColor"), vue_class_component_esm(VsAvatar_class = (VsAvatar_class2 = (VsAvatar_temp = function(_VsComponent) {
              inheritsLoose_default()(VsAvatar, _VsComponent);
              function VsAvatar() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "badgePosition", VsAvatar_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "pointer", VsAvatar_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "circle", VsAvatar_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsAvatar_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "history", VsAvatar_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsAvatar_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "historyGradient", VsAvatar_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "writing", VsAvatar_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "badge", VsAvatar_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "badgeColor", VsAvatar_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "size", VsAvatar_descriptor11, assertThisInitialized_default()(_this));
                _this.textLength = 0;
                _this.countPlus = 0;
                _this.index = null;
                return _this;
              }
              var _proto = VsAvatar.prototype;
              _proto.getParent = function getParent() {
                return this.$parent.vsAvatarGroup && this.$parent;
              };
              _proto.handleSlotText = function handleSlotText() {
                console.log("cambio el slot");
              };
              _proto.handleBadgeColor = function handleBadgeColor() {
                util_setColor("badge", this.badgeColor, this.$el);
                this.$el.classList.add("vs-change-color-badge");
              };
              _proto.mounted = function mounted() {
                util_setColor("badge", this.badgeColor, this.$el);
                this.$el.classList.add("vs-change-color-badge");
                if (this.getParent()) {
                  this.index = this.getParent().avatars.length;
                  this.getParent().avatars.push(this);
                }
              };
              _proto.render = function render(h) {
                var _class4, _style, _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
                var writing = h("div", {
                  staticClass: "vs-avatar__points"
                }, [h("div", {
                  staticClass: "vs-avatar__points__point"
                }), h("div", {
                  staticClass: "vs-avatar__points__point"
                }), h("div", {
                  staticClass: "vs-avatar__points__point"
                })]);
                var badge = h("div", {
                  staticClass: "vs-avatar__badge",
                  class: [{
                    isSlot: this.$slots.badge,
                    writing: this.writing
                  }, this.badgePosition]
                }, [this.writing ? writing : this.$slots.badge]);
                var avatar = h("div", {
                  staticClass: "vs-avatar",
                  class: (_class4 = {}, _class4["vs-avatar--letter--" + this.textLength] = this.textLength > 2, _class4)
                }, [this.$slots.text && this.getText, this.$slots.default]);
                var loading = h("div", {
                  staticClass: "vs-avatar__loading"
                }, [h("div", {
                  staticClass: "vs-avatar__loading__animate"
                })]);
                var latest = h("div", {
                  staticClass: "vs-avatar__latest",
                  directives: [{
                    name: "show",
                    value: this.getParent() && this.getParent().avatars.length - this.index - 1 != 0
                  }]
                }, ["+" + (this.getParent() && this.getParent().avatars.length - this.index - 1)]);
                var icons = h("div", {
                  staticClass: "vs-avatar__icons"
                }, [this.$slots.icons]);
                return h("div", {
                  staticClass: "vs-avatar-content",
                  attrs: VsAvatar_objectSpread({}, this.$attrs),
                  on: VsAvatar_objectSpread({}, this.$listeners),
                  style: (_style = {
                    width: this.size + "px",
                    height: this.size + "px",
                    cursor: this.pointer && "pointer"
                  }, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [(_ref = {
                    "history": this.history,
                    "history--gradient": this.historyGradient,
                    "vs-avatar-content--circle": this.circle,
                    "vs-avatar-content--square": this.square,
                    "vs-avatar-content--hidden": this.isHidden,
                    "vs-avatar-content--latest": this.isLatest,
                    "vs-avatar-content--hasIcons": this.$slots.icons
                  }, _ref["vs-avatar-content--size"] = this.size, _ref), (_ref2 = {}, _ref2["vs-component--primary"] = !!this.primary, _ref2), (_ref3 = {}, _ref3["vs-component--danger"] = !!this.danger, _ref3), (_ref4 = {}, _ref4["vs-component--warn"] = !!this.warn, _ref4), (_ref5 = {}, _ref5["vs-component--success"] = !!this.success, _ref5), (_ref6 = {}, _ref6["vs-component--dark"] = !!this.dark, _ref6), (_ref7 = {}, _ref7["vs-component--is-color"] = !!this.isColor, _ref7)]
                }, [this.loading && loading, avatar, this.$slots.badge ? badge : this.badge && badge, this.isLatest && latest, this.$slots.icons && icons]);
              };
              createClass_default()(VsAvatar, [{
                key: "getText",
                get: function get() {
                  var _this$$slots$text = this.$slots.text, nodeText = _this$$slots$text[0];
                  var text = nodeText.text.trim();
                  var getLetters = [text];
                  if (text.length > 5) {
                    getLetters = text.split(/\s/g).map(function(item) {
                      return item[0];
                    });
                    this.textLength = getLetters.length;
                  } else {
                    this.textLength = getLetters[0].length;
                  }
                  return getLetters;
                }
              }, {
                key: "isHidden",
                get: function get() {
                  return this.getParent() && this.getParent().max && this.index > Number(this.getParent().max) - 1;
                }
              }, {
                key: "isLatest",
                get: function get() {
                  return this.getParent() && this.index == Number(this.getParent().max) - 1;
                }
              }]);
              return VsAvatar;
            }(component_VsComponent), VsAvatar_temp), VsAvatar_descriptor = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "badgePosition", [VsAvatar_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor2 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "pointer", [VsAvatar_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor3 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "circle", [VsAvatar_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor4 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "square", [VsAvatar_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor5 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "history", [VsAvatar_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor6 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "loading", [VsAvatar_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor7 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "historyGradient", [VsAvatar_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor8 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "writing", [VsAvatar_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor9 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "badge", [VsAvatar_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor10 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "badgeColor", [VsAvatar_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatar_descriptor11 = applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "size", [VsAvatar_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "handleSlotText", [VsAvatar_dec12], Object.getOwnPropertyDescriptor(VsAvatar_class2.prototype, "handleSlotText"), VsAvatar_class2.prototype), applyDecoratedDescriptor_default()(VsAvatar_class2.prototype, "handleBadgeColor", [VsAvatar_dec13], Object.getOwnPropertyDescriptor(VsAvatar_class2.prototype, "handleBadgeColor"), VsAvatar_class2.prototype), VsAvatar_class2)) || VsAvatar_class);
            VsAvatar_VsAvatar.install = function(vue) {
              vue.component("vs-avatar", VsAvatar_VsAvatar);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsAvatar_VsAvatar.install(window.Vue);
            }
            var vsAvatar_Base = VsAvatar_VsAvatar;
            var Group_style = __webpack_require__(21);
            var VsAvatarGroup_dec, VsAvatarGroup_dec2, VsAvatarGroup_class, VsAvatarGroup_class2, VsAvatarGroup_descriptor, VsAvatarGroup_descriptor2, VsAvatarGroup_temp;
            var VsAvatarGroup_VsAvatarGroup = (VsAvatarGroup_dec = Prop({
              default: null
            }), VsAvatarGroup_dec2 = Prop({
              default: false,
              type: Boolean
            }), vue_class_component_esm(VsAvatarGroup_class = (VsAvatarGroup_class2 = (VsAvatarGroup_temp = function(_VsComponent) {
              inheritsLoose_default()(VsAvatarGroup, _VsComponent);
              function VsAvatarGroup() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "max", VsAvatarGroup_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "float", VsAvatarGroup_descriptor2, assertThisInitialized_default()(_this));
                _this.avatars = [];
                _this.vsAvatarGroup = true;
                return _this;
              }
              var _proto = VsAvatarGroup.prototype;
              _proto.render = function render(h) {
                return h("div", {
                  staticClass: "vs-avatar__group",
                  class: {
                    float: this.float
                  }
                }, [this.$slots.default]);
              };
              return VsAvatarGroup;
            }(component_VsComponent), VsAvatarGroup_temp), VsAvatarGroup_descriptor = applyDecoratedDescriptor_default()(VsAvatarGroup_class2.prototype, "max", [VsAvatarGroup_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatarGroup_descriptor2 = applyDecoratedDescriptor_default()(VsAvatarGroup_class2.prototype, "float", [VsAvatarGroup_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsAvatarGroup_class2)) || VsAvatarGroup_class);
            VsAvatarGroup_VsAvatarGroup.install = function(vue) {
              vue.component("vs-avatar-group", VsAvatarGroup_VsAvatarGroup);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsAvatarGroup_VsAvatarGroup.install(window.Vue);
            }
            var Group = VsAvatarGroup_VsAvatarGroup;
            var vsRadio_Base_style = __webpack_require__(22);
            var VsRadio_dec, VsRadio_dec2, VsRadio_dec3, VsRadio_dec4, VsRadio_dec5, VsRadio_dec6, VsRadio_class, VsRadio_class2, VsRadio_descriptor, VsRadio_descriptor2, VsRadio_descriptor3, VsRadio_descriptor4, VsRadio_descriptor5, VsRadio_descriptor6, VsRadio_temp;
            var VsRadio_VsRadio = (VsRadio_dec = Prop({}), VsRadio_dec2 = Prop({}), VsRadio_dec3 = Prop({
              type: String,
              default: null
            }), VsRadio_dec4 = Prop({
              type: Boolean,
              default: false
            }), VsRadio_dec5 = Prop({
              type: Boolean,
              default: false
            }), VsRadio_dec6 = Prop({
              type: Boolean,
              default: false
            }), vue_class_component_esm(VsRadio_class = (VsRadio_class2 = (VsRadio_temp = function(_VsComponent) {
              inheritsLoose_default()(VsRadio, _VsComponent);
              function VsRadio() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this._uid = void 0;
                _this.model = void 0;
                initializerDefineProperty_default()(_this, "value", VsRadio_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "val", VsRadio_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "name", VsRadio_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "disabled", VsRadio_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsRadio_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "labelBefore", VsRadio_descriptor6, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsRadio.prototype;
              _proto.render = function render(h) {
                var _this2 = this, _style, _ref, _ref2, _ref3, _ref4, _ref5;
                var radioInput = h("input", {
                  attrs: {
                    type: "radio",
                    id: this._uid,
                    value: this.val,
                    name: this.name || this.value,
                    checked: this.isChecked
                  },
                  on: {
                    input: function input() {
                      _this2.$emit("input", _this2.val);
                    }
                  }
                });
                var radioEffect = h("span", {
                  staticClass: "vs-radio__effect"
                }, [h("span", {
                  staticClass: "vs-radio__effect__icon"
                }, [this.$slots.icon]), h("span", {
                  staticClass: "vs-radio__effect__loading"
                })]);
                var label = h("label", {
                  staticClass: "vs-radio__label",
                  attrs: {
                    for: this._uid
                  }
                }, [this.$slots.default]);
                var radio = h("div", {
                  staticClass: "vs-radio"
                }, [radioInput, radioEffect]);
                return h("div", {
                  staticClass: "vs-radio-content",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    disabled: this.disabled,
                    loading: this.loading,
                    active: this.isChecked
                  }, (_ref = {}, _ref["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5)]
                }, [this.labelBefore && label, radio, !this.labelBefore && label]);
              };
              createClass_default()(VsRadio, [{
                key: "isChecked",
                get: function get() {
                  return this.value == this.val;
                }
              }]);
              return VsRadio;
            }(component_VsComponent), VsRadio_temp), VsRadio_descriptor = applyDecoratedDescriptor_default()(VsRadio_class2.prototype, "value", [VsRadio_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRadio_descriptor2 = applyDecoratedDescriptor_default()(VsRadio_class2.prototype, "val", [VsRadio_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRadio_descriptor3 = applyDecoratedDescriptor_default()(VsRadio_class2.prototype, "name", [VsRadio_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRadio_descriptor4 = applyDecoratedDescriptor_default()(VsRadio_class2.prototype, "disabled", [VsRadio_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRadio_descriptor5 = applyDecoratedDescriptor_default()(VsRadio_class2.prototype, "loading", [VsRadio_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRadio_descriptor6 = applyDecoratedDescriptor_default()(VsRadio_class2.prototype, "labelBefore", [VsRadio_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRadio_class2)) || VsRadio_class);
            VsRadio_VsRadio.install = function(vue) {
              vue.component("vs-radio", VsRadio_VsRadio);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsRadio_VsRadio.install(window.Vue);
            }
            var vsRadio_Base = VsRadio_VsRadio;
            var vsTooltip_Base_style = __webpack_require__(23);
            var VsTooltip_dec, VsTooltip_dec2, VsTooltip_dec3, VsTooltip_dec4, VsTooltip_dec5, VsTooltip_dec6, VsTooltip_dec7, VsTooltip_dec8, VsTooltip_dec9, VsTooltip_dec10, VsTooltip_dec11, VsTooltip_dec12, VsTooltip_dec13, VsTooltip_dec14, VsTooltip_dec15, VsTooltip_class, VsTooltip_class2, VsTooltip_descriptor, VsTooltip_descriptor2, VsTooltip_descriptor3, VsTooltip_descriptor4, VsTooltip_descriptor5, VsTooltip_descriptor6, VsTooltip_descriptor7, VsTooltip_descriptor8, VsTooltip_descriptor9, VsTooltip_descriptor10, VsTooltip_descriptor11, VsTooltip_descriptor12, VsTooltip_descriptor13, VsTooltip_descriptor14, VsTooltip_temp;
            var VsTooltip_VsTooltip = (VsTooltip_dec = Prop({}), VsTooltip_dec2 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec3 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec4 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec5 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec6 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec7 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec8 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec9 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec10 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec11 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec12 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec13 = Prop({
              default: false,
              type: Boolean
            }), VsTooltip_dec14 = Prop({
              default: null,
              type: String
            }), VsTooltip_dec15 = Watch("value"), vue_class_component_esm(VsTooltip_class = (VsTooltip_class2 = (VsTooltip_temp = function(_VsComponent) {
              inheritsLoose_default()(VsTooltip, _VsComponent);
              function VsTooltip() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.activeTooltip = false;
                _this.isHoverTooltip = false;
                initializerDefineProperty_default()(_this, "value", VsTooltip_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsTooltip_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "bottom", VsTooltip_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "left", VsTooltip_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "right", VsTooltip_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notHover", VsTooltip_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "shadow", VsTooltip_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "interactivity", VsTooltip_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notArrow", VsTooltip_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsTooltip_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "circle", VsTooltip_descriptor11, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "border", VsTooltip_descriptor12, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "borderThick", VsTooltip_descriptor13, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "delay", VsTooltip_descriptor14, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsTooltip.prototype;
              _proto.insertTooltip = function insertTooltip() {
                var tooltip = this.$refs.tooltip;
                insertBody(tooltip, document.body);
                var position = "top";
                if (this.bottom) {
                  position = "bottom";
                } else if (this.left) {
                  position = "left";
                } else if (this.right) {
                  position = "right";
                }
                setCordsPosition(tooltip, this.$refs.content, position);
              };
              _proto.handlerMouseEnter = function handlerMouseEnter() {
                var _this2 = this;
                if (this.delay) {
                  setTimeout(function() {
                    _this2.activeTooltip = true;
                    _this2.$nextTick(function() {
                      _this2.insertTooltip();
                    });
                  }, Number(this.delay));
                } else {
                  this.activeTooltip = true;
                  this.$nextTick(function() {
                    _this2.insertTooltip();
                  });
                }
              };
              _proto.removeTooltip = function removeTooltip() {
                this.activeTooltip = false;
                this.$emit("input", false);
              };
              _proto.handleResize = function handleResize() {
                var _this3 = this;
                var position = "top";
                if (this.bottom) {
                  position = "bottom";
                } else if (this.left) {
                  position = "left";
                } else if (this.right) {
                  position = "right";
                }
                var tooltip = this.$refs.tooltip;
                if (!tooltip) {
                  return;
                }
                this.$nextTick(function() {
                  setCordsPosition(tooltip, _this3.$refs.content, position);
                });
                for (var index = 0; index < 300; index++) {
                  setTimeout(function() {
                    setCordsPosition(tooltip, _this3.$refs.content, position);
                  }, index);
                }
              };
              _proto.handleMouseDownNotHover = function handleMouseDownNotHover(evt) {
                if (!evt.target.closest(".vs-tooltip") && !evt.target.closest(".vs-tooltip-content")) {
                  this.removeTooltip();
                }
              };
              _proto.handleWatchValue = function handleWatchValue(val) {
                var _this4 = this;
                this.activeTooltip = val;
                if (val) {
                  this.$nextTick(function() {
                    _this4.insertTooltip();
                  });
                }
              };
              _proto.mounted = function mounted() {
                window.addEventListener("popstate", function(event) {
                  var tooltips = document.querySelectorAll(".vs-tooltip");
                  tooltips.forEach(function(tooltip) {
                    tooltip.remove();
                  });
                });
                window.addEventListener("resize", this.handleResize);
                if (this.notHover) {
                  window.addEventListener("mousedown", this.handleMouseDownNotHover);
                }
                window.addEventListener("touchstart", this.handleMouseDownNotHover);
              };
              _proto.beforeDestroy = function beforeDestroy() {
                this.activeTooltip = false;
                window.removeEventListener("resize", this.handleResize);
                window.removeEventListener("mousedown", this.handleMouseDownNotHover);
              };
              _proto.render = function render(h) {
                var _style, _ref, _ref2, _ref3, _ref4, _ref5, _this5 = this;
                var loading = h("div", {
                  staticClass: "vs-tooltip__loading"
                });
                var tooltip = h("div", {
                  staticClass: "vs-tooltip",
                  ref: "tooltip",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    top: !this.bottom && !this.left && !this.right,
                    bottom: this.bottom,
                    left: this.left,
                    right: this.right,
                    shadow: this.shadow,
                    notArrow: this.notArrow,
                    square: this.square,
                    circle: this.circle,
                    border: this.border,
                    borderThick: this.borderThick,
                    loading: this.loading
                  }, (_ref = {}, _ref["vs-component--primary"] = !!this.primary, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5)],
                  on: {
                    mouseenter: function mouseenter() {
                      if (_this5.interactivity) {
                        _this5.isHoverTooltip = true;
                        _this5.handlerMouseEnter();
                      }
                    },
                    mouseleave: function mouseleave() {
                      _this5.isHoverTooltip = false;
                      _this5.removeTooltip();
                    }
                  }
                }, [this.$slots.tooltip, this.loading && loading]);
                return h("div", {
                  staticClass: "vs-tooltip-content",
                  ref: "content",
                  on: {
                    mouseenter: function mouseenter() {
                      if (!_this5.notHover) {
                        _this5.handlerMouseEnter();
                      }
                    },
                    mouseleave: function mouseleave() {
                      if (!_this5.notHover) {
                        if (_this5.interactivity) {
                          setTimeout(function() {
                            if (!_this5.isHoverTooltip) {
                              _this5.removeTooltip();
                            }
                          }, 250);
                        } else {
                          _this5.removeTooltip();
                        }
                      }
                    }
                  }
                }, [h("transition", {
                  props: {
                    name: "vs-tooltip"
                  }
                }, [this.activeTooltip && tooltip]), this.$slots.default]);
              };
              return VsTooltip;
            }(component_VsComponent), VsTooltip_temp), VsTooltip_descriptor = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "value", [VsTooltip_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor2 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "loading", [VsTooltip_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor3 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "bottom", [VsTooltip_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor4 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "left", [VsTooltip_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor5 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "right", [VsTooltip_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor6 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "notHover", [VsTooltip_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor7 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "shadow", [VsTooltip_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor8 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "interactivity", [VsTooltip_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor9 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "notArrow", [VsTooltip_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor10 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "square", [VsTooltip_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor11 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "circle", [VsTooltip_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor12 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "border", [VsTooltip_dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor13 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "borderThick", [VsTooltip_dec13], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTooltip_descriptor14 = applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "delay", [VsTooltip_dec14], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsTooltip_class2.prototype, "handleWatchValue", [VsTooltip_dec15], Object.getOwnPropertyDescriptor(VsTooltip_class2.prototype, "handleWatchValue"), VsTooltip_class2.prototype), VsTooltip_class2)) || VsTooltip_class);
            VsTooltip_VsTooltip.install = function(vue) {
              vue.component("vs-tooltip", VsTooltip_VsTooltip);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsTooltip_VsTooltip.install(window.Vue);
            }
            var vsTooltip_Base = VsTooltip_VsTooltip;
            var vsDialog_Base_style = __webpack_require__(24);
            var VsDialog_dec, VsDialog_dec2, VsDialog_dec3, VsDialog_dec4, VsDialog_dec5, VsDialog_dec6, VsDialog_dec7, VsDialog_dec8, VsDialog_dec9, VsDialog_dec10, VsDialog_dec11, VsDialog_dec12, VsDialog_dec13, VsDialog_dec14, VsDialog_dec15, VsDialog_class, VsDialog_class2, VsDialog_descriptor, VsDialog_descriptor2, VsDialog_descriptor3, VsDialog_descriptor4, VsDialog_descriptor5, VsDialog_descriptor6, VsDialog_descriptor7, VsDialog_descriptor8, VsDialog_descriptor9, VsDialog_descriptor10, VsDialog_descriptor11, VsDialog_descriptor12, VsDialog_descriptor13, VsDialog_descriptor14, VsDialog_temp;
            var VsDialog_VsDialog = (VsDialog_dec = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec2 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec3 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec4 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec5 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec6 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec7 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec8 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec9 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec10 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec11 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec12 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec13 = Prop({
              default: null,
              type: String
            }), VsDialog_dec14 = Prop({
              default: false,
              type: Boolean
            }), VsDialog_dec15 = Watch("value"), vue_class_component_esm(VsDialog_class = (VsDialog_class2 = (VsDialog_temp = function(_VsComponent) {
              inheritsLoose_default()(VsDialog, _VsComponent);
              function VsDialog() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.rebound = false;
                initializerDefineProperty_default()(_this, "value", VsDialog_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsDialog_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "fullScreen", VsDialog_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notClose", VsDialog_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "preventClose", VsDialog_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notPadding", VsDialog_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "overflowHidden", VsDialog_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "blur", VsDialog_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsDialog_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "autoWidth", VsDialog_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "scroll", VsDialog_descriptor11, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notCenter", VsDialog_descriptor12, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "width", VsDialog_descriptor13, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "routerClose", VsDialog_descriptor14, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsDialog.prototype;
              _proto.esc = function esc(evt) {
                if (evt.which == 27 && !this.preventClose) {
                  this.$emit("input", false);
                  this.$emit("close");
                }
              };
              _proto.addEsc = function addEsc() {
                window.addEventListener("keydown", this.esc);
              };
              _proto.insertDialog = function insertDialog() {
                var _this2 = this;
                this.addEsc();
                this.$nextTick(function() {
                  var dialog = _this2.$refs["dialog-content"];
                  insertBody(dialog, document.querySelector("#app"));
                });
              };
              _proto.handleWatchValue = function handleWatchValue(val) {
                if (val) {
                  this.insertDialog();
                  if (this.overflowHidden) {
                    document.body.style.overflow = "hidden";
                  }
                } else {
                  if (this.overflowHidden) {
                    document.body.style.overflow = "";
                    window.removeEventListener("keydown", this.esc);
                  }
                }
              };
              _proto.beforeDestroy = function beforeDestroy() {
                if (this.$el && this.$el.parentNode) {
                  this.$el.parentNode.removeChild(this.$el);
                }
              };
              _proto.render = function render(h) {
                var _this3 = this;
                var header = h("header", {
                  staticClass: "vs-dialog__header"
                }, [this.$slots.header]);
                var content = h("div", {
                  staticClass: "vs-dialog__content",
                  class: {
                    notFooter: !this.$slots.footer
                  }
                }, [this.$slots.default]);
                var footer = h("footer", {
                  staticClass: "vs-dialog__footer"
                }, [this.$slots.footer]);
                var close = h("button", {
                  staticClass: "vs-dialog__close",
                  on: {
                    click: function click(evt) {
                      _this3.$emit("input", !_this3.value);
                      _this3.$emit("close");
                    }
                  }
                }, [h(close_VsIconClose, {
                  props: {
                    hover: "x"
                  }
                })]);
                var loading = h("div", {
                  staticClass: "vs-dialog__loading"
                }, [h("div", {
                  staticClass: "vs-dialog__loading__load"
                })]);
                var dialog = h("div", {
                  staticClass: "vs-dialog",
                  style: {
                    width: this.width
                  },
                  class: {
                    "vs-dialog--fullScreen": this.fullScreen,
                    "vs-dialog--rebound": this.rebound,
                    "vs-dialog--notPadding": this.notPadding,
                    "vs-dialog--square": this.square,
                    "vs-dialog--autoWidth": this.autoWidth,
                    "vs-dialog--scroll": this.scroll,
                    "vs-dialog--loading": this.loading,
                    "vs-dialog--notCenter": this.notCenter
                  }
                }, [this.loading && loading, !this.notClose && close, this.$slots.header && header, content, this.$slots.footer && footer]);
                var dialogContent = h("div", {
                  staticClass: "vs-dialog-content",
                  ref: "dialog-content",
                  class: {
                    blur: this.blur,
                    fullScreen: this.fullScreen
                  },
                  on: {
                    click: function click(evt) {
                      if (!evt.target.closest(".vs-dialog") && !_this3.preventClose) {
                        _this3.$emit("input", !_this3.value);
                        _this3.$emit("close");
                      }
                      if (_this3.preventClose && !evt.target.closest(".vs-dialog")) {
                        _this3.rebound = true;
                        setTimeout(function() {
                          _this3.rebound = false;
                        }, 300);
                      }
                    }
                  }
                }, [dialog]);
                return h("transition", {
                  props: {
                    name: "vs-dialog"
                  }
                }, [this.value && dialogContent]);
              };
              return VsDialog;
            }(component_VsComponent), VsDialog_temp), VsDialog_descriptor = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "value", [VsDialog_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor2 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "loading", [VsDialog_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor3 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "fullScreen", [VsDialog_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor4 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "notClose", [VsDialog_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor5 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "preventClose", [VsDialog_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor6 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "notPadding", [VsDialog_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor7 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "overflowHidden", [VsDialog_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor8 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "blur", [VsDialog_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor9 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "square", [VsDialog_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor10 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "autoWidth", [VsDialog_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor11 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "scroll", [VsDialog_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor12 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "notCenter", [VsDialog_dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor13 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "width", [VsDialog_dec13], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsDialog_descriptor14 = applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "routerClose", [VsDialog_dec14], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsDialog_class2.prototype, "handleWatchValue", [VsDialog_dec15], Object.getOwnPropertyDescriptor(VsDialog_class2.prototype, "handleWatchValue"), VsDialog_class2.prototype), VsDialog_class2)) || VsDialog_class);
            VsDialog_VsDialog.install = function(vue) {
              vue.component("vs-dialog", VsDialog_VsDialog);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsDialog_VsDialog.install(window.Vue);
            }
            var vsDialog_Base = VsDialog_VsDialog;
            var vsPagination_Base_style = __webpack_require__(25);
            var VsPagination_dec, VsPagination_dec2, VsPagination_dec3, VsPagination_dec4, VsPagination_dec5, VsPagination_dec6, VsPagination_dec7, VsPagination_dec8, VsPagination_dec9, VsPagination_dec10, VsPagination_dec11, VsPagination_dec12, VsPagination_dec13, VsPagination_dec14, VsPagination_dec15, VsPagination_dec16, VsPagination_dec17, VsPagination_class, VsPagination_class2, VsPagination_descriptor, VsPagination_descriptor2, VsPagination_descriptor3, VsPagination_descriptor4, VsPagination_descriptor5, VsPagination_descriptor6, VsPagination_descriptor7, VsPagination_descriptor8, VsPagination_descriptor9, VsPagination_descriptor10, VsPagination_descriptor11, VsPagination_descriptor12, VsPagination_descriptor13, VsPagination_descriptor14, VsPagination_descriptor15, VsPagination_temp;
            var VsPagination_VsPagination = (VsPagination_dec = Prop({}), VsPagination_dec2 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec3 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec4 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec5 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec6 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec7 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec8 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec9 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec10 = Prop({
              default: false,
              type: Boolean
            }), VsPagination_dec11 = Prop({
              default: function _default() {
                return [];
              },
              type: Array
            }), VsPagination_dec12 = Prop({
              default: function _default() {
                return [];
              },
              type: Array
            }), VsPagination_dec13 = Prop({
              default: 0,
              type: Number
            }), VsPagination_dec14 = Prop({
              default: 9,
              type: Number
            }), VsPagination_dec15 = Prop({
              default: 5,
              type: Number
            }), VsPagination_dec16 = Watch("length"), VsPagination_dec17 = Watch("value"), vue_class_component_esm(VsPagination_class = (VsPagination_class2 = (VsPagination_temp = function(_VsComponent) {
              inheritsLoose_default()(VsPagination, _VsComponent);
              function VsPagination() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.val = 0;
                _this.leftActive = 42;
                _this.activeClassMove = false;
                initializerDefineProperty_default()(_this, "value", VsPagination_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "infinite", VsPagination_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "progress", VsPagination_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notMargin", VsPagination_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "buttonsDotted", VsPagination_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notArrows", VsPagination_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "onlyArrows", VsPagination_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "circle", VsPagination_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsPagination_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "disabled", VsPagination_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "disabledItems", VsPagination_descriptor11, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loadingItems", VsPagination_descriptor12, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "length", VsPagination_descriptor13, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "max", VsPagination_descriptor14, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "dottedNumber", VsPagination_descriptor15, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsPagination.prototype;
              _proto.handleLength = function handleLength() {
                var _this2 = this;
                this.$nextTick(function() {
                  var offsetLeftPagination = _this2.$refs.pagination.offsetLeft;
                  _this2.leftActive = _this2.$refs["btn" + _this2.value].offsetLeft + offsetLeftPagination;
                  setTimeout(function() {
                    _this2.activeClassMove = false;
                  }, 300);
                });
              };
              _proto.handleValue = function handleValue(val, prevValue) {
                var _this3 = this;
                if (this.isDisabledItem(val) || this.isLoadingItem(val)) {
                  var newVal = val;
                  if (val > prevValue) {
                    newVal += 1;
                  } else {
                    newVal -= 1;
                  }
                  if (newVal > this.length) {
                    newVal = this.infinite ? 1 : prevValue;
                  } else if (newVal <= 0) {
                    newVal = this.infinite ? this.length : prevValue;
                  }
                  this.val = newVal;
                  this.setValuePage(newVal);
                } else {
                  this.val = val;
                  if (this.$refs.pagination) {
                    this.activeClassMove = true;
                    this.$nextTick(function() {
                      var offsetLeftPagination = _this3.$refs.pagination.offsetLeft;
                      _this3.leftActive = _this3.$refs["btn" + val].offsetLeft + offsetLeftPagination;
                      setTimeout(function() {
                        _this3.activeClassMove = false;
                      }, 300);
                    });
                  }
                }
              };
              _proto.setValuePage = function setValuePage(NumberPage) {
                this.$emit("input", NumberPage);
              };
              _proto.renderDotted = function renderDotted(text) {
                var _this4 = this;
                if (text === void 0) {
                  text = "...";
                }
                var h = this.$createElement;
                var dotted = h("div", {
                  staticClass: "vs-pagination__dotted",
                  class: {
                    next: this.value == this.length ? false : text == "...>"
                  },
                  on: {
                    click: function click(evt) {
                      var newVal = (_this4.value == _this4.length ? false : text == "...>") ? _this4.val += _this4.dottedNumber : _this4.val -= _this4.dottedNumber;
                      if (newVal > _this4.length) {
                        newVal = _this4.length;
                      } else if (newVal < 1) {
                        newVal = 1;
                      }
                      _this4.setValuePage(newVal);
                    }
                  }
                }, [h("span", {
                  staticClass: "dotted"
                }, ["..."]), h("span", {
                  staticClass: "con-arrows"
                }, [h(arrow_VsIconClose), h(arrow_VsIconClose)])]);
                return dotted;
              };
              _proto.isDisabledItem = function isDisabledItem(item) {
                return this.disabledItems.indexOf(item) !== -1;
              };
              _proto.isLoadingItem = function isLoadingItem(item) {
                return this.loadingItems.indexOf(item) !== -1;
              };
              _proto.renderButton = function renderButton(NumberPage) {
                var _this5 = this;
                if (NumberPage === void 0) {
                  NumberPage = 1;
                }
                var h = this.$createElement;
                var button = h("button", {
                  ref: "btn" + NumberPage,
                  staticClass: "vs-pagination__button",
                  class: {
                    active: NumberPage == this.value,
                    prevActive: NumberPage == this.value - 1,
                    nextActive: NumberPage == this.value + 1,
                    disabled: this.isDisabledItem(NumberPage),
                    loading: this.isLoadingItem(NumberPage)
                  },
                  on: {
                    click: function click(evt) {
                      _this5.setValuePage(NumberPage);
                    }
                  }
                }, this.buttonsDotted ? "" : "" + NumberPage);
                return button;
              };
              _proto.renderButtons = function renderButtons(array) {
                var _this6 = this;
                var buttons = [];
                array.forEach(function(item) {
                  if (item === "...>" || item === "<...") {
                    buttons.push(_this6.renderDotted(item));
                  } else {
                    buttons.push(_this6.renderButton(item));
                  }
                });
                return buttons;
              };
              _proto.getButtons = function getButtons(start, end) {
                if (start === void 0) {
                  start = 1;
                }
                if (end === void 0) {
                  end = 6;
                }
                var buttons = [];
                for (start > 0 ? start : 1; start <= end; start++) {
                  buttons.push(start);
                }
                return buttons;
              };
              _proto.mounted = function mounted() {
                this.val = this.value;
                this.handleValue(this.value, this.val += 1);
              };
              _proto.render = function render(h) {
                var _this7 = this, _style, _ref, _ref2, _ref3, _ref4, _ref5;
                var active = h("div", {
                  staticClass: "vs-pagination__active",
                  style: {
                    left: this.leftActive + "px"
                  },
                  class: {
                    move: this.activeClassMove
                  }
                }, this.buttonsDotted ? "" : this.value);
                var pagination = h("div", {
                  staticClass: "vs-pagination",
                  ref: "pagination"
                }, [this.getPages]);
                var prev = h("button", {
                  staticClass: "vs-pagination__arrow",
                  attrs: {
                    disabled: this.infinite ? false : this.val <= 1
                  },
                  class: ["prev"],
                  on: {
                    click: function click() {
                      var newVal = _this7.val -= 1;
                      if (newVal > 0) {
                        _this7.setValuePage(newVal);
                      } else if (_this7.infinite) {
                        _this7.setValuePage(_this7.length);
                      }
                    }
                  }
                }, [this.$slots.arrowPrev ? this.$slots.arrowPrev : h(arrow_VsIconClose)]);
                var next = h("button", {
                  staticClass: "vs-pagination__arrow",
                  attrs: {
                    disabled: this.infinite ? false : this.val >= this.length
                  },
                  class: ["next"],
                  on: {
                    click: function click() {
                      var newVal = _this7.val += 1;
                      if (newVal <= _this7.length) {
                        _this7.setValuePage(newVal);
                      } else if (_this7.infinite) {
                        _this7.setValuePage(1);
                      }
                    }
                  }
                }, [this.$slots.arrowNext ? this.$slots.arrowNext : h(arrow_VsIconClose)]);
                var slot = h("div", {
                  staticClass: "vs-pagination__slot"
                }, [this.$slots.default]);
                var progress = h("div", {
                  staticClass: "vs-pagination__progress"
                }, [h("div", {
                  staticClass: "progress",
                  style: {
                    width: this.getProgress + "%"
                  }
                })]);
                return h("div", {
                  staticClass: "vs-pagination-content",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    buttonsDotted: this.buttonsDotted,
                    circle: this.circle,
                    square: this.square,
                    disabled: this.disabled,
                    notMargin: this.notMargin
                  }, (_ref = {}, _ref["vs-component--primary"] = !this.danger && !this.success && !this.warn && !this.dark && !this.color, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5)]
                }, [!this.onlyArrows && !this.$slots.default && active, !this.notArrows && prev, this.$slots.default && slot, !this.onlyArrows && !this.$slots.default && pagination, !this.notArrows && next, this.progress && progress]);
              };
              createClass_default()(VsPagination, [{
                key: "isMobile",
                get: function get() {
                  var isMobile = false;
                  if (!this.$isServer) {
                    if (window.innerWidth < 600) {
                      isMobile = true;
                    }
                  }
                  return isMobile;
                }
              }, {
                key: "getPages",
                get: function get() {
                  var length = Number(this.length);
                  var max = this.isMobile ? 5 : this.max;
                  var even = max % 2 === 0 ? 1 : 0;
                  var prevRange = Math.floor(max / 2);
                  var nextRange = length - prevRange + 1 + even;
                  if (this.value >= prevRange && this.value <= nextRange && !this.buttonsDotted) {
                    var start = this.value - prevRange + 2;
                    var end = this.value + prevRange - 2 - even;
                    return this.renderButtons([1, "<..."].concat(this.getButtons(start, end), ["...>", this.length]));
                  } else if (!this.buttonsDotted && this.length > 6) {
                    return this.renderButtons([].concat(this.getButtons(1, prevRange), ["...>"], this.getButtons(nextRange, length)));
                  } else if (this.buttonsDotted || this.length <= 6) {
                    return this.renderButtons([].concat(this.getButtons(1, this.length == 0 ? 1 : this.length)));
                  }
                  return [];
                }
              }, {
                key: "getProgress",
                get: function get() {
                  var percent = 0;
                  percent = this.value * 100 / this.length;
                  return percent;
                }
              }]);
              return VsPagination;
            }(component_VsComponent), VsPagination_temp), VsPagination_descriptor = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "value", [VsPagination_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor2 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "infinite", [VsPagination_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor3 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "progress", [VsPagination_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor4 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "notMargin", [VsPagination_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor5 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "buttonsDotted", [VsPagination_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor6 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "notArrows", [VsPagination_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor7 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "onlyArrows", [VsPagination_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor8 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "circle", [VsPagination_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor9 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "square", [VsPagination_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor10 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "disabled", [VsPagination_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor11 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "disabledItems", [VsPagination_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor12 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "loadingItems", [VsPagination_dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor13 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "length", [VsPagination_dec13], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor14 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "max", [VsPagination_dec14], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsPagination_descriptor15 = applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "dottedNumber", [VsPagination_dec15], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "handleLength", [VsPagination_dec16], Object.getOwnPropertyDescriptor(VsPagination_class2.prototype, "handleLength"), VsPagination_class2.prototype), applyDecoratedDescriptor_default()(VsPagination_class2.prototype, "handleValue", [VsPagination_dec17], Object.getOwnPropertyDescriptor(VsPagination_class2.prototype, "handleValue"), VsPagination_class2.prototype), VsPagination_class2)) || VsPagination_class);
            VsPagination_VsPagination.install = function(vue) {
              vue.component("vs-pagination", VsPagination_VsPagination);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsPagination_VsPagination.install(window.Vue);
            }
            var vsPagination_Base = VsPagination_VsPagination;
            var vsTable_Base_style = __webpack_require__(26);
            var lodash = __webpack_require__(10);
            var VsTable_dec, VsTable_dec2, VsTable_dec3, VsTable_class, VsTable_class2, VsTable_descriptor, VsTable_descriptor2, VsTable_descriptor3, VsTable_temp;
            var VsTable_VsTable = (VsTable_dec = Prop({}), VsTable_dec2 = Prop({
              default: false,
              type: Boolean
            }), VsTable_dec3 = Prop({
              default: false,
              type: Boolean
            }), vue_class_component_esm(VsTable_class = (VsTable_class2 = (VsTable_temp = function(_VsComponent) {
              inheritsLoose_default()(VsTable, _VsComponent);
              function VsTable() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.colspan = 0;
                initializerDefineProperty_default()(_this, "value", VsTable_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "striped", VsTable_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "loading", VsTable_descriptor3, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsTable.prototype;
              _proto.mounted = function mounted() {
                var tds = this.$refs.thead.querySelectorAll("th");
                this.colspan = tds.length;
              };
              _proto.selected = function selected(val) {
                if (this.isMultipleSelected) {
                  this.selectedMultiple(val);
                } else {
                  this.$emit("input", val);
                }
              };
              _proto.selectedMultiple = function selectedMultiple(val) {
                var newVal = this.value;
                if (this.value.includes(val)) {
                  newVal.splice(this.value.indexOf(val), 1);
                } else {
                  newVal.push(val);
                }
                this.$emit("input", newVal);
              };
              _proto.render = function render(h) {
                var footer = h("footer", {
                  staticClass: "vs-table__footer"
                }, [this.$slots.footer]);
                var header = h("header", {
                  staticClass: "vs-table__header"
                }, [this.$slots.header]);
                var thead = h("thead", {
                  ref: "thead",
                  staticClass: "vs-table__thead"
                }, [this.$slots.thead]);
                var notFound = h("tbody", {
                  staticClass: "vs-table_not-found"
                }, [h("tr", [h("td", {
                  attrs: {
                    colspan: this.colspan
                  }
                }, [this.$slots.notFound || "No matching records found"])])]);
                var tbody = h("tbody", {
                  staticClass: "vs-table__tbody"
                }, [this.$slots.tbody]);
                var table = h("div", {
                  staticClass: "vs-table",
                  class: {
                    isSelectedValue: this.value,
                    striped: this.striped,
                    isMultipleSelected: this.isMultipleSelected
                  }
                }, [h("table", {}, [thead, tbody, notFound])]);
                return h("div", {
                  staticClass: "vs-table-content"
                }, [this.$slots.header && header, table, this.$slots.footer && footer]);
              };
              createClass_default()(VsTable, [{
                key: "isMultipleSelected",
                get: function get() {
                  return lodash["isArray"](this.value);
                }
              }]);
              return VsTable;
            }(component_VsComponent), VsTable_temp), VsTable_descriptor = applyDecoratedDescriptor_default()(VsTable_class2.prototype, "value", [VsTable_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTable_descriptor2 = applyDecoratedDescriptor_default()(VsTable_class2.prototype, "striped", [VsTable_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTable_descriptor3 = applyDecoratedDescriptor_default()(VsTable_class2.prototype, "loading", [VsTable_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTable_class2)) || VsTable_class);
            VsTable_VsTable.install = function(vue) {
              vue.component("vs-table", VsTable_VsTable);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsTable_VsTable.install(window.Vue);
            }
            var vsTable_Base = VsTable_VsTable;
            var Tr_style = __webpack_require__(29);
            var vsTableExpand_dec, vsTableExpand_dec2, vsTableExpand_class, vsTableExpand_class2, vsTableExpand_descriptor, vsTableExpand_temp;
            var vsTableExpand_VsTableTr = (vsTableExpand_dec = Prop({}), vsTableExpand_dec2 = Watch("hidden"), vue_class_component_esm(vsTableExpand_class = (vsTableExpand_class2 = (vsTableExpand_temp = function(_VsComponent) {
              inheritsLoose_default()(VsTableTr, _VsComponent);
              function VsTableTr() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "colspan", vsTableExpand_descriptor, assertThisInitialized_default()(_this));
                _this.hidden = true;
                return _this;
              }
              var _proto = VsTableTr.prototype;
              _proto.handleChangeHidden = function handleChangeHidden(val) {
                var _this2 = this;
                if (val) {
                  setTimeout(function() {
                    _this2.$el.parentNode.removeChild(_this2.$el);
                    _this2.$destroy();
                  }, 300);
                } else {
                  this.$nextTick(function() {
                    var content = _this2.$refs.content;
                    content.style.height = content.scrollHeight + "px";
                  });
                }
              };
              _proto.render = function render(h) {
                var subContent = h("div", {
                  staticClass: "vs-table__expand__td__content__sub"
                }, [this.$slots.default]);
                var content = h("div", {
                  staticClass: "vs-table__expand__td__content",
                  ref: "content"
                }, [subContent]);
                var td = h("td", {
                  staticClass: "vs-table__expand__td",
                  attrs: {
                    colspan: this.colspan
                  }
                }, [content]);
                var expand = h("tr", {
                  staticClass: "vs-table__tr__expand"
                }, [td]);
                return h("transition", {
                  props: {
                    name: "fade-expand"
                  }
                }, [!this.hidden && expand]);
              };
              return VsTableTr;
            }(component_VsComponent), vsTableExpand_temp), vsTableExpand_descriptor = applyDecoratedDescriptor_default()(vsTableExpand_class2.prototype, "colspan", [vsTableExpand_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(vsTableExpand_class2.prototype, "handleChangeHidden", [vsTableExpand_dec2], Object.getOwnPropertyDescriptor(vsTableExpand_class2.prototype, "handleChangeHidden"), vsTableExpand_class2.prototype), vsTableExpand_class2)) || vsTableExpand_class);
            var VsTableTr_dec, VsTableTr_dec2, VsTableTr_dec3, VsTableTr_dec4, VsTableTr_dec5, VsTableTr_class, VsTableTr_class2, VsTableTr_descriptor, VsTableTr_descriptor2, VsTableTr_descriptor3, VsTableTr_descriptor4, VsTableTr_temp;
            var VsTableTr_VsTableTr = (VsTableTr_dec = Prop({}), VsTableTr_dec2 = Prop({
              type: Boolean,
              default: false
            }), VsTableTr_dec3 = Prop({
              type: Boolean,
              default: false
            }), VsTableTr_dec4 = Prop({
              type: Boolean,
              default: false
            }), VsTableTr_dec5 = Watch("data"), vue_class_component_esm(VsTableTr_class = (VsTableTr_class2 = (VsTableTr_temp = function(_VsComponent) {
              inheritsLoose_default()(VsTableTr, _VsComponent);
              function VsTableTr() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "data", VsTableTr_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "isSelected", VsTableTr_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notClickSelected", VsTableTr_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "openExpandOnlyTd", VsTableTr_descriptor4, assertThisInitialized_default()(_this));
                _this.expand = false;
                _this.instanceExpand = null;
                return _this;
              }
              var _proto = VsTableTr.prototype;
              _proto.insertAfter = function insertAfter(element) {
                if (this.$el.nextSibling) {
                  this.$el.parentNode.insertBefore(element, this.$el.nextSibling);
                } else {
                  this.$el.parentNode.appendChild(element);
                }
              };
              _proto.handleChangeData = function handleChangeData() {
                this.$el.style.removeProperty("--vs-color");
                if (this.instanceExpand) {
                  this.instanceExpand.$data.hidden = true;
                  this.instanceExpand = null;
                }
              };
              _proto.handleClickHasExpand = function handleClickHasExpand(h) {
                if (this.instanceExpand) {
                  this.instanceExpand.$data.hidden = !this.instanceExpand.$data.hidden;
                  this.instanceExpand = null;
                } else {
                  var colspan = this.$parent.$el.querySelectorAll("thead th").length;
                  var trExpand = external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a.extend(vsTableExpand_VsTableTr);
                  this.instanceExpand = new trExpand();
                  this.instanceExpand.$props.colspan = colspan;
                  this.instanceExpand.$slots.default = this.$slots.expand;
                  this.instanceExpand.vm = this.instanceExpand.$mount();
                  this.instanceExpand.$data.hidden = false;
                  this.insertAfter(this.instanceExpand.vm.$el);
                }
              };
              _proto.render = function render(h) {
                var _this2 = this;
                return h("tr", {
                  staticClass: "vs-table__tr",
                  on: {
                    click: function click(evt) {
                      if (_this2.$slots.expand) {
                        if ((_this2.openExpandOnlyTd ? evt.target.nodeName == "TD" : true) && !evt.target.className.includes("isEdit")) {
                          _this2.handleClickHasExpand(h);
                        }
                      }
                      if (evt.target.nodeName == "TD" && !_this2.notClickSelected) {
                        _this2.$parent.selected(_this2.data);
                        _this2.$emit("selected", _this2.data);
                      }
                      _this2.$emit("click", evt);
                    }
                  },
                  class: {
                    selected: this.isSelected,
                    isExpand: !!this.instanceExpand,
                    expand: this.$slots.expand
                  }
                }, this.$slots.default);
              };
              return VsTableTr;
            }(component_VsComponent), VsTableTr_temp), VsTableTr_descriptor = applyDecoratedDescriptor_default()(VsTableTr_class2.prototype, "data", [VsTableTr_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTableTr_descriptor2 = applyDecoratedDescriptor_default()(VsTableTr_class2.prototype, "isSelected", [VsTableTr_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTableTr_descriptor3 = applyDecoratedDescriptor_default()(VsTableTr_class2.prototype, "notClickSelected", [VsTableTr_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTableTr_descriptor4 = applyDecoratedDescriptor_default()(VsTableTr_class2.prototype, "openExpandOnlyTd", [VsTableTr_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsTableTr_class2.prototype, "handleChangeData", [VsTableTr_dec5], Object.getOwnPropertyDescriptor(VsTableTr_class2.prototype, "handleChangeData"), VsTableTr_class2.prototype), VsTableTr_class2)) || VsTableTr_class);
            VsTableTr_VsTableTr.install = function(vue) {
              vue.component("vs-tr", VsTableTr_VsTableTr);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsTableTr_VsTableTr.install(window.Vue);
            }
            var Tr = VsTableTr_VsTableTr;
            var Th_style = __webpack_require__(30);
            var VsTableTh_dec, VsTableTh_class, VsTableTh_class2, VsTableTh_descriptor, VsTableTh_temp;
            function VsTableTh_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsTableTh_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsTableTh_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsTableTh_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsTableTh_VsTableTh = (VsTableTh_dec = Prop({
              default: false,
              type: Boolean
            }), vue_class_component_esm(VsTableTh_class = (VsTableTh_class2 = (VsTableTh_temp = function(_VsComponent) {
              inheritsLoose_default()(VsTableTh, _VsComponent);
              function VsTableTh() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "sort", VsTableTh_descriptor, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsTableTh.prototype;
              _proto.mounted = function mounted() {
                this.$el.style.width = this.$el.scrollWidth + "px";
              };
              _proto.render = function render(h) {
                var icon2 = h(arrow_VsIconClose, {
                  staticClass: "icon-sort-2"
                });
                var icon = h(arrow_VsIconClose, {
                  staticClass: "icon-sort-1"
                });
                var icons = h("div", {
                  staticClass: "vs-table__th__content__icons"
                }, [icon, icon2]);
                var content = h("div", {
                  staticClass: "vs-table__th__content"
                }, [this.$slots.default, this.sort && icons]);
                return h("th", {
                  staticClass: "vs-table__th",
                  class: {
                    sort: this.sort
                  },
                  on: VsTableTh_objectSpread({}, this.$listeners)
                }, [content]);
              };
              return VsTableTh;
            }(component_VsComponent), VsTableTh_temp), VsTableTh_descriptor = applyDecoratedDescriptor_default()(VsTableTh_class2.prototype, "sort", [VsTableTh_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTableTh_class2)) || VsTableTh_class);
            VsTableTh_VsTableTh.install = function(vue) {
              vue.component("vs-th", VsTableTh_VsTableTh);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsTableTh_VsTableTh.install(window.Vue);
            }
            var Th = VsTableTh_VsTableTh;
            var Td_style = __webpack_require__(31);
            var VsTableTd_dec, VsTableTd_dec2, VsTableTd_class, VsTableTd_class2, VsTableTd_descriptor, VsTableTd_descriptor2, VsTableTd_temp;
            var VsTableTd_VsTableTd = (VsTableTd_dec = Prop({
              type: Boolean
            }), VsTableTd_dec2 = Prop({
              type: Boolean
            }), vue_class_component_esm(VsTableTd_class = (VsTableTd_class2 = (VsTableTd_temp = function(_VsComponent) {
              inheritsLoose_default()(VsTableTd, _VsComponent);
              function VsTableTd() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "checkbox", VsTableTd_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "edit", VsTableTd_descriptor2, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsTableTd.prototype;
              _proto.render = function render(h) {
                var _this2 = this;
                return h("td", {
                  staticClass: "vs-table__td",
                  on: {
                    click: function click(evt) {
                      _this2.$emit("click", evt);
                    }
                  },
                  class: {
                    isCheckbox: this.checkbox,
                    isEdit: this.edit
                  }
                }, this.$slots.default);
              };
              return VsTableTd;
            }(component_VsComponent), VsTableTd_temp), VsTableTd_descriptor = applyDecoratedDescriptor_default()(VsTableTd_class2.prototype, "checkbox", [VsTableTd_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTableTd_descriptor2 = applyDecoratedDescriptor_default()(VsTableTd_class2.prototype, "edit", [VsTableTd_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsTableTd_class2)) || VsTableTd_class);
            VsTableTd_VsTableTd.install = function(vue) {
              vue.component("vs-td", VsTableTd_VsTableTd);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsTableTd_VsTableTd.install(window.Vue);
            }
            var Td = VsTableTd_VsTableTd;
            var vsNavbar_Base_style = __webpack_require__(32);
            var VsNavbar_dec, VsNavbar_dec2, VsNavbar_dec3, VsNavbar_dec4, VsNavbar_dec5, VsNavbar_dec6, VsNavbar_dec7, VsNavbar_dec8, VsNavbar_dec9, VsNavbar_dec10, VsNavbar_dec11, VsNavbar_dec12, VsNavbar_dec13, VsNavbar_dec14, VsNavbar_dec15, VsNavbar_class, VsNavbar_class2, VsNavbar_descriptor, VsNavbar_descriptor2, VsNavbar_descriptor3, VsNavbar_descriptor4, VsNavbar_descriptor5, VsNavbar_descriptor6, VsNavbar_descriptor7, VsNavbar_descriptor8, VsNavbar_descriptor9, VsNavbar_descriptor10, VsNavbar_descriptor11, VsNavbar_descriptor12, VsNavbar_temp;
            var VsNavbar_VsNavbar = (VsNavbar_dec = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec2 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec3 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec4 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec5 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec6 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec7 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec8 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec9 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec10 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec11 = Prop({
              default: false,
              type: Boolean
            }), VsNavbar_dec12 = Prop({
              default: null
            }), VsNavbar_dec13 = Watch("hideScroll"), VsNavbar_dec14 = Watch("paddingScroll"), VsNavbar_dec15 = Watch("shadowScroll"), vue_class_component_esm(VsNavbar_class = (VsNavbar_class2 = (VsNavbar_temp = function(_VsComponent) {
              inheritsLoose_default()(VsNavbar, _VsComponent);
              function VsNavbar() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "fixed", VsNavbar_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "shadow", VsNavbar_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "shadowScroll", VsNavbar_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "hideScroll", VsNavbar_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "textWhite", VsNavbar_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsNavbar_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "paddingScroll", VsNavbar_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notLine", VsNavbar_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "leftCollapsed", VsNavbar_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "centerCollapsed", VsNavbar_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "rightCollapsed", VsNavbar_descriptor11, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "targetScroll", VsNavbar_descriptor12, assertThisInitialized_default()(_this));
                _this.leftLine = 0;
                _this.widthLine = 0;
                _this.scrollTop = 0;
                _this.collapsedWidth = 0;
                _this.hidden = false;
                _this.shadowActive = false;
                _this.paddingScrollActive = false;
                _this.lineNotTransition = false;
                _this.collapsedForced = false;
                return _this;
              }
              var _proto = VsNavbar.prototype;
              _proto.handleShadowScroll = function handleShadowScroll() {
                this.handleScroll();
              };
              _proto.setModel = function setModel(id) {
                this.$emit("input", id);
              };
              _proto.setLeftLine = function setLeftLine(left, transition) {
                var _this2 = this;
                if (transition === void 0) {
                  transition = true;
                }
                if (!transition) {
                  this.lineNotTransition = true;
                } else {
                  this.lineNotTransition = false;
                }
                this.$nextTick(function() {
                  _this2.leftLine = left;
                });
              };
              _proto.setWidthLine = function setWidthLine(width) {
                var _this3 = this;
                this.$nextTick(function() {
                  _this3.widthLine = width;
                });
              };
              _proto.scroll = function scroll(evt) {
                var scrollTop = this.targetScroll ? document.querySelector(this.targetScroll).scrollTop : window.pageYOffset;
                if (this.hideScroll) {
                  if (Math.sign(scrollTop - this.scrollTop) === 1) {
                    this.hidden = true;
                  } else {
                    this.hidden = false;
                  }
                }
                if (this.shadowScroll) {
                  if (scrollTop > 0) {
                    this.shadowActive = true;
                  } else {
                    this.shadowActive = false;
                  }
                }
                if (this.paddingScroll) {
                  if (scrollTop > 0) {
                    this.paddingScrollActive = true;
                  } else {
                    this.paddingScrollActive = false;
                  }
                }
                this.scrollTop = scrollTop;
              };
              _proto.handleScroll = function handleScroll() {
                if (this.hideScroll || this.shadowScroll || this.paddingScroll) {
                  if (this.targetScroll) {
                    var scrollElement = document.querySelector(this.targetScroll);
                    scrollElement.addEventListener("scroll", this.scroll);
                  } else {
                    window.addEventListener("scroll", this.scroll);
                  }
                }
              };
              _proto.handleResize = function handleResize() {
                var active = this.$el.querySelector(".vs-navbar__item.active");
                if (active) {
                  this.setLeftLine(active.offsetLeft, false);
                } else {
                  this.widthLine = 0;
                }
                var navbar = this.$el;
                if (this.leftCollapsed || this.centerCollapsed || this.rightCollapsed) {
                  if (navbar.offsetWidth < this.collapsedWidth) {
                    this.collapsedForced = true;
                  }
                }
                if (this.collapsedForced) {
                  this.$emit("collapsed", true);
                } else {
                  this.$emit("collapsed", false);
                }
                if (navbar.offsetWidth < this.collapsedWidth) {
                  this.$emit("collapsed", true);
                } else {
                  this.$emit("collapsed", false);
                  this.collapsedForced = false;
                }
              };
              _proto.mounted = function mounted() {
                var _this4 = this;
                setTimeout(function() {
                  var left = _this4.$refs.left;
                  var center = _this4.$refs.center;
                  var right = _this4.$refs.right;
                  _this4.collapsedWidth = left.offsetWidth + center.offsetWidth + right.offsetWidth + 150;
                  var navbar = _this4.$el;
                  if (navbar.offsetWidth < _this4.collapsedWidth) {
                    _this4.collapsedForced = true;
                    _this4.$emit("collapsed", true);
                    _this4.widthLine = 0;
                    _this4.handleResize();
                  }
                }, 150);
                this.handleScroll();
                window.addEventListener("resize", this.handleResize);
              };
              _proto.render = function render(h) {
                var _style, _ref, _ref2, _ref3, _ref4, _ref5, _ref6;
                var left = h("div", {
                  staticClass: "vs-navbar__left",
                  ref: "left"
                }, [this.$slots.left]);
                var center = h("div", {
                  staticClass: "vs-navbar__center",
                  ref: "center"
                }, [this.$slots.default]);
                var right = h("div", {
                  staticClass: "vs-navbar__right",
                  ref: "right"
                }, [this.$slots.right]);
                var line = h("div", {
                  staticClass: "vs-navbar__line",
                  class: {
                    notTransition: this.lineNotTransition
                  },
                  style: {
                    left: this.leftLine + "px",
                    width: this.widthLine + "px"
                  }
                });
                var navbar = h("div", {
                  staticClass: "vs-navbar"
                }, [(this.leftCollapsed ? !this.collapsedForced : true) && left, (this.centerCollapsed ? !this.collapsedForced : true) && center, (this.rightCollapsed ? !this.collapsedForced : true) && right]);
                return h("div", {
                  staticClass: "vs-navbar-content",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    fixed: this.fixed,
                    shadow: this.shadow,
                    hidden: this.hidden,
                    shadowActive: this.shadowActive,
                    textWhite: this.textWhite,
                    paddingScroll: this.paddingScroll,
                    paddingScrollActive: this.paddingScrollActive,
                    vsNavbarSquare: this.square
                  }, (_ref = {}, _ref["vs-component--primary"] = !!this.primary, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5), (_ref6 = {}, _ref6["vs-component--is-color"] = !!this.isColor, _ref6)]
                }, [navbar, !this.notLine && line]);
              };
              return VsNavbar;
            }(component_VsComponent), VsNavbar_temp), VsNavbar_descriptor = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "fixed", [VsNavbar_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor2 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "shadow", [VsNavbar_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor3 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "shadowScroll", [VsNavbar_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor4 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "hideScroll", [VsNavbar_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor5 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "textWhite", [VsNavbar_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor6 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "square", [VsNavbar_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor7 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "paddingScroll", [VsNavbar_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor8 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "notLine", [VsNavbar_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor9 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "leftCollapsed", [VsNavbar_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor10 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "centerCollapsed", [VsNavbar_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor11 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "rightCollapsed", [VsNavbar_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbar_descriptor12 = applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "targetScroll", [VsNavbar_dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsNavbar_class2.prototype, "handleShadowScroll", [VsNavbar_dec13, VsNavbar_dec14, VsNavbar_dec15], Object.getOwnPropertyDescriptor(VsNavbar_class2.prototype, "handleShadowScroll"), VsNavbar_class2.prototype), VsNavbar_class2)) || VsNavbar_class);
            VsNavbar_VsNavbar.install = function(vue) {
              vue.component("vs-navbar", VsNavbar_VsNavbar);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsNavbar_VsNavbar.install(window.Vue);
            }
            var vsNavbar_Base = VsNavbar_VsNavbar;
            var Item_style = __webpack_require__(33);
            var VsNavbarItem_dec, VsNavbarItem_dec2, VsNavbarItem_dec3, VsNavbarItem_dec4, VsNavbarItem_dec5, VsNavbarItem_dec6, VsNavbarItem_class, VsNavbarItem_class2, VsNavbarItem_descriptor, VsNavbarItem_descriptor2, VsNavbarItem_descriptor3, VsNavbarItem_descriptor4, VsNavbarItem_descriptor5, VsNavbarItem_temp;
            var VsNavbarItem_VsNavbarItem = (VsNavbarItem_dec = Prop({
              default: false,
              type: Boolean
            }), VsNavbarItem_dec2 = Prop({}), VsNavbarItem_dec3 = Prop({}), VsNavbarItem_dec4 = Prop({}), VsNavbarItem_dec5 = Prop({
              default: "_blank"
            }), VsNavbarItem_dec6 = Watch("active"), vue_class_component_esm(VsNavbarItem_class = (VsNavbarItem_class2 = (VsNavbarItem_temp = function(_VsComponent) {
              inheritsLoose_default()(VsNavbarItem, _VsComponent);
              function VsNavbarItem() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "active", VsNavbarItem_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "to", VsNavbarItem_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "id", VsNavbarItem_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "href", VsNavbarItem_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "target", VsNavbarItem_descriptor5, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsNavbarItem.prototype;
              _proto.handleWatchActive = function handleWatchActive() {
                this.handleLine();
              };
              _proto.handleLine = function handleLine() {
                var _this2 = this;
                this.$nextTick(function() {
                  if (_this2.active) {
                    var parent = _this2.$parent;
                    var left = _this2.$el.offsetLeft;
                    parent.setLeftLine(left);
                    var width = _this2.$el.scrollWidth;
                    parent.setWidthLine(width);
                  }
                });
              };
              _proto.handleClick = function handleClick() {
                if (this.to) {
                  this.$router.push(this.to);
                } else if (this.href) {
                  window.open(this.href, this.target);
                }
              };
              _proto.handleActive = function handleActive() {
                var parent = this.$parent;
                parent.setModel(this.id);
                this.handleLine();
              };
              _proto.mounted = function mounted() {
                var _this3 = this;
                setTimeout(function() {
                  if (_this3.active) {
                    var el = _this3.$el;
                    var parent = _this3.$parent;
                    var left = el.offsetLeft;
                    parent.setLeftLine(left);
                    var width = el.scrollWidth;
                    parent.setWidthLine(width);
                  }
                }, 150);
              };
              _proto.render = function render(h) {
                var _this4 = this;
                return h("button", {
                  staticClass: "vs-navbar__item",
                  class: {
                    active: this.active
                  },
                  on: {
                    click: function click(evt) {
                      _this4.$emit("click", evt);
                      _this4.handleLine();
                      _this4.handleClick();
                      _this4.handleActive();
                    }
                  }
                }, this.$slots.default);
              };
              return VsNavbarItem;
            }(component_VsComponent), VsNavbarItem_temp), VsNavbarItem_descriptor = applyDecoratedDescriptor_default()(VsNavbarItem_class2.prototype, "active", [VsNavbarItem_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbarItem_descriptor2 = applyDecoratedDescriptor_default()(VsNavbarItem_class2.prototype, "to", [VsNavbarItem_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbarItem_descriptor3 = applyDecoratedDescriptor_default()(VsNavbarItem_class2.prototype, "id", [VsNavbarItem_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbarItem_descriptor4 = applyDecoratedDescriptor_default()(VsNavbarItem_class2.prototype, "href", [VsNavbarItem_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsNavbarItem_descriptor5 = applyDecoratedDescriptor_default()(VsNavbarItem_class2.prototype, "target", [VsNavbarItem_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsNavbarItem_class2.prototype, "handleWatchActive", [VsNavbarItem_dec6], Object.getOwnPropertyDescriptor(VsNavbarItem_class2.prototype, "handleWatchActive"), VsNavbarItem_class2.prototype), VsNavbarItem_class2)) || VsNavbarItem_class);
            VsNavbarItem_VsNavbarItem.install = function(vue) {
              vue.component("vs-navbar-item", VsNavbarItem_VsNavbarItem);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsNavbarItem_VsNavbarItem.install(window.Vue);
            }
            var Item = VsNavbarItem_VsNavbarItem;
            var vsNavbar_Group_style = __webpack_require__(34);
            var VsNavbarGroup_class;
            var VsNavbarGroup_VsNavbarGroup = vue_class_component_esm(VsNavbarGroup_class = function(_VsComponent) {
              inheritsLoose_default()(VsNavbarGroup, _VsComponent);
              function VsNavbarGroup() {
                return _VsComponent.apply(this, arguments) || this;
              }
              var _proto = VsNavbarGroup.prototype;
              _proto.setModel = function setModel(id) {
                var parent = this.$parent;
                parent.setModel(id);
              };
              _proto.setLeftLine = function setLeftLine() {
                var parent = this.$parent;
                var left = this.$el.offsetLeft;
                parent.setLeftLine(left);
                var width = this.$refs.item.scrollWidth;
                parent.setWidthLine(width);
              };
              _proto.setWidthLine = function setWidthLine() {
              };
              _proto.render = function render(h) {
                var item = h("button", {
                  staticClass: "vs-navbar__group__item",
                  ref: "item"
                }, [this.$slots.default]);
                var items = h("div", {
                  staticClass: "vs-navbar__group__items"
                }, [this.$slots.items]);
                return h("div", {
                  staticClass: "vs-navbar__group"
                }, [item, items]);
              };
              return VsNavbarGroup;
            }(component_VsComponent)) || VsNavbarGroup_class;
            VsNavbarGroup_VsNavbarGroup.install = function(vue) {
              vue.component("vs-navbar-group", VsNavbarGroup_VsNavbarGroup);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsNavbarGroup_VsNavbarGroup.install(window.Vue);
            }
            var vsNavbar_Group = VsNavbarGroup_VsNavbarGroup;
            var vsSidebar_Base_style = __webpack_require__(35);
            var VsSidebar_dec, VsSidebar_dec2, VsSidebar_dec3, VsSidebar_dec4, VsSidebar_dec5, VsSidebar_dec6, VsSidebar_dec7, VsSidebar_dec8, VsSidebar_dec9, VsSidebar_dec10, VsSidebar_dec11, VsSidebar_dec12, VsSidebar_dec13, VsSidebar_dec14, VsSidebar_dec15, VsSidebar_dec16, VsSidebar_class, VsSidebar_class2, VsSidebar_descriptor, VsSidebar_descriptor2, VsSidebar_descriptor3, VsSidebar_descriptor4, VsSidebar_descriptor5, VsSidebar_descriptor6, VsSidebar_descriptor7, VsSidebar_descriptor8, VsSidebar_descriptor9, VsSidebar_descriptor10, VsSidebar_descriptor11, VsSidebar_descriptor12, VsSidebar_temp;
            var VsSidebar_VsSidebar = (VsSidebar_dec = Prop({}), VsSidebar_dec2 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec3 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec4 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec5 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec6 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec7 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec8 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec9 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec10 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec11 = Prop({
              default: false,
              type: Boolean
            }), VsSidebar_dec12 = Prop({
              default: "background",
              type: String
            }), VsSidebar_dec13 = Watch("open"), VsSidebar_dec14 = Watch("reduce"), VsSidebar_dec15 = Watch("reduceInternal"), VsSidebar_dec16 = Watch("background"), vue_class_component_esm(VsSidebar_class = (VsSidebar_class2 = (VsSidebar_temp = function(_VsComponent) {
              inheritsLoose_default()(VsSidebar, _VsComponent);
              function VsSidebar() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "value", VsSidebar_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "reduce", VsSidebar_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "hoverExpand", VsSidebar_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "open", VsSidebar_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notLineActive", VsSidebar_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "square", VsSidebar_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "textWhite", VsSidebar_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "notShadow", VsSidebar_descriptor8, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "relative", VsSidebar_descriptor9, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "absolute", VsSidebar_descriptor10, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "right", VsSidebar_descriptor11, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "background", VsSidebar_descriptor12, assertThisInitialized_default()(_this));
                _this.staticWidth = 260;
                _this.forceExpand = false;
                _this.reduceInternal = false;
                return _this;
              }
              var _proto = VsSidebar.prototype;
              _proto.handleOpen = function handleOpen(val) {
                var _this2 = this;
                if (val) {
                  setTimeout(function() {
                    window.addEventListener("click", _this2.clickCloseSidebar);
                  }, 200);
                } else {
                  window.removeEventListener("click", this.clickCloseSidebar);
                }
              };
              _proto.handleReduce = function handleReduce(val) {
                this.reduceInternal = val;
                var el = this.$el;
                if (val) {
                  el.style.width = "50px";
                } else {
                  el.style.width = this.staticWidth + "px";
                }
              };
              _proto.handleReduceInternal = function handleReduceInternal(val) {
                var el = this.$el;
                if (val) {
                  el.style.width = "50px";
                } else {
                  el.style.width = this.staticWidth + "px";
                }
              };
              _proto.handleBackground = function handleBackground() {
                util_setColor("background", this.background, this.$el, true);
              };
              _proto.clickCloseSidebar = function clickCloseSidebar(evt) {
                if (!evt.target.closest(".vs-sidebar-content")) {
                  this.$emit("update:open", false);
                }
              };
              _proto.handleClickItem = function handleClickItem(id) {
                this.$emit("input", id);
              };
              _proto.mounted = function mounted() {
                this.staticWidth = this.$el.offsetWidth;
                this.reduceInternal = this.reduce;
                if (this.background !== "background") {
                  util_setColor("background", this.background, this.$el, true);
                }
                if (this.textWhite) {
                  util_setColor("text", "#fff", this.$el, true);
                }
              };
              _proto.render = function render(h) {
                var _style, _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _this3 = this;
                var logo = h("div", {
                  staticClass: "vs-sidebar__logo"
                }, [this.$slots.logo]);
                var header = h("div", {
                  staticClass: "vs-sidebar__header"
                }, [this.$slots.header]);
                var footer = h("div", {
                  staticClass: "vs-sidebar__footer"
                }, [this.$slots.footer]);
                var sidebar = h("div", {
                  staticClass: "vs-sidebar"
                }, [this.$slots.default]);
                return h("div", {
                  staticClass: "vs-sidebar-content",
                  style: (_style = {}, _style["--vs-color"] = this.color ? this.getColor : "", _style),
                  class: [{
                    reduce: this.reduceInternal,
                    open: this.open,
                    notLineActive: this.notLineActive,
                    square: this.square,
                    notShadow: this.notShadow,
                    textWhite: this.textWhite,
                    relative: this.relative,
                    absolute: this.absolute,
                    right: this.right
                  }, (_ref = {}, _ref["vs-component--primary"] = !!this.primary, _ref), (_ref2 = {}, _ref2["vs-component--danger"] = !!this.danger, _ref2), (_ref3 = {}, _ref3["vs-component--warn"] = !!this.warn, _ref3), (_ref4 = {}, _ref4["vs-component--success"] = !!this.success, _ref4), (_ref5 = {}, _ref5["vs-component--dark"] = !!this.dark, _ref5), (_ref6 = {}, _ref6["vs-component--is-color"] = !!this.isColor, _ref6)],
                  on: {
                    mouseenter: function mouseenter() {
                      if (_this3.hoverExpand) {
                        _this3.reduceInternal = false;
                      }
                    },
                    mouseleave: function mouseleave() {
                      if (_this3.hoverExpand) {
                        _this3.reduceInternal = true;
                      }
                    }
                  }
                }, [this.$slots.logo && logo, this.$slots.header && header, sidebar, this.$slots.footer && footer]);
              };
              createClass_default()(VsSidebar, [{
                key: "getValue",
                get: function get() {
                  return this.value;
                }
              }]);
              return VsSidebar;
            }(component_VsComponent), VsSidebar_temp), VsSidebar_descriptor = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "value", [VsSidebar_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor2 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "reduce", [VsSidebar_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor3 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "hoverExpand", [VsSidebar_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor4 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "open", [VsSidebar_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor5 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "notLineActive", [VsSidebar_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor6 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "square", [VsSidebar_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor7 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "textWhite", [VsSidebar_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor8 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "notShadow", [VsSidebar_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor9 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "relative", [VsSidebar_dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor10 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "absolute", [VsSidebar_dec10], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor11 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "right", [VsSidebar_dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebar_descriptor12 = applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "background", [VsSidebar_dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "handleOpen", [VsSidebar_dec13], Object.getOwnPropertyDescriptor(VsSidebar_class2.prototype, "handleOpen"), VsSidebar_class2.prototype), applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "handleReduce", [VsSidebar_dec14], Object.getOwnPropertyDescriptor(VsSidebar_class2.prototype, "handleReduce"), VsSidebar_class2.prototype), applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "handleReduceInternal", [VsSidebar_dec15], Object.getOwnPropertyDescriptor(VsSidebar_class2.prototype, "handleReduceInternal"), VsSidebar_class2.prototype), applyDecoratedDescriptor_default()(VsSidebar_class2.prototype, "handleBackground", [VsSidebar_dec16], Object.getOwnPropertyDescriptor(VsSidebar_class2.prototype, "handleBackground"), VsSidebar_class2.prototype), VsSidebar_class2)) || VsSidebar_class);
            VsSidebar_VsSidebar.install = function(vue) {
              vue.component("vs-sidebar", VsSidebar_VsSidebar);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsSidebar_VsSidebar.install(window.Vue);
            }
            var vsSidebar_Base = VsSidebar_VsSidebar;
            var vsSidebar_Item_style = __webpack_require__(36);
            var VsSidebarItem_dec, VsSidebarItem_dec2, VsSidebarItem_dec3, VsSidebarItem_dec4, VsSidebarItem_dec5, VsSidebarItem_dec6, VsSidebarItem_dec7, VsSidebarItem_class, VsSidebarItem_class2, VsSidebarItem_descriptor, VsSidebarItem_descriptor2, VsSidebarItem_descriptor3, VsSidebarItem_descriptor4, VsSidebarItem_descriptor5, VsSidebarItem_descriptor6, VsSidebarItem_temp;
            var VsSidebarItem_VsSidebarItem = (VsSidebarItem_dec = Prop({}), VsSidebarItem_dec2 = Prop({}), VsSidebarItem_dec3 = Prop({
              default: "_blank"
            }), VsSidebarItem_dec4 = Prop({
              type: String
            }), VsSidebarItem_dec5 = Prop({
              type: String
            }), VsSidebarItem_dec6 = Prop({
              type: Boolean
            }), VsSidebarItem_dec7 = Watch("$parent.reduce"), vue_class_component_esm(VsSidebarItem_class = (VsSidebarItem_class2 = (VsSidebarItem_temp = function(_VsComponent) {
              inheritsLoose_default()(VsSidebarItem, _VsComponent);
              function VsSidebarItem() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "to", VsSidebarItem_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "href", VsSidebarItem_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "target", VsSidebarItem_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "value", VsSidebarItem_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "id", VsSidebarItem_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "arrow", VsSidebarItem_descriptor6, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsSidebarItem.prototype;
              _proto.handleReduce = function handleReduce(val) {
                if (val) {
                  console.log("reduce");
                }
              };
              _proto.handleClick = function handleClick() {
                if (this.to) {
                  this.$router.push(this.to);
                } else if (this.href) {
                  window.open(this.href, this.target);
                }
              };
              _proto.render = function render(h) {
                var _this2 = this;
                var icon = h("div", {
                  staticClass: "vs-sidebar__item__icon"
                }, [this.$slots.icon]);
                var textTooltip = h("div", {
                  staticClass: "vs-sidebar__item__text-tooltip"
                }, [this.$slots.default]);
                var text = h("div", {
                  staticClass: "vs-sidebar__item__text"
                }, [this.$slots.default]);
                var iconArrow = h(arrow_VsIconClose);
                var arrow = h("div", {
                  staticClass: "vs-sidebar__item__arrow"
                }, [this.$slots.arrow || iconArrow]);
                return h("button", {
                  staticClass: "vs-sidebar__item",
                  class: {
                    active: this.$parent.getValue && this.id == this.$parent.getValue,
                    hasIcon: !!this.$slots.icon
                  },
                  on: {
                    click: function click() {
                      if (_this2.id) {
                        _this2.$parent.handleClickItem(_this2.id);
                      }
                      _this2.handleClick();
                    }
                  }
                }, [this.$slots.icon && icon, text, textTooltip, this.$slots.arrow || this.arrow && arrow]);
              };
              return VsSidebarItem;
            }(component_VsComponent), VsSidebarItem_temp), VsSidebarItem_descriptor = applyDecoratedDescriptor_default()(VsSidebarItem_class2.prototype, "to", [VsSidebarItem_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebarItem_descriptor2 = applyDecoratedDescriptor_default()(VsSidebarItem_class2.prototype, "href", [VsSidebarItem_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebarItem_descriptor3 = applyDecoratedDescriptor_default()(VsSidebarItem_class2.prototype, "target", [VsSidebarItem_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebarItem_descriptor4 = applyDecoratedDescriptor_default()(VsSidebarItem_class2.prototype, "value", [VsSidebarItem_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebarItem_descriptor5 = applyDecoratedDescriptor_default()(VsSidebarItem_class2.prototype, "id", [VsSidebarItem_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsSidebarItem_descriptor6 = applyDecoratedDescriptor_default()(VsSidebarItem_class2.prototype, "arrow", [VsSidebarItem_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(VsSidebarItem_class2.prototype, "handleReduce", [VsSidebarItem_dec7], Object.getOwnPropertyDescriptor(VsSidebarItem_class2.prototype, "handleReduce"), VsSidebarItem_class2.prototype), VsSidebarItem_class2)) || VsSidebarItem_class);
            VsSidebarItem_VsSidebarItem.install = function(vue) {
              vue.component("vs-sidebar-item", VsSidebarItem_VsSidebarItem);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsSidebarItem_VsSidebarItem.install(window.Vue);
            }
            var vsSidebar_Item = VsSidebarItem_VsSidebarItem;
            var vsSidebar_Group_style = __webpack_require__(37);
            var vsSidebarGroup_dec, vsSidebarGroup_dec2, vsSidebarGroup_class, vsSidebarGroup_class2, vsSidebarGroup_descriptor, vsSidebarGroup_temp;
            var vsSidebarGroup_VsSidebarGroup = (vsSidebarGroup_dec = Prop({
              type: Boolean
            }), vsSidebarGroup_dec2 = Watch("open"), vue_class_component_esm(vsSidebarGroup_class = (vsSidebarGroup_class2 = (vsSidebarGroup_temp = function(_VsComponent) {
              inheritsLoose_default()(VsSidebarGroup, _VsComponent);
              function VsSidebarGroup() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                _this.group = true;
                _this.openState = false;
                initializerDefineProperty_default()(_this, "open", vsSidebarGroup_descriptor, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsSidebarGroup.prototype;
              _proto.handleOpen = function handleOpen(val) {
                var _this2 = this;
                this.$nextTick(function() {
                  var h = _this2.$refs.content.scrollHeight;
                  var parent = _this2.$parent;
                  if (parent.group) {
                    if (val) {
                      parent.$refs.content.style.height = parent.$refs.content.scrollHeight + h - 1 + "px";
                    } else {
                      parent.$refs.content.style.height = parent.$refs.content.scrollHeight - h + 1 + "px";
                    }
                  }
                });
              };
              _proto.handleClickItem = function handleClickItem(id) {
                this.$parent.handleClickItem(id);
              };
              _proto.beforeEnter = function beforeEnter(el) {
                el.style.height = 0;
              };
              _proto.enter = function enter(el, done) {
                var h = el.scrollHeight;
                el.style.height = h - 1 + "px";
                done();
              };
              _proto.leave = function leave(el, done) {
                el.style.minHeight = "0px";
                el.style.height = "0px";
              };
              _proto.mounted = function mounted() {
                if (this.$el.querySelector(".active") || this.open) {
                  this.openState = true;
                }
              };
              _proto.render = function render(h) {
                var _this3 = this;
                var header = h("div", {
                  staticClass: "vs-sidebar__group__header",
                  on: {
                    click: function click() {
                      _this3.openState = !_this3.openState;
                    }
                  }
                }, [this.$slots.header]);
                var content = h("div", {
                  staticClass: "vs-sidebar__group__content",
                  ref: "content",
                  directives: [{
                    name: "show",
                    value: this.openState
                  }]
                }, [this.$slots.default]);
                var transition = h("transition", {
                  on: {
                    beforeEnter: this.beforeEnter,
                    enter: this.enter,
                    leave: this.leave
                  }
                }, [content]);
                return h("div", {
                  staticClass: "vs-sidebar__group",
                  class: {
                    open: this.openState
                  }
                }, [header, transition]);
              };
              createClass_default()(VsSidebarGroup, [{
                key: "getValue",
                get: function get() {
                  return this.$parent.getValue;
                }
              }]);
              return VsSidebarGroup;
            }(component_VsComponent), vsSidebarGroup_temp), vsSidebarGroup_descriptor = applyDecoratedDescriptor_default()(vsSidebarGroup_class2.prototype, "open", [vsSidebarGroup_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), applyDecoratedDescriptor_default()(vsSidebarGroup_class2.prototype, "handleOpen", [vsSidebarGroup_dec2], Object.getOwnPropertyDescriptor(vsSidebarGroup_class2.prototype, "handleOpen"), vsSidebarGroup_class2.prototype), vsSidebarGroup_class2)) || vsSidebarGroup_class);
            vsSidebarGroup_VsSidebarGroup.install = function(vue) {
              vue.component("vs-sidebar-group", vsSidebarGroup_VsSidebarGroup);
            };
            if (typeof window !== "undefined" && window.Vue) {
              vsSidebarGroup_VsSidebarGroup.install(window.Vue);
            }
            var vsSidebar_Group = vsSidebarGroup_VsSidebarGroup;
            var vsCard_Base_style = __webpack_require__(38);
            var VsCard_dec, VsCard_class, VsCard_class2, VsCard_descriptor, VsCard_temp;
            function VsCard_ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly)
                  symbols = symbols.filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                keys.push.apply(keys, symbols);
              }
              return keys;
            }
            function VsCard_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                if (i % 2) {
                  VsCard_ownKeys(source, true).forEach(function(key) {
                    defineProperty_default()(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                  VsCard_ownKeys(source).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
              }
              return target;
            }
            var VsCard_VsCard = (VsCard_dec = Prop({
              default: "1",
              type: [String, Boolean]
            }), vue_class_component_esm(VsCard_class = (VsCard_class2 = (VsCard_temp = function(_VsComponent) {
              inheritsLoose_default()(VsCard, _VsComponent);
              function VsCard() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _VsComponent.call.apply(_VsComponent, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "type", VsCard_descriptor, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsCard.prototype;
              _proto.render = function render(h) {
                var title = h("div", {
                  staticClass: "vs-card__title"
                }, [this.$slots.title]);
                var text = h("div", {
                  staticClass: "vs-card__text"
                }, [this.$slots.title && title, this.$slots.text]);
                var buttons = h("div", {
                  staticClass: "vs-card__buttons"
                }, [this.$slots.buttons]);
                var interactions = h("div", {
                  staticClass: "vs-card__interactions"
                }, [this.$slots.interactions]);
                var img = h("div", {
                  staticClass: "vs-card__img"
                }, [this.$slots.img, this.$slots.interactions && interactions]);
                var card = h("div", {
                  staticClass: "vs-card",
                  on: VsCard_objectSpread({}, this.$listeners)
                }, [
                  this.$slots.img && img,
                  // this.type != 2 ? this.$slots.title : false && title,
                  this.$slots.text && text,
                  this.$slots.buttons && buttons
                ]);
                return h("div", {
                  staticClass: "vs-card-content",
                  class: ["type-" + this.type]
                }, [card]);
              };
              return VsCard;
            }(component_VsComponent), VsCard_temp), VsCard_descriptor = applyDecoratedDescriptor_default()(VsCard_class2.prototype, "type", [VsCard_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCard_class2)) || VsCard_class);
            VsCard_VsCard.install = function(vue) {
              vue.component("vs-card", VsCard_VsCard);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsCard_VsCard.install(window.Vue);
            }
            var vsCard_Base = VsCard_VsCard;
            var vsCard_Group_style = __webpack_require__(39);
            var VsCardGroup_class;
            var VsCardGroup_VsCardGroup = vue_class_component_esm(VsCardGroup_class = function(_VsComponent) {
              inheritsLoose_default()(VsCardGroup, _VsComponent);
              function VsCardGroup() {
                return _VsComponent.apply(this, arguments) || this;
              }
              var _proto = VsCardGroup.prototype;
              _proto.render = function render(h) {
                var _this = this;
                var arrowPrev = h("button", {
                  staticClass: "vs-card__group-prev",
                  on: {
                    click: function click(evt) {
                      console.log("paso");
                      var cards2 = _this.$refs.cards;
                      console.dir(cards2);
                      cards2.scrollTo(cards2.scrollLeft - cards2.clientWidth, 0);
                    }
                  }
                }, [h(arrow_VsIconClose)]);
                var arrowNext = h("button", {
                  staticClass: "vs-card__group-next",
                  on: {
                    click: function click(evt) {
                      console.log("paso");
                      var cards2 = _this.$refs.cards;
                      console.dir(cards2);
                      cards2.scrollTo(cards2.scrollLeft + cards2.clientWidth, 0);
                    }
                  }
                }, [h(arrow_VsIconClose)]);
                var space = h("div", {
                  staticClass: "vs-card__group-space"
                });
                var cards = h("div", {
                  staticClass: "vs-card__group-cards",
                  ref: "cards"
                }, [this.$slots.default, space]);
                return h("div", {
                  staticClass: "vs-card__group"
                }, [arrowPrev, cards, arrowNext]);
              };
              return VsCardGroup;
            }(component_VsComponent)) || VsCardGroup_class;
            VsCardGroup_VsCardGroup.install = function(vue) {
              vue.component("vs-card-group", VsCardGroup_VsCardGroup);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsCardGroup_VsCardGroup.install(window.Vue);
            }
            var vsCard_Group = VsCardGroup_VsCardGroup;
            var setTheme = function setTheme2(forceTheme) {
              document.body.classList.add("vs-remove-transition");
              var media = window.matchMedia("(prefers-color-scheme: dark)");
              var isThemeDark = media.matches;
              if (localStorage.vsTheme) {
                isThemeDark = localStorage.vsTheme == "dark";
              }
              if (isThemeDark) {
                document.body.setAttribute("vs-theme", "dark");
              } else {
                document.body.removeAttribute("vs-theme");
              }
              if (forceTheme == "dark") {
                document.body.setAttribute("vs-theme", "dark");
              } else if (forceTheme == "light") {
                document.body.removeAttribute("vs-theme");
              }
              localStorage.vsTheme = isThemeDark ? "dark" : "light";
              setTimeout(function() {
                document.body.classList.remove("vs-remove-transition");
              }, 100);
              return isThemeDark ? "dark" : "light";
            };
            var toggleTheme = function toggleTheme2(forceTheme) {
              document.body.classList.add("vs-remove-transition");
              var media = window.matchMedia("(prefers-color-scheme: dark)");
              var isThemeDark = media.matches;
              if (localStorage.vsTheme) {
                isThemeDark = localStorage.vsTheme == "dark";
              }
              if (!isThemeDark) {
                document.body.setAttribute("vs-theme", "dark");
              } else {
                document.body.removeAttribute("vs-theme");
              }
              if (forceTheme == "dark") {
                document.body.removeAttribute("vs-theme");
              } else if (forceTheme == "light") {
                document.body.setAttribute("vs-theme", "dark");
              }
              localStorage.vsTheme = !isThemeDark ? "dark" : "light";
              setTimeout(function() {
                document.body.classList.remove("vs-remove-transition");
              }, 100);
              return !isThemeDark ? "dark" : "light";
            };
            var vsLoading_Base_style = __webpack_require__(40);
            var VsLoading_dec, VsLoading_class, VsLoading_class2, VsLoading_temp;
            var VsLoading_VsLoading = (VsLoading_dec = Watch("isVisible"), vue_class_component_esm(VsLoading_class = (VsLoading_class2 = (VsLoading_temp = function(_Vue) {
              inheritsLoose_default()(VsLoading, _Vue);
              function VsLoading() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                _this.text = null;
                _this.type = "default";
                _this.color = null;
                _this.background = null;
                _this.opacity = null;
                _this.percent = null;
                _this.progress = null;
                _this.scale = null;
                _this.target = null;
                _this.isVisible = false;
                return _this;
              }
              var _proto = VsLoading.prototype;
              _proto.handleIsVisible = function handleIsVisible() {
                var _this2 = this;
                this.$nextTick(function() {
                  util_setColor("color", _this2.color, _this2.$el);
                  util_setColor("background", _this2.background, _this2.$el);
                  if (_this2.opacity) {
                    setVar("opacity", _this2.opacity, _this2.$el);
                  }
                });
              };
              _proto.render = function render(h) {
                var animation = h("div", {
                  class: ["vs-loading__load__animation"]
                }, [h("div", {
                  staticClass: "vs-loading__load__percent"
                }, [this.percent]), h("div", {
                  staticClass: "vs-loading__load__animation__1"
                }), h("div", {
                  staticClass: "vs-loading__load__animation__2"
                }), h("div", {
                  staticClass: "vs-loading__load__animation__3"
                })]);
                var text = h("div", {
                  class: ["vs-loading__load__text"]
                }, this.text);
                var loading = h("div", {
                  class: ["vs-loading__load"],
                  style: {
                    transform: "scale(" + this.scale + ")"
                  }
                }, [animation, text]);
                var progress = h("div", {
                  class: ["vs-loading__progress"]
                }, [h("div", {
                  staticClass: "vs-loading__progress__bar",
                  style: {
                    width: this.progress + "%"
                  }
                })]);
                return h("transition", {
                  props: {
                    name: "loading"
                  }
                }, [this.isVisible && h("div", {
                  staticClass: "vs-loading",
                  class: ["vs-loading--" + (this.type || "default"), {
                    "vs-loading--target": !!this.target
                  }, {
                    "vs-loading--background": !!this.background
                  }]
                }, [loading, this.progress && progress])]);
              };
              return VsLoading;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), VsLoading_temp), applyDecoratedDescriptor_default()(VsLoading_class2.prototype, "handleIsVisible", [VsLoading_dec], Object.getOwnPropertyDescriptor(VsLoading_class2.prototype, "handleIsVisible"), VsLoading_class2.prototype), VsLoading_class2)) || VsLoading_class);
            var loadingConstructor = external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a.extend(VsLoading_VsLoading);
            loadingConstructor.prototype.close = function() {
              var _this = this;
              this.isVisible = false;
              document.body.style.overflowY = "auto";
              setTimeout(function() {
                _this.$destroy();
                _this.$el.parentNode.removeChild(_this.$el);
              }, 250);
            };
            loadingConstructor.prototype.changePercent = function(val) {
              if (val) {
                this.percent = val;
              }
            };
            loadingConstructor.prototype.changeProgress = function(val) {
              if (val) {
                this.progress = val;
              }
            };
            loadingConstructor.prototype.changeText = function(val) {
              if (val) {
                this.text = val;
              }
            };
            var Base_loading = function loading(params) {
              if (params === void 0) {
                params = {};
              }
              var instance = new loadingConstructor();
              if (typeof params.target === "string") {
                params.target = document.querySelector(params.target);
                instance.$data.target = params.target;
              } else if (params.target) {
                params.target = params.target.$el || params.target;
                instance.$data.target = params.target;
              } else {
                params.target = document.body;
              }
              instance.$data.text = params.text;
              instance.$data.color = params.color;
              instance.$data.background = params.background;
              instance.$data.opacity = params.opacity;
              instance.$data.percent = params.percent;
              instance.$data.type = params.type;
              instance.$data.progress = params.progress;
              instance.$data.scale = params.scale;
              params.target.appendChild(instance.$mount().$el);
              document.body.style.overflowY = params.hidden && "hidden";
              external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a.nextTick(function() {
                instance.$data.isVisible = true;
              });
              return instance;
            };
            var vsLoading_Base = Base_loading;
            var vsNotification_Base_style = __webpack_require__(41);
            var VsNotification_dec, VsNotification_class, VsNotification_class2, VsNotification_temp;
            var VsNotification_VsNotification = (VsNotification_dec = Watch("isVisible"), vue_class_component_esm(VsNotification_class = (VsNotification_class2 = (VsNotification_temp = function(_Vue) {
              inheritsLoose_default()(VsNotification, _Vue);
              function VsNotification() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                _this.isVisible = false;
                _this.content = null;
                _this.title = null;
                _this.text = null;
                _this.color = null;
                _this.colorName = null;
                _this.border = null;
                _this.icon = null;
                _this.onClick = null;
                _this.buttonClose = true;
                _this.flat = true;
                _this.onDestroy = null;
                _this.sticky = false;
                _this.square = false;
                _this.width = null;
                _this.loading = false;
                _this.progressAuto = false;
                _this.progress = 0;
                _this.duration = 4e3;
                _this.countProgress = 0;
                _this.intervalProgress = null;
                _this.notPadding = null;
                _this.clickClose = false;
                _this.classNotification = null;
                return _this;
              }
              var _proto = VsNotification.prototype;
              _proto.close = function close() {
                this.isVisible = false;
              };
              _proto.handleClickClose = function handleClickClose() {
                this.isVisible = false;
              };
              _proto.beforeEnter = function beforeEnter(el) {
                el.style.maxHeight = "0px";
                el.style.padding = "0px 20px";
              };
              _proto.enter = function enter(el, done) {
                var h = el.scrollHeight;
                el.style.maxHeight = h + 40 + "px";
                if (window.innerWidth < 600) {
                  el.style.padding = "15px";
                } else {
                  el.style.padding = "20px";
                }
                done();
              };
              _proto.leave = function leave(el, done) {
                var _this2 = this;
                var parent = this.$el.parentNode;
                setTimeout(function() {
                  done();
                  if (parent.childNodes.length == 1) {
                    document.body.removeChild(parent);
                  }
                  parent.removeChild(_this2.$el);
                  _this2.$destroy();
                  if (_this2.onDestroy) {
                    _this2.onDestroy();
                  }
                }, 250);
              };
              _proto.handleIsVisible = function handleIsVisible() {
                var _this3 = this;
                this.$nextTick(function() {
                  util_setColor("color", _this3.color, _this3.$el);
                  util_setColor("border", _this3.border, _this3.$el);
                });
              };
              _proto.mounted = function mounted() {
                var _this4 = this;
                if (this.progressAuto) {
                  this.intervalProgress = setInterval(function() {
                    _this4.progress++;
                  }, this.duration / 100);
                }
              };
              _proto.beforeDestroy = function beforeDestroy() {
                clearInterval(this.intervalProgress);
              };
              _proto.render = function render(h) {
                var _this5 = this;
                var title = h("header", {
                  staticClass: "vs-notification__content__header"
                }, [h("h4", {
                  domProps: {
                    innerHTML: this.title
                  }
                })]);
                var text = h("div", {
                  staticClass: "vs-notification__content__text"
                }, [h("p", {
                  domProps: {
                    innerHTML: this.text
                  }
                })]);
                var content = h("div", {
                  staticClass: "vs-notification__content"
                }, [this.title && title, this.text && text, this.content && h(this.content)]);
                var icon = h("div", {
                  staticClass: "vs-notification__icon",
                  domProps: {
                    innerHTML: this.icon
                  }
                });
                var closeBtn = h("button", {
                  staticClass: "vs-notification__close",
                  on: {
                    click: this.handleClickClose
                  }
                }, [h(close_VsIconClose, {
                  props: {
                    hover: "less"
                  }
                })]);
                var loading = h("div", {
                  staticClass: "vs-notification__loading"
                });
                var progress = h("div", {
                  staticClass: "vs-notification__progress",
                  style: {
                    width: this.progress + "%"
                  }
                });
                return h("transition", {
                  props: {
                    name: "notification"
                  },
                  on: {
                    beforeEnter: this.beforeEnter,
                    enter: this.enter,
                    leave: this.leave
                  }
                }, [this.isVisible && h("div", {
                  staticClass: "vs-notification",
                  class: [{
                    "vs-notification--color": this.color
                  }, {
                    "vs-notification--border": this.border
                  }, {
                    "vs-notification--icon": this.icon
                  }, {
                    "vs-notification--onClick": this.onClick
                  }, {
                    "vs-notification--flat": this.flat
                  }, {
                    "vs-notification--sticky": this.sticky
                  }, {
                    "vs-notification--square": this.square
                  }, {
                    "vs-notification--width-all": this.width == "100%"
                  }, {
                    "vs-notification--width-auto": this.width == "auto"
                  }, {
                    "vs-notification--loading": this.loading
                  }, {
                    "vs-notification--notPadding": this.notPadding
                  }, "vs-notification--" + this.colorName, this.classNotification],
                  on: {
                    click: function click() {
                      if (_this5.onClick) {
                        _this5.onClick();
                      }
                      if (_this5.clickClose) {
                        _this5.close();
                      }
                    }
                  }
                }, [!this.loading && this.icon && icon, !this.loading && content, this.buttonClose && closeBtn, this.loading && loading, progress])]);
              };
              createClass_default()(VsNotification, [{
                key: "getProgress",
                get: function get() {
                  var _this6 = this;
                  setInterval(function() {
                    _this6.progress++;
                  }, 1);
                  return 20;
                }
              }]);
              return VsNotification;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), VsNotification_temp), applyDecoratedDescriptor_default()(VsNotification_class2.prototype, "handleIsVisible", [VsNotification_dec], Object.getOwnPropertyDescriptor(VsNotification_class2.prototype, "handleIsVisible"), VsNotification_class2.prototype), VsNotification_class2)) || VsNotification_class);
            var notificationConstructor = external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a.extend(VsNotification_VsNotification);
            notificationConstructor.prototype.close = function() {
              this.isVisible = false;
            };
            notificationConstructor.prototype.setLoading = function(val) {
              this.loading = val;
            };
            notificationConstructor.prototype.changeProgress = function(val) {
              if (val) {
                this.progress = val;
              }
            };
            notificationConstructor.prototype.toggleClass = function(val) {
              if (val) {
                this.classNotification = val;
                this.$el.closest(".vs-notification-parent").classList.toggle(val);
              }
            };
            var Base_notification = function notification(params) {
              if (params === void 0) {
                params = {};
              }
              var instance = new notificationConstructor();
              instance.$data.title = params.title;
              instance.$data.text = params.text;
              instance.$data.color = params.color;
              instance.$data.colorName = params.color;
              instance.$data.border = params.border;
              instance.$data.icon = params.icon;
              instance.$data.onClick = params.onClick;
              instance.$data.flat = params.flat;
              instance.$data.onDestroy = params.onDestroy;
              instance.$data.sticky = params.sticky;
              instance.$data.square = params.square;
              instance.$data.width = params.width;
              instance.$data.loading = params.loading;
              instance.$data.notPadding = params.notPadding;
              instance.$data.clickClose = params.clickClose;
              instance.$data.classNotification = params.classNotification;
              if (params.duration !== "none") {
                instance.$data.duration = params.duration || 4e3;
              }
              if (params.progress == "auto" && params.duration !== "none") {
                instance.$data.progressAuto = true;
              } else {
                instance.$data.progress = params.progress;
              }
              if (typeof params.buttonClose == "boolean") {
                instance.$data.buttonClose = params.buttonClose;
              }
              if (params.width == "100%" || window.innerWidth < 600) {
                if (params.position === "top-left" || params.position === "top-right") {
                  params.position = "top-center";
                } else if (params.position === "bottom-left" || params.position === "bottom-right" || !params.position) {
                  params.position = "bottom-center";
                }
              }
              if (typeof params.position !== "string") {
                params.position = "bottom-right";
              }
              var parent = document.querySelector(".vs-notification-parent--" + (params.position || "bottom-right")) || document.createElement("div");
              if (!document.querySelector(".vs-notification-parent--" + (params.position || "bottom-right"))) {
                parent.className = "vs-notification-parent";
                parent.classList.add("vs-notification-parent--" + (params.position || "bottom-right"));
              }
              if (params.classNotification) {
                parent.classList.add(params.classNotification);
              }
              parent.appendChild(instance.$mount().$el);
              document.body.appendChild(parent);
              external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a.nextTick(function() {
                instance.$data.isVisible = true;
                instance.$data.content = params.content;
              });
              if (params.duration !== "none") {
                setTimeout(function() {
                  instance.close();
                }, Number(params.duration) || 4e3);
              }
              return instance;
            };
            var vsNotification_Base = Base_notification;
            var getPage = function getPage2(data, page, maxItems) {
              if (maxItems === void 0) {
                maxItems = 5;
              }
              var max = Math.ceil(page * maxItems);
              var min = max - maxItems;
              var items = [];
              data.forEach(function(item, index) {
                if (index >= min && index < max) {
                  items.push(item);
                }
              });
              return items;
            };
            var getLength = function getLength2(data, maxItems) {
              if (maxItems === void 0) {
                maxItems = 5;
              }
              var length = Math.ceil(data.length / maxItems);
              return length;
            };
            var checkAll = function checkAll2(selected, data) {
              if (selected.length !== data.length) {
                selected = [];
                data.forEach(function(item) {
                  selected.push(item);
                });
                return selected;
              } else {
                return [];
              }
            };
            var getSearch = function getSearch2(data, search) {
              if (search === void 0) {
                search = "";
              }
              function flattenDeep(val) {
                return Object.values(val || []).reduce(function(acc, val2) {
                  return typeof val2 === "object" ? acc.concat(flattenDeep(val2)) : acc.concat(val2);
                }, []);
              }
              function getValues(obj) {
                return flattenDeep(obj).filter(function(item) {
                  return typeof item === "string" || typeof item === "number";
                });
              }
              function normalize(text) {
                return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
              }
              var searchNormalize = normalize(search);
              return data.filter(function(item) {
                return normalize(getValues(item).toString()).indexOf(searchNormalize) != -1;
              });
            };
            var sortData = function sortData2(evt, data, sortKey, type) {
              data = [].concat(data).sort(returnOriginalIndex);
              var sortType = type || "desc";
              var el = evt.target;
              if (el.dataset["sortType" + sortKey] == "desc") {
                sortType = "asc";
              } else if (el.dataset["sortType" + sortKey] == "asc") {
                sortType = null;
              }
              if (sortType == "desc") {
                data.map(function(item, i) {
                  item["vsOriginalIndex" + sortKey] = i;
                });
              }
              el.dataset["sortType" + sortKey] = sortType;
              el.dataset["sortType"] = sortType;
              el.dataset["sortKey"] = "sortType" + sortKey;
              var parent = el.closest(".vs-table__tr");
              var ths = parent.querySelectorAll("th.sort");
              ths.forEach(function(th) {
                if (th != el) {
                  th.dataset.sortType = null;
                  th.dataset[th.dataset["sortKey"]] = null;
                }
              });
              function compare(a, b) {
                if (a[sortKey] < b[sortKey]) {
                  return sortType !== "desc" ? 1 : -1;
                }
                if (a[sortKey] > b[sortKey]) {
                  return sortType !== "desc" ? -1 : 1;
                }
                return 0;
              }
              function returnOriginalIndex(a, b) {
                return a["vsOriginalIndex" + sortKey] - b["vsOriginalIndex" + sortKey];
              }
              return sortType !== null ? [].concat(data).sort(compare) : [].concat(data).sort(returnOriginalIndex);
            };
            var defineVuesaxFunctions = function(Vue) {
              var vsFunctions = {
                setColor: function setColor(color, val) {
                  util_setColor(color, val, document.body);
                },
                loading: vsLoading_Base,
                toggleTheme,
                setTheme,
                notification: vsNotification_Base,
                getPage,
                getLength,
                checkAll,
                getSearch,
                sortData
              };
              Vue.prototype.$vs = vsFunctions;
            };
            var grid_style = __webpack_require__(42);
            var VsCol_dec, VsCol_dec2, VsCol_dec3, VsCol_dec4, VsCol_dec5, VsCol_dec6, VsCol_dec7, VsCol_dec8, VsCol_class, VsCol_class2, VsCol_descriptor, VsCol_descriptor2, VsCol_descriptor3, VsCol_descriptor4, VsCol_descriptor5, VsCol_descriptor6, VsCol_descriptor7, VsCol_descriptor8, VsCol_class3, VsCol_temp;
            var VsCol_VsCol = (VsCol_dec = Prop({
              type: [String, Number],
              default: "12"
            }), VsCol_dec2 = Prop({
              type: [String, Number],
              default: "0"
            }), VsCol_dec3 = Prop({
              type: [String, Number],
              default: "0"
            }), VsCol_dec4 = Prop({
              type: [String, Number],
              default: "0"
            }), VsCol_dec5 = Prop({
              type: [String, Number],
              default: "0"
            }), VsCol_dec6 = Prop({
              type: [String, Number],
              default: "0"
            }), VsCol_dec7 = Prop({
              type: String,
              default: "block"
            }), VsCol_dec8 = Prop({
              type: String,
              default: "flex-start"
            }), vue_class_component_esm(VsCol_class = (VsCol_class2 = (VsCol_temp = VsCol_class3 = function(_Vue) {
              inheritsLoose_default()(VsCol, _Vue);
              function VsCol() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "w", VsCol_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "offset", VsCol_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "order", VsCol_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "lg", VsCol_descriptor4, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "sm", VsCol_descriptor5, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "xs", VsCol_descriptor6, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "type", VsCol_descriptor7, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "justify", VsCol_descriptor8, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsCol.prototype;
              _proto.render = function render(h) {
                var vsCol = h("div", {
                  staticClass: "vs-col",
                  style: {
                    order: this.order,
                    display: this.type,
                    justifyContent: this.justify
                  },
                  class: ["vs-col--w-" + this.w, "vs-col--offset-" + this.offset, "vs-col--lg-" + this.lg, "vs-col--sm-" + this.sm, "vs-col--xs-" + this.xs]
                }, this.$slots.default);
                return vsCol;
              };
              return VsCol;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), VsCol_class3.install = void 0, VsCol_class3.use = void 0, VsCol_temp), VsCol_descriptor = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "w", [VsCol_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_descriptor2 = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "offset", [VsCol_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_descriptor3 = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "order", [VsCol_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_descriptor4 = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "lg", [VsCol_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_descriptor5 = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "sm", [VsCol_dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_descriptor6 = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "xs", [VsCol_dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_descriptor7 = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "type", [VsCol_dec7], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_descriptor8 = applyDecoratedDescriptor_default()(VsCol_class2.prototype, "justify", [VsCol_dec8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsCol_class2)) || VsCol_class);
            var VsRow_dec, VsRow_dec2, VsRow_dec3, VsRow_dec4, VsRow_class, VsRow_class2, VsRow_descriptor, VsRow_descriptor2, VsRow_descriptor3, VsRow_descriptor4, VsRow_class3, VsRow_temp;
            var VsRow_VsRow = (VsRow_dec = Prop({
              type: Number,
              default: 12
            }), VsRow_dec2 = Prop({
              type: String,
              default: "flex-start"
            }), VsRow_dec3 = Prop({
              type: String,
              default: "flex-start"
            }), VsRow_dec4 = Prop({
              type: String,
              default: "row"
            }), vue_class_component_esm(VsRow_class = (VsRow_class2 = (VsRow_temp = VsRow_class3 = function(_Vue) {
              inheritsLoose_default()(VsRow, _Vue);
              function VsRow() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this = _Vue.call.apply(_Vue, [this].concat(args)) || this;
                initializerDefineProperty_default()(_this, "w", VsRow_descriptor, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "justify", VsRow_descriptor2, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "align", VsRow_descriptor3, assertThisInitialized_default()(_this));
                initializerDefineProperty_default()(_this, "direction", VsRow_descriptor4, assertThisInitialized_default()(_this));
                return _this;
              }
              var _proto = VsRow.prototype;
              _proto.render = function render(h) {
                var vsRow = h("div", {
                  staticClass: "vs-row",
                  style: {
                    justifyContent: this.justify,
                    alignItems: this.align,
                    flexDirection: this.direction
                  }
                }, this.$slots.default);
                return vsRow;
              };
              return VsRow;
            }(external_commonjs_vue_commonjs2_vue_amd_vue_root_Vue_default.a), VsRow_class3.install = void 0, VsRow_class3.use = void 0, VsRow_temp), VsRow_descriptor = applyDecoratedDescriptor_default()(VsRow_class2.prototype, "w", [VsRow_dec], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRow_descriptor2 = applyDecoratedDescriptor_default()(VsRow_class2.prototype, "justify", [VsRow_dec2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRow_descriptor3 = applyDecoratedDescriptor_default()(VsRow_class2.prototype, "align", [VsRow_dec3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRow_descriptor4 = applyDecoratedDescriptor_default()(VsRow_class2.prototype, "direction", [VsRow_dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), VsRow_class2)) || VsRow_class);
            VsCol_VsCol.install = function(vue) {
              vue.component("vs-col", VsCol_VsCol);
            };
            VsRow_VsRow.install = function(vue) {
              vue.component("vs-row", VsRow_VsRow);
            };
            if (typeof window !== "undefined" && window.Vue) {
              VsCol_VsCol.install(window.Vue);
              VsRow_VsRow.install(window.Vue);
            }
            var vuesax = __webpack_require__(43);
            var defineVuesaxOptions_defineColors = function defineColors(colors) {
              Object.keys(colors).forEach(function(item) {
                if (document.body) {
                  util_setColor(item, colors[item], document.body);
                }
              });
            };
            var defineVuesaxOptions = function defineVuesaxOptions2(options) {
              if (!!options.colors) {
                defineVuesaxOptions_defineColors(options.colors);
              }
            };
            var src_install = function install(Vue, options) {
              Object.values(components_namespaceObject).forEach(function(vsComponent) {
                Vue.use(vsComponent);
              });
              Object.values(layout_namespaceObject).forEach(function(vsLayout) {
                Vue.use(vsLayout);
              });
              if (options) {
                defineVuesaxOptions(options);
              }
              defineVuesaxFunctions(Vue);
            };
            if (typeof window !== "undefined" && window.Vue) {
              src_install(window.Vue);
            }
            var src = __webpack_exports__["default"] = src_install;
          }
          /******/
        ])["default"]
      );
    });
  }
});
export default require_vuesax();
/*! Bundled license information:

vuesax/dist/vuesax.js:
  (*!
    * Vuesax v4.0.1-alpha.24 🖖 (https://lusaxweb.github.io/vuesax/)
    * Forged by Luis Daniel Rovira
    * Released under the MIT License.
    * Donate: https://www.patreon.com/bePatron?c=1567892
    * © 2019, Lusaxweb. (https://lusaxweb.net)
    *)
  (**
  * @license
  * Lodash <https://lodash.com/>
  * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
  * Released under MIT license <https://lodash.com/license>
  * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
  * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
  *)
  (**
    * vue-class-component v7.1.0
    * (c) 2015-present Evan You
    * @license MIT
    *)
*/
//# sourceMappingURL=vuesax.js.map
